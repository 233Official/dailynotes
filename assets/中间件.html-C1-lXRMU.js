import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as t,o as e}from"./app-CFt4SMiv.js";const n={};function l(p,i){return e(),a("div",null,i[0]||(i[0]=[t(`<h1 id="中间件" tabindex="-1"><a class="header-anchor" href="#中间件"><span>中间件</span></a></h1><ul><li><a href="#%E4%B8%AD%E9%97%B4%E4%BB%B6">中间件</a></li></ul><hr><blockquote><p><a href="https://www.bilibili.com/video/BV1iN411X72b?p=38" target="_blank" rel="noopener noreferrer">【独家新技术】从0到1学习 FastAPI 框架的所有知识点_哔哩哔哩_bilibili</a></p></blockquote><p>对于每一个 <code>request</code> 请求到来, 在到达应用(业务逻辑处理)之前会先经过一/多层中间件处理后到达应用(视图, 函数等) , 在返回前经过一/多层中间件处理, 返回结果给客户端</p><p>可以使用中间件拦截所有的 <code>request</code> 请求或者 <code>response</code> 响应</p><p><img src="http://cdn.ayusummer233.top/img/202205010055975.png" alt="image-20220501005558644"></p><p>在 <code>main app</code> 中</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">@app</span><span style="--shiki-light:#4078F2;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">middleware</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;http&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">async</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> add_process_time_header</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;">request</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#ABB2BF;"> Request</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> call_next</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;&quot;&quot;拦截所有 request 请求, 计算其在框架中的处理时间并把结果加载 response header 中</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    :param request: request 请求</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    :param call_next: 将接收request请求做为参数</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    start_time </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> time.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">time</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    response </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> await</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> call_next</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(request)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    process_time </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> time.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">time</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> start_time</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    response.headers[</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;X-Process-Time&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> str</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(process_time)  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 添加自定义的以“X-”开头的请求头</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> response</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/img/202205010104457.png" alt="image-20220501010427259"></p><blockquote><p><strong>需要注意的是带yield的依赖的退出部分的代码 和 后台任务 会在中间件之后运行</strong></p></blockquote><hr>`,12)]))}const k=s(n,[["render",l],["__file","中间件.html.vue"]]),d=JSON.parse('{"path":"/%E5%90%8E%E7%AB%AF/FastAPI/%E4%B8%AD%E9%97%B4%E4%BB%B6.html","title":"中间件","lang":"zh-CN","frontmatter":{"description":"中间件 中间件 【独家新技术】从0到1学习 FastAPI 框架的所有知识点_哔哩哔哩_bilibili 对于每一个 request 请求到来, 在到达应用(业务逻辑处理)之前会先经过一/多层中间件处理后到达应用(视图, 函数等) , 在返回前经过一/多层中间件处理, 返回结果给客户端 可以使用中间件拦截所有的 request 请求或者 respons...","head":[["meta",{"property":"og:url","content":"https://233official.github.io/dailynotes/%E5%90%8E%E7%AB%AF/FastAPI/%E4%B8%AD%E9%97%B4%E4%BB%B6.html"}],["meta",{"property":"og:site_name","content":"DailyNotes"}],["meta",{"property":"og:title","content":"中间件"}],["meta",{"property":"og:description","content":"中间件 中间件 【独家新技术】从0到1学习 FastAPI 框架的所有知识点_哔哩哔哩_bilibili 对于每一个 request 请求到来, 在到达应用(业务逻辑处理)之前会先经过一/多层中间件处理后到达应用(视图, 函数等) , 在返回前经过一/多层中间件处理, 返回结果给客户端 可以使用中间件拦截所有的 request 请求或者 respons..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"http://cdn.ayusummer233.top/img/202205010055975.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-17T03:32:15.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-17T03:32:15.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"中间件\\",\\"image\\":[\\"http://cdn.ayusummer233.top/img/202205010055975.png\\",\\"http://cdn.ayusummer233.top/img/202205010104457.png\\"],\\"dateModified\\":\\"2025-04-17T03:32:15.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"咸鱼型233\\",\\"url\\":\\"https://233official.github.io/dailynotes/\\"}]}"]],"date":"2024-04-30T06:04:55.000Z"},"headers":[],"git":{"createdTime":1714457095000,"updatedTime":1744860735000,"contributors":[{"name":"233Mac","username":"233Mac","email":"ayusummer233@vip.qq.com","commits":2,"url":"https://github.com/233Mac"},{"name":"233JG","username":"233JG","email":"ayusummer233@gmail.com","commits":1,"url":"https://github.com/233JG"}]},"readingTime":{"minutes":0.86,"words":258},"filePathRelative":"后端/FastAPI/中间件.md","localizedDate":"2024年4月30日","excerpt":"","autoDesc":true}');export{k as comp,d as data};
