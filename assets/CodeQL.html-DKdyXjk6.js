import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as e,o as n}from"./app-CFt4SMiv.js";const t={};function l(h,i){return n(),a("div",null,i[0]||(i[0]=[e(`<h1 id="codeql" tabindex="-1"><a class="header-anchor" href="#codeql"><span>CodeQL</span></a></h1><blockquote><p><a href="https://codeql.github.com/docs/" target="_blank" rel="noopener noreferrer">CodeQL documentation (github.com)</a></p><p><a href="https://github.com/ASTTeam/CodeQL" target="_blank" rel="noopener noreferrer">ASTTeam/CodeQL: 《深入理解CodeQL》Finding vulnerabilities with CodeQL. (github.com)</a></p></blockquote><p>CodeQL 是一套 Github 在2019 开源且免费的静态扫描代码工具，让你能在产品release 前及早发现潜藏的漏洞并提供相对应改善的方法。</p><hr><ul><li><a href="#codeql">CodeQL</a><ul><li><a href="#%E4%BD%BF%E7%94%A8-codeql-%E8%AF%86%E5%88%AB%E4%BB%A3%E7%A0%81%E5%BA%93%E4%B8%AD%E7%9A%84%E5%AE%89%E5%85%A8%E6%BC%8F%E6%B4%9E">使用 CodeQL 识别代码库中的安全漏洞</a><ul><li><a href="#%E4%B8%BA-codeql-%E5%87%86%E5%A4%87%E6%95%B0%E6%8D%AE%E5%BA%93">为 CodeQL 准备数据库</a><ul><li><a href="#%E8%AE%BE%E7%BD%AE-cli">设置 CLI</a></li><li><a href="#%E9%AA%8C%E8%AF%81-cli-%E8%AE%BE%E7%BD%AE">验证 CLI 设置</a></li><li><a href="#%E5%88%9B%E5%BB%BA%E6%95%B0%E6%8D%AE%E5%BA%93">创建数据库</a></li><li><a href="#extractors%E6%8F%90%E5%8F%96%E7%A8%8B%E5%BA%8F">Extractors（提取程序）</a></li><li><a href="#codeql-%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE">CodeQL 数据库中的数据</a></li><li><a href="#codeql-%E6%BD%9C%E5%9C%A8%E7%9A%84%E4%B8%8D%E8%B6%B3">CodeQL 潜在的不足</a></li><li><a href="#vscode-extension">VSCode Extension</a></li></ul></li><li><a href="#%E5%9C%A8%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%AD%E8%BF%90%E8%A1%8C-codeql">在数据库中运行 CodeQL</a><ul><li><a href="#%E7%AE%80%E5%8D%95%E7%9A%84-codeql-%E6%9F%A5%E8%AF%A2">简单的 CodeQL 查询</a></li><li><a href="#%E6%9F%A5%E8%AF%A2%E5%85%83%E6%95%B0%E6%8D%AE">查询元数据</a></li><li><a href="#ql-%E8%AF%AD%E6%B3%95">QL 语法</a></li><li><a href="#path-queries-%E8%B7%AF%E5%BE%84%E6%9F%A5%E8%AF%A2">Path queries 路径查询</a></li></ul></li></ul></li><li><a href="#codeql-ctf--go-and-dont-return">CodeQL CTF : Go and don&#39;t return</a><ul><li><a href="#%E6%BC%8F%E6%B4%9E%E4%BB%8B%E7%BB%8D">漏洞介绍</a></li><li><a href="#%E9%9C%80%E8%A6%81%E8%A7%A3%E5%86%B3%E7%9A%84%E9%97%AE%E9%A2%98">需要解决的问题</a></li><li><a href="#%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87">环境准备</a></li><li><a href="#step1-lets-catch-the-bug">Step1-Let&#39;s catch the bug</a><ul><li><a href="#step-11-finding-references-to-errnone">Step 1.1: Finding references to <code>ErrNone</code></a></li><li><a href="#step-12-finding-equality-tests-against-errnone">Step 1.2: Finding equality tests against <code>ErrNone</code></a></li><li><a href="#step-13-finding-if-blocks-making-such-a-test">Step 1.3: Finding if-blocks making such a test</a></li><li><a href="#step-14-finding-return-statements">Step 1.4: Finding return statements</a></li><li><a href="#step-15-finding-if-blocks-without-return-statements">Step 1.5: Finding if-blocks without return statements</a></li><li><a href="#step-16-putting-it-all-together">Step 1.6: Putting it all together</a></li></ul></li><li><a href="#step2improving-the-precision---%E6%8F%90%E9%AB%98%E7%B2%BE%E5%BA%A6">Step2:Improving the precision - 提高精度</a><ul><li><a href="#step-21-find-conditionals-that-are-fed-from-calls-to-isreqauthenticated">Step 2.1: Find conditionals that are fed from calls to <code>isReqAuthenticated</code></a></li></ul></li></ul></li><li><a href="#%E5%AD%A6%E4%B9%A0%E6%9D%90%E6%96%99">学习材料</a></li></ul></li></ul><hr><h2 id="使用-codeql-识别代码库中的安全漏洞" tabindex="-1"><a class="header-anchor" href="#使用-codeql-识别代码库中的安全漏洞"><span>使用 CodeQL 识别代码库中的安全漏洞</span></a></h2><blockquote><p><a href="https://learn.microsoft.com/zh-cn/training/modules/codebase-representation-codeql/" target="_blank" rel="noopener noreferrer">使用 CodeQL 识别代码库中的安全漏洞 / Microsoft Learn / Github 高级安全</a></p><p><a href="https://b23.tv/NR5n8mF" target="_blank" rel="noopener noreferrer">[CodeQL] 1. 初探CodeQL 静态分析 神器-哔哩哔哩</a></p></blockquote><p>假设你是一名拥有 GitHub 存储库管理员权限的开发人员。 你想自动执行安全检查。 以下步骤将帮助你分析发布中是否有漏洞。</p><p>如果当前组织已购买 GitHub Advanced Security。 借助 GitHub Advanced Security 许可证，你可以使用 CodeQL 完成这些任务。</p><p>CodeQL 工具可以分析 GitHub 存储库中的代码并识别安全漏洞。 它可用于组织拥有的公共存储库和专用存储库。 CodeQL 可以分析多种语言，包括 C/C++、Java 和 Python。</p><hr><h3 id="为-codeql-准备数据库" tabindex="-1"><a class="header-anchor" href="#为-codeql-准备数据库"><span>为 CodeQL 准备数据库</span></a></h3><p>CodeQL 将代码视为数据。 通过使用从代码库中提取的可查询数据创建数据库。 然后，可以在此数据库上运行 CodeQL 查询以识别安全漏洞、bug 和其他错误。 可以编写自己的查询或运行由 GitHub 研究人员和社区参与者编写的标准 CodeQL 查询。</p><ul><li>在分析代码之前需要创建一个 CodeQL 数据库，其中包含对代码运行查询所需的所有数据。</li><li>CodeQL 分析依赖于从代码中提取关系数据并使用该数据来生成 CodeQL 数据库。 这些数据库包含有关代码库的所有重要信息。</li></ul><p>可以使用 CodeQL CLI 独立产品来分析代码并生成代码库的数据库表示形式。 数据库准备就绪后，就可以查询数据库，或运行一组查询以生成一组 <code>静态分析结果交换格式 (SARIF) </code>的结果。</p><hr><p>在生成 CodeQL 数据库之前，需要安装和设置 CodeQL CLI。 然后，需要查看要分析的代码库版本。</p><p>对于已编译语言，目录应已准备好生成，并且所有依赖项均已安装。 CodeQL 首先提取代码库中每个源文件的单个关系表示形式以创建数据库。 你将使用此数据库分析代码。</p><p>对于解释型语言，提取程序直接在源代码上运行。 此功能可提供代码库的准确表示形式并解决任何依赖项问题。</p><p>通过监视已编译语言的正常生成过程，可从代码库中提取源文件。 每次调用编译器来处理源文件时，CodeQL 都会创建源文件的副本。 它将收集每个源文件的源代码的所有相关信息。</p><hr><h4 id="设置-cli" tabindex="-1"><a class="header-anchor" href="#设置-cli"><span>设置 CLI</span></a></h4><p>建议通过下载捆绑包来安装 CodeQL CLI 和查询。 与分别下载 CLI 和查询相比，此方法有助于确保兼容性并提高性能。</p><p>CodeQL CLI 下载包是一个 .zip 存档，其中包含工具、脚本和各种 CodeQL 特定文件。 捆绑包中包括 CodeQL CLI、CodeQL GitHub 存储库中查询和库的兼容版本，以及所含查询的预编译版本。</p><ol><li><p>转到 <a href="https://github.com/github/codeql-action/releases" target="_blank" rel="noopener noreferrer">CodeQL 公共存储库的“发布”页</a>。</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202501141454349.png" alt="image-20250114145426075"></p></li><li><p>下载“资产”下特定于平台的捆绑包, 或者下载 <code>codeql-bundle.tar.zst</code> ，其中包含适用于所有受支持平台的 CLI。</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202501141456396.png" alt="image-20250114145620322"></p><blockquote><p>tar.gz 和 tar.zst 是两种常见的压缩归档格式，主要区别在于它们使用的压缩算法不同</p><ul><li>tar.gz 使用了 gzip（GNU zip）算法进行压缩。</li><li>tar.zst 使用了 zstd（Zstandard）算法进行压缩。</li></ul><table><thead><tr><th style="text-align:center;">特性</th><th style="text-align:center;">gzip (<code>.gz</code>)</th><th style="text-align:center;">zstd (<code>.zst</code>)</th></tr></thead><tbody><tr><td style="text-align:center;"><strong>压缩率</strong></td><td style="text-align:center;">中等（较小）</td><td style="text-align:center;">高压缩率，通常优于 gzip</td></tr><tr><td style="text-align:center;"><strong>压缩速度</strong></td><td style="text-align:center;">快</td><td style="text-align:center;">非常快（默认级别下性能优秀）</td></tr><tr><td style="text-align:center;"><strong>解压速度</strong></td><td style="text-align:center;">快</td><td style="text-align:center;">极快，通常比 gzip 快得多</td></tr><tr><td style="text-align:center;"><strong>压缩级别</strong></td><td style="text-align:center;">1 到 9（默认为 6）</td><td style="text-align:center;">1 到 19（默认为 3）</td></tr><tr><td style="text-align:center;"><strong>适用场景</strong></td><td style="text-align:center;">传统场景，广泛兼容，使用率高</td><td style="text-align:center;">新一代算法，高压缩率和速度，适合现代应用</td></tr></tbody></table><p>解压 <code>.tar.gz</code>:</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">tar</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -czf</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> file.tar.gz</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> file/</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">tar</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -xzf</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> file.tar.gz</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>解压 <code>.tar.zst</code></p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">tar</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --zstd</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -cf</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> file.tar.zst</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> file/</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">tar</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --zstd</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -xf</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> file.tar.zst</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>下载完后需要校验一下对应的 sha256 hash, 一致即可</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">shasum</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -a</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 256</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> codeql-bundle-osx64.tar.zst</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/DailyNotes/202501141504743.png" alt="image-20250114150404635"></p><hr><p>报错解压 <code>.tar.zst</code> 时遇到 <code> unable to run program &quot;zstd -d -qq&quot;</code> 的话需要装一下 zstd</p><p>对于 macOS：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">brew</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> zstd</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/DailyNotes/202501141514312.png" alt="image-20250114151451175"></p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202501141515116.png" alt="image-20250114151533975"></p><hr></blockquote></li></ol><p>在 <code>Releases</code> 页上，还可以查看版本的更改日志，以及 CodeQL 捆绑包先前版本的下载。 如有必要，可以下载 <code>codeql-bundle.tar.gz</code>，其中包含所有受支持平台的 CLI。</p><hr><p>解压完成后可以在 <code>codeql</code> 目录下找到 <code>codeql</code> 可执行程序</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202501141518934.png" alt="image-20250114151834879"></p><p>可以将目录添加到 PATH，这样在其他地方也可以直接使用 <code>codeql</code> 命令行程序</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202501141522433.png" alt="image-20250114152228375"></p><hr><h4 id="验证-cli-设置" tabindex="-1"><a class="header-anchor" href="#验证-cli-设置"><span>验证 CLI 设置</span></a></h4><p>建议先将 codeql 程序所在目录添加到 PATH，要么就直接用 codeql 程序的绝对路径来进行调用</p><p>可以运行 CodeQL CLI 子命令来验证是否正确设置了 CLI 并且可以分析数据库：</p><ul><li><p>运行 <code>codeql resolve qlpacks</code> 以显示 CLI 可以找到哪些 CodeQL 包</p><p>此命令显示 CodeQL CLI 捆绑包中包含的 CodeQL 包的名称</p><p>如果 CodeQL CLI 找不到所需语言的 CodeQL 包，请检查是否已下载 CodeQL 捆绑包，而不是 CodeQL CLI 的独立副本。</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202501141525453.png" alt="image-20250114152553389"></p><ul><li>运行 <code>codeql resolve languages</code> 以显示 CodeQL CLI 包\`\`默认支持哪些语言。</li></ul><p><img src="http://cdn.ayusummer233.top/DailyNotes/202501141526202.png" alt="image-20250114152611154"></p><blockquote><p>CodeQL 并没有单独的 C 解析器，而是将 C/C++ 统一到 “cpp” 下，所以输出里只显示 cpp 而没有 c。</p><p>TODO: CSV</p></blockquote></li></ul><hr><h4 id="创建数据库" tabindex="-1"><a class="header-anchor" href="#创建数据库"><span>创建数据库</span></a></h4><blockquote><p><a href="https://b23.tv/NR5n8mF" target="_blank" rel="noopener noreferrer">[CodeQL] 1. 初探CodeQL 静态分析 神器-哔哩哔哩</a></p></blockquote><p>当我们有了一个需要分析的目标项目并且了解其编译执行方法后就可以为其创建 CodeQL 数据库以便后续查询</p><p>例如如下<a href="https://github.com/cradiator/codeql-example/blob/main/video_1/size_of_ptr.c" target="_blank" rel="noopener noreferrer">示例 c 程序</a></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>-----------------</span></span>
<span class="line"><span> |- size_of_ptr.c</span></span>
<span class="line"><span> -- Makefile</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// size_of_ptr.c</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;stdlib.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">struct</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> S {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> a;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> b;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> c;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> d;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> init_s</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">struct</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> S</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> s</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">struct</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> S</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> bad_new_S</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    struct</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> S</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> result;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    result </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> malloc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">sizeof</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(result));</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    init_s</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(result);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> result;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">struct</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> S</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> good_new_S</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    struct</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> S</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> result;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    result </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> malloc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">sizeof</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">result));</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    init_s</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(result);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> result;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">result </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> malloc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">sizeof</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">result</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">));</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>缓冲区是程序中预留的一块内存空间，malloc 的作用是在堆(heap)上动态分配一块连续的内存空间，参数是需要分配的字节数，返回指向这块内存的指针。通过 malloc 分配的内存需要手动释放(使用free)，分配的内存内容是未初始化的，如果分配失败则返回NULL</li><li><code>sizeof(result)</code> 计算的是指针的大小（在32位系统上是4字节，64位系统上是8字节），而不是结构体 <code>struct S</code> 的实际大小（应该是 4个int = 16字节）</li></ul><p>程序实际需要16字节来存储结构体，但 <code>malloc(sizeof(result))</code>只分配了4/8字节的内存空间会导致内存分配不足。当写入完整的结构体数据时，会导致缓冲区溢出，破坏相邻内存区域从而导致程序不稳定，产生不可预期的行为，造成内存损坏，程序崩溃</p></blockquote><div class="language-makefile line-numbers-mode" data-highlighter="shiki" data-ext="makefile" data-title="makefile" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Makefile</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">size_of_ptr.o</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> size_of_ptr.c</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">	clang -c -o size_of_ptr.o size_of_ptr.c</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">clean</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">	-</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">rm -rf *.o output_db</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">db</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> clean</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">	codeql database create --language=cpp --command=make output_db</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><ul><li><p><code>clang -c -o size_of_ptr.o size_of_ptr.c</code></p><ul><li><code>-c</code>：“编译”模式。告诉编译器只进行编译阶段，而不进行链接（linking）阶段。编译器会将源文件 .c 编译成目标文件（.o 文件），而不会生成最终的可执行文件。通常用于将源代码编译成目标文件，然后在后续的链接阶段生成可执行文件。</li><li><code>-o size_of_ptr.o</code>：指定输出文件的名称</li><li><code>size_of_ptr.c</code>：输入的源代码文件。编译器会将这个 C 文件编译成目标文件。</li></ul><hr></li><li><p><code>size_of_ptr.o</code>: 编译目标文件</p><p>依赖: <code>size_of_ptr.c</code></p></li><li><p><code>clean</code>: 清理目标</p></li><li><p><code>db</code>: 创建 CodeQL 数据库</p><p>依赖: <code>clean</code></p></li></ul><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">make</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">           # 默认执行第一个目标 size_of_ptr.o</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">make</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> clean</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     # 执行清理</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">make</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> db</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        # 先执行 clean，再创建数据库</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><hr><p>通过从项目的签出根目录运行以下命令来创建 CodeQL 数据库（对应上述 Makefile 中的 db 段）：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">codeql</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> database</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> create</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">databas</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">e&gt; </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">--language=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">language-identifier</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>在命令中：</p><ul><li>将 <code>&lt;database&gt;</code> 替换为要创建的新数据库的路径。</li><li>将 <code>&lt;language-identifier&gt;</code> 替换为用于创建数据库的语言的标识符。 可以将此标识符与 <code>--db-cluster</code> 一起使用以接受逗号分隔的列表，也可以多次指定它。</li></ul><p>还可以指定以下选项。 这些选项取决于源文件的位置、代码是否需要编译或者是否要为多种语言创建 CodeQL 数据库。</p><ul><li>使用 <code>--source-root</code> 来标识用于创建数据库的主要源文件的根文件夹。</li><li>如果要为多种语言创建数据库，请将 <code>--db-cluster</code> 用于多语言代码库。</li><li>如果要为一种或多种已编译语言创建数据库，则使用 <code>--command</code>。 如果仅使用 Python 和 JavaScript，则不需要此选项。</li><li>将 <code>--no-run-unnecessary-builds</code> 与 <code>--db-cluster</code> 一起使用，以禁用 CodeQL CLI 不需要监视生成的语言的生成命令。</li></ul><p>成功创建数据库后，命令中指定的路径下会显示一个新目录。 如果使用 <code>--db-cluster</code> 选项创建多个数据库，则会为每种语言创建一个子目录。</p><p>每个 CodeQL 数据库目录都包含多个子目录，其中包括用于分析和源存档的关系数据。 源存档是创建数据库时创建的源文件的副本。 CodeQL 使用它来显示分析结果。</p><blockquote><p>例如对于 python 项目：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">codeql</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> database</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> create</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> cve-monitor-wxworkbot-codeql-database</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --language=python</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/DailyNotes/202501141617179.png" alt="image-20250114161738974"></p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202501141619776.png" alt="image-20250114161920687"></p></blockquote><p>对于上述 C 程序可以使用</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">codeql</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> database</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> create</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --language=cpp</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --command=make</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> output_db</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><p><img src="http://cdn.ayusummer233.top/DailyNotes/202501201522999.png" alt="image-20250120152200912"></p><blockquote><p>PS: 如果之前编译了项目的话，由于 make 增量更新的特性，直接运行上述命令会导致没有实际编译，所以一般 codeql 用到 make 时要先 make clean 下</p></blockquote></blockquote><hr><h4 id="extractors-提取程序" tabindex="-1"><a class="header-anchor" href="#extractors-提取程序"><span>Extractors（提取程序）</span></a></h4><p>Extractors 是为每个输入文件生成关系数据和源引用的工具，可据此构建 CodeQL 数据库。 CodeQL 支持的每种语言都有一个 Extractor。 这种结构可确保提取过程尽可能准确。</p><p>每个 Extractor 都定义了自己的一组配置选项。 输入 <code>codeql resolve extractor --format=betterjson</code> 可以看到如下所示格式的数据</p><p>这条命令的含义是识别系统中已安装的CodeQL提取器，以更易读的JSON格式输出显示这些提取器的详细信息</p><p>由于我们没有手动编写 extractor，这里读取的就是默认的 extractor</p><div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" data-title="json" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;extractor_root&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> : </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;/home/user/codeql/java&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;extractor_options&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> : {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        &quot;option1&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> : {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">            &quot;title&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> : </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Java extractor option 1&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">            &quot;description&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> : </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;An example string option for the Java extractor.&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">            &quot;type&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> : </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;string&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">            &quot;pattern&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> : </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;[a-z]+&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        },</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        &quot;group1&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> : {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">            &quot;title&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> : </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Java extractor group 1&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">            &quot;description&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> : </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;An example option group for the Java extractor.&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">            &quot;type&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> : </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;object&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">            &quot;properties&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> : {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">                &quot;option2&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> : {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">                    &quot;title&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> : </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Java extractor option 2&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">                    &quot;description&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> : </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;An example array option for the Java extractor&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">                    &quot;type&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> : </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;array&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">                    &quot;pattern&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> : </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;[1-9][0-9]*&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/DailyNotes/202501201750569.png" alt="image-20250114162317064"></p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202501201651059.png" alt="image-20250120165101889"></p><ul><li><p><code>extractor_root</code>: 指示了 CodeQL 提取器(codeql 可执行程序)的根目录位置</p></li><li><p><code>extractor_options</code>: 可配置的提取器选项，用于定制 CodeQL 如何解析和提取 C++ 代码</p><ul><li><p><code>scale_timeouts</code>: 控制提取器在尝试确定源代码所用的编译器时，如何调整编译器探测过程中的超时时间。某些系统在高负载下可能无法在默认的超时时间内返回结果，因此可以使用此选项来调整超时时间。</p><p><strong>类型</strong>：string，且必须符合正则表达式 [0-9]+，即一个数字字符串。</p><p><strong>使用示例</strong>：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">codeql</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> resolve</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> extractor</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --format=betterjson</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --language=cpp</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --extractor-options=scale_timeouts=30</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这样，提取器在尝试探测编译器时会将超时时间延长到 30 秒，而不是默认的 10 或 15 秒。</p></li><li><p><code>log_verbosity</code>: 控制提取器的日志输出级别。通过调整这个选项，可以改变提取过程中的日志详细程度。其可选值包括：</p><ul><li><code>0（quiet）</code>：不输出日志或仅输出最基本的信息。</li><li><code>1（normal）</code>：默认的日志级别，提供适量的日志。</li><li><code>2（chatty）</code>：提供更多的调试信息。</li><li><code>3（noisy）</code>：输出非常详细的日志信息，适用于调试。</li></ul><p><strong>类型</strong>：string，符合正则表达式 [0-3]，即 0 到 3 之间的数字。</p><p><strong>使用示例</strong>：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">codeql</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> resolve</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> extractor</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --format=betterjson</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --language=cpp</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --extractor-options=log_verbosity=3</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul></li></ul><hr><p>若要了解语言提取程序可用的选项，请输入 <code>codeql resolve languages --format=betterjson</code>（显示完整的所有语言的 extractor 可配置项信息） 或 <code>codeql resolve extractor --format=betterjson</code>。 <code>betterjson</code> 输出格式还提供提取程序的根和其他特定于语言的选项。</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202501201751049.png" alt="image-20250120175136985"></p><hr><h4 id="codeql-数据库中的数据" tabindex="-1"><a class="header-anchor" href="#codeql-数据库中的数据"><span>CodeQL 数据库中的数据</span></a></h4><p>CodeQL 数据库是包含分析所需的所有数据的单个目录。 此数据包括关系数据、复制的源文件和特定语言的数据库架构，该架构指定数据中的相互关系。 CodeQL 在提取后导入此数据。</p><p>CodeQL 数据库提供已从代码库中提取的特定语言的可查询数据的快照。 此数据是代码的完整分层表示形式。 它包括抽象语法树（abstract syntax tree）、数据流图（data-flow graph）和控制流图（control-flow graph）的表示形式。</p><p>对于多语言代码库，数据库一次生成一种语言。 每种语言都有自己唯一的数据库架构。 在提取过程中，该架构在初始词法分析和通过 CodeQL 进行的复杂分析之间提供了一个接口。</p><p>CodeQL 数据库包括两个主表：</p><ul><li><code>expressions</code> 表包含在生成过程中 CodeQL 分析的源代码中的每个表达式对应的行。</li><li><code>statements</code> 表包含在生成过程中 CodeQL 分析的源代码中的每个语句对应的行。</li></ul><p>CodeQL 库定义类，用于在其中每个表上提供一个抽象层。 此层包括相关的辅助表 <code>Expr</code> 和 <code>Stmt</code>。</p><hr><h4 id="codeql-潜在的不足" tabindex="-1"><a class="header-anchor" href="#codeql-潜在的不足"><span>CodeQL 潜在的不足</span></a></h4><p>在代码扫描工作流程中创建数据库存在一些潜在的缺陷。本节专门讨论使用 GitHub CodeQL 操作所潜在的缺陷。</p><p>您需要为 <code>autobuild</code> 使用语言矩阵来构建矩阵中列出的每种编译语言。您可以使用一个矩阵为一种编程语言、操作系统或工具的多个受支持版本创建任务。</p><p>如果您不使用矩阵， <code>autobuild</code> 会尝试使用存储库中源文件最多的受支持编译语言进行构建。除了 Go 语言之外，对编译语言的分析通常会失败，除非您在执行分析步骤之前提供明确的命令来构建代码。</p><p><a href="https://learn.microsoft.com/en-us/training/modules/codebase-representation-codeql/2-how-prepare-database-codeql" target="_blank" rel="noopener noreferrer">文档</a>建议在代码扫描工作流文件中配置一个在分析前运行的构建步骤，而不是让 <code>autobuild</code> 尝试构建编译语言。这样，工作流文件将根据您的系统和项目的构建要求进行定制，以实现更可靠的扫描。</p><p>可以在 <a href="https://docs.github.com/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/codeql-code-scanning-for-compiled-languages#about-autobuild-for-codeql" target="_blank" rel="noopener noreferrer">CodeQL autobuild documentation</a> 中阅读有关特定语言和 <code>autobuild</code> 步骤的更多内容。</p><hr><h4 id="vscode-extension" tabindex="-1"><a class="header-anchor" href="#vscode-extension"><span>VSCode Extension</span></a></h4><p><img src="http://cdn.ayusummer233.top/DailyNotes/202501201817010.png" alt="image-20250120181727787"></p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202501201818098.png" alt="image-20250120181802034"></p><p>该扩展会使用在 <code>PATH</code> 中找到的已安装的命令行界面（CLI）（如果可用）。如果不可用，该扩展会自动为您管理对 CLI 可执行文件的访问。自动管理可确保 CLI 与 CodeQL 扩展兼容。</p><hr><h3 id="在数据库中运行-codeql" tabindex="-1"><a class="header-anchor" href="#在数据库中运行-codeql"><span>在数据库中运行 CodeQL</span></a></h3><blockquote><p><a href="https://learn.microsoft.com/en-us/training/modules/codebase-representation-codeql/3-run-codeql-database" target="_blank" rel="noopener noreferrer">在数据库中运行 CodeQL</a></p></blockquote><p>将代码提取到数据库之后，接下来可使用 CodeQL 查询对其进行分析。 GitHub 专家、安全研究人员和社区参与者编写和维护默认 CodeQL 查询。 你也可以编写自己的查询。</p><p>可在代码扫描分析中使用 CodeQL 查询来查找源代码中的问题以及潜在的安全漏洞。 还可编写自定义查询来识别在源代码中使用的每种语言的问题。</p><p>有两种重要的查询类型：</p><ul><li><code>Alert queries(警报查询)</code> 突出显示代码特定位置的问题。</li><li><code>Path queries(路径查询)</code> 描述代码中 source 和 sink 之间的信息流。</li></ul><hr><h4 id="简单的-codeql-查询" tabindex="-1"><a class="header-anchor" href="#简单的-codeql-查询"><span>简单的 CodeQL 查询</span></a></h4><p>基本 CodeQL 查询结构包含文件扩展名 <code>.ql</code> 和 <code>select</code> 子句。 下面是一个示例查询结构：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/**</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> *</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> * Query metadata</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> *</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> */</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">import </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/* ... CodeQL libraries or modules ... */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/* ... Optional, define CodeQL classes and predicates ... */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> /* ... variable declarations ... /</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">where / ... logical formula ... /</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">select / ... expressions ... */</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>例如使用 VSCode 的 CodeQL 扩展的话选择 codeql 数据库后新建查询语句会有一个查询示例：</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202501141635941.png" alt="image-20250114163523767"></p><p>这个查询会从 CodeQL 数据库中获取所有的 File 对象，并对每个 File 输出 &quot;Hello, world!&quot;，从而确认数据库中有哪些文件被收集</p><p>由于前面数据库是指定了语言为 python 创建的，相应的这里会显示所有的 py 文件</p></blockquote><p>在 VSCode 的 CodeQL 扩展中倒入数据库：</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202501202034411.png" alt="image-20250120203420269"></p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202501202035208.png" alt="image-20250120203500134"></p><p>导入数据库完成后开始新建查询：</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202501202035267.png" alt="image-20250120203558219"></p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202501202036029.png" alt="image-20250120203609951"></p><p>路径直接选择当前项目根目录即可：</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202501202037998.png" alt="image-20250120203746946"></p><p>自带一个默认的文件查询，确认哪些文件被收集了</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202501202038600.png" alt="image-20250120203848552"></p><hr><h4 id="查询元数据" tabindex="-1"><a class="header-anchor" href="#查询元数据"><span>查询元数据</span></a></h4><p>使用 CodeQL 进行代码扫描时，会以一种突出显示当前查询所要查找的潜在问题点的方式生成结果。</p><p>这些 queries 包含的 <code>metadata properties(元数据属性)</code>指示了结果是如何被解释的。</p><p>可以使用这些 metadata 来：</p><ul><li>在将你自定义的 queries 添加到 GitHub 存储库时辨识他们</li><li>提供有关查询用途的信息。</li></ul><p>元数据信息可以包括查询的说明、唯一 ID 及其问题类型（alert or path）。 元数据还指定解释和显示查询结果的方式。</p><p>GitHub 有一个推荐的 query metadata 样式指南。 可以在 <a href="https://github.com/github/codeql/blob/main/docs/query-metadata-style-guide.md" target="_blank" rel="noopener noreferrer">CodeQL 文档</a>中找到它。</p><p>这是一个标准 Java 查询之的 metadata 示例：</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202501141638812.png" alt="显示查询元数据的屏幕截图。"></p><blockquote><ul><li><p><code>@name Type mismatch on container modification</code></p><p>当用户运行此 query 时，这个名称会作为结果的标题，告诉用户问题的具体类型。</p><p>这个 query 检测的是<strong>容器修改中的类型不匹配问题</strong>。</p></li><li><p><code>@description Calling container modification methods such as &#39;Collection.remove&#39; or &#39;Map.remove&#39; with an object of a type that is incompatible with the corresponding container element type is unlikely to have any effect.</code></p><p>详细描述查询的检测内容和问题场景, 帮助用户理解查询的目标和问题的潜在影响。</p><p>描述指出，当调用容器修改方法（如 Collection.remove 或 Map.remove）时，如果传入的对象类型与容器元素类型不兼容，该调用可能不会起到预期效果。</p><p>这种问题通常是由于开发者对容器的类型或传递的对象类型理解不清导致的，可能会导致程序逻辑错误。</p></li><li><p><code>@kind problem</code></p><p>查询的类别。告诉 CodeQL 和用户，这个 query 检测的问题类型。</p><p>problem 表示这个 query 检测的是一种代码中的问题</p></li><li><p><code>@problem.severity error</code></p><p>定义检测到的问题的严重性。帮助用户根据严重程度排序和优先处理问题。</p><p>error 表示这是一个严重的问题，可能会导致程序运行时出错或逻辑异常。</p></li><li><p><code>@precision very-high</code></p><p>查询的准确性。帮助用户理解查询的可靠性。</p><p>very-high 表示此查询非常精确，几乎不会出现误报（false positive）。</p><p>用户可以放心地处理查询结果，而不用担心错误标记无害的代码。</p></li><li><p><code>@id java/type-mismatch-modification</code></p><p>为此 query 分配的唯一标识符。便于引用或管理查询（如运行单个查询或排除某个查询）。</p><ul><li><code>java</code>：表示这是针对 Java 代码的查询。</li><li><code>type-mismatch-modification</code>：表示它检测的是类型不匹配问题，尤其是容器修改相关的类型不匹配。</li></ul></li><li><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>@tags reliability</span></span>
<span class="line"><span>       correctness</span></span>
<span class="line"><span>       logic</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>定义查询的标签，以标记查询的主题或检测的主要问题类型。帮助用户根据标签分类或过滤查询。</p><ul><li><code>reliability</code>：这个查询关注代码的可靠性问题。</li><li><code>correctness</code>：表明这个查询关注代码的正确性。</li><li><code>logic</code>：这个查询与程序逻辑相关。</li></ul></li></ul></blockquote><p>CodeQL 不会解释没有元数据的查询。它会将这些结果显示为表格，而不会在源代码中显示它们。</p><p>对于没有 metadata 的 query</p><ul><li><p>CodeQL 不会将查询的结果与具体的代码上下文关联，也不会在源代码的相关位置高亮显示这些问题。</p><p>取而代之，它会将查询的结果显示为一个简单的<strong>表格</strong>，其中列出了查询找到的所有匹配项（如文件路径、行号、表达式等）。</p></li><li><p>这种结果形式缺乏友好的可视化支持（如直接跳转到源代码中的问题），因为 CodeQL 无法根据缺少的元数据理解查询结果的背景信息。</p></li></ul><hr><h4 id="ql-语法" tabindex="-1"><a class="header-anchor" href="#ql-语法"><span>QL 语法</span></a></h4><p>QL 是一种声明性、面向对象的查询语言。 它经过优化，可实现对分层数据结构（尤其是表示软件项目的数据库）的高效分析。</p><p>QL 的语法类似于 SQL，但 QL 的语义基于 Datalog。 Datalog 是一种声明性逻辑编程语言，通常用于查询语言。 由于 QL 主要作为一种逻辑语言使用，因此 QL 中的所有操作都是逻辑操作。 QL 还从 Datalog 继承了递归谓词。 QL 增加了对聚合的支持，使复杂的查询简洁明了。</p><p>QL 语言由逻辑公式组成。 它使用常见的逻辑连接，如 <code>and</code>、<code>or</code> 和 <code>not</code>，以及 <code>forall</code> 和 <code>exists</code> 等限定符。 由于 QL 继承递归谓词，因此还可以使用简单的 QL 语法和聚合（如 <code>count</code>、<code>sum</code> 和 <code>average</code>）来编写复杂的递归查询。</p><p>有关 QL 语言的详细信息，请参阅 <a href="https://codeql.github.com/docs/ql-language-reference/about-the-ql-language/" target="_blank" rel="noopener noreferrer">CodeQL 文档</a>。</p><hr><p>还是从上面的示例 c 程序出发</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;stdlib.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">struct</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> S {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> a;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> b;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> c;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> d;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};、</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> init_s</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">struct</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> S</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> s</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">struct</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> S</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> bad_new_S</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    struct</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> S</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> result;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    result </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> malloc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">sizeof</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(result));</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    init_s</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(result);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> result;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">struct</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> S</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> good_new_S</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    struct</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> S</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> result;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    result </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> malloc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">sizeof</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">result));</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    init_s</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(result);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> result;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们要匹配的是 malloc 函数的参数是 sizeof 表达式，且 sizeof 表达式的参数类型为指针的情况</p><p>那么需要一层层来匹配</p><p>首先 malloc 是函数，我们先来看下所有的函数以及函数调用的匹配方式：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> FunctionCall </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">call</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">select</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> call</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;获取所有的函数调用&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/DailyNotes/202501211427088.png" alt="image-20250121142716777"></p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202501211427061.png" alt="image-20250121142739941"></p><blockquote><p>TODO: 为什么内层函数调用没有</p></blockquote><hr><div class="language-ql line-numbers-mode" data-highlighter="shiki" data-ext="ql" data-title="ql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Function</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> func</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">select</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> func</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;获取所有的函数&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/DailyNotes/202501211429593.png" alt="image-20250121142920533"></p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202501211430865.png" alt="image-20250121143042785"></p><hr><p>然后可以将函数与函数调用关联起来，只查找被调用了的函数</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> FunctionCall </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">call</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">Function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> func</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">where</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> call</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">getTarget</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> func</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">select</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> call</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;函数调用：&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> + </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">call</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, func, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;调用目标函数：&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> + func</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/DailyNotes/202501211432921.png" alt="image-20250121143257839"></p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202501211433949.png" alt="image-20250121143312841"></p><hr><p>接下来我们可以将被调用的函数限定为 malloc 函数：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> FunctionCall </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">call</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">Function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> func</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">where</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> call</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">getTarget</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> func </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">and</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> func</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">getName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;malloc&quot;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">select</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> call</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;函数调用：&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> + </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">call</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, func, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;调用目标函数：&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> + func</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/DailyNotes/202501211435201.png" alt="image-20250121143513058"></p><hr><p>然后进一步查找 malloc 的参数是 sizeof 表达式的情况：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> FunctionCall </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">call</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">Function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> func, SizeofOperator sizeof</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">where</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">	call</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">getTarget</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> func </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">and</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">	func</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">getName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;malloc&quot;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> and</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">	call</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">getArgument</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> sizeof</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">select</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> call</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;函数调用：&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> + </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">call</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, func, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;调用目标函数：&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> + func, sizeof, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;sizeof 表达式：&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> + sizeof</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/DailyNotes/202501211441407.png" alt="image-20250121144125315"></p><p>在 CodeQL 的 cpp 库中，有两种 sizeof 相关的类：</p><p><code>SizeofOperator</code>:</p><ul><li>代表所有 sizeof 操作符的使用</li><li>包括对类型和表达式的sizeof操作</li><li>例如：<code>sizeof(int)</code> 和 <code>sizeof(x)</code> 都包含</li></ul><p><code>SizeofExprOperator</code>:</p><ul><li>是 SizeofOperator 的子类</li><li>仅代表对表达式的sizeof操作</li><li>只匹配 <code>sizeof(expression)</code> 形式</li><li>例如：<code>sizeof(x)</code>，但不包括 <code>sizeof(int)</code></li></ul><blockquote><p>TODO: SizeofExprOperator expression, weishenme 热塑两天 是个表达式</p></blockquote><hr><p>接下来需要进一步查看 sizeof 表达式的参数为指针类型的情况，那么先要获取到 sizeof 表达式的参数：</p><p>这里需要使用到 <code>SizeofExprOperator</code> 的 <code>getExprOperand</code> 函数来获取 sizeof 表达式中包含的表达式</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202501211450643.png" alt="image-20250121145012495"></p><hr><p>接下来需要继续匹配这个 sizeof 的表达式，单独把指针类型的拎出来</p><p>可以先看看获取到的这俩表达式的类型，这就需要使用到 CodeQL 中所有对象都有的 <code>getPrimaryQlClasses()</code> 来获取到对象类型</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> FunctionCall </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">call</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">Function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> func, SizeofExprOperator sizeof, Expr expr</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">where</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">	call</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">getTarget</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> func </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">and</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">	func</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">getName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;malloc&quot;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> and</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">	call</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">getArgument</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> sizeof </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">and</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">	sizeof</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">getExprOperand</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> expr</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">select</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> call</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, func, sizeof, expr, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">expr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">getPrimaryQlClasses</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/DailyNotes/202501211454259.png" alt="image-20250121145411198"></p><p><strong>VariableAccess</strong></p><ul><li>表示对变量的直接访问</li><li>例如：<code>result</code></li></ul><p><strong>PointerDereferenceExpr</strong></p><ul><li>表示对指针的解引用操作</li><li>例如：<code>*result</code></li></ul><hr><p>接下来匹配 sizeof 的参数是 VariableAccess 的情况, 然后顺便看看怎么具体限定这个 ViriableAccess 是指针类型</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> FunctionCall </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">call</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">Function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> func, SizeofExprOperator sizeof, VariableAccess va</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">where</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">	call</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">getTarget</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> func </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">and</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">	func</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">getName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;malloc&quot;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> and</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">	call</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">getArgument</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> sizeof </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">and</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">	sizeof</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">getExprOperand</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> va</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">select</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> call</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, func, sizeof, va, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">va</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">getType</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(), </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">va</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">getTarget</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(), </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">va</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">getTarget</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().getType(), </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">va</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">getTarget</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().getType().getPrimaryQlClasses()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/DailyNotes/202501211534093.png" alt="image-20250121153457931"></p><blockquote><p>可以看到后续对于变量没有标题了，所以前面用 <code>&quot;描述&quot; + xxx</code> 的形式在这里可以用</p></blockquote><ul><li><strong>va.getType()</strong>：获取变量访问表达式的类型 - <code>struct S*</code>（指针类型）</li><li><strong>va.getTarget()</strong>：获取被访问的变量声明 - 指向 <code>struct S* result</code> 这个声明</li><li><strong>va.getTarget().getType()</strong>：获取变量声明的类型，同样是 <code>struct S*</code></li><li><strong>va.getTarget().getType().getPrimaryQlClasses()</strong>：获取类型在 CodeQL 中的主要类别 - 返回 &quot;PointerType&quot; 因为是指针类型</li></ul><hr><p>然后就是通过 PointerType 来具体限定出问题点了</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    FunctionCall </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">call</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    Function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> func,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    SizeofExprOperator sizeof,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    VariableAccess va</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">where</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    call</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">getTarget</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> func </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">and</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    func</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">getName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;malloc&quot;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> and</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    call</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">getArgument</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> sizeof </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">and</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    sizeof</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">getExprOperand</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> va </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">and</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    va</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">getTarget</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().getType() instanceof PointerType</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">select</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> sizeof, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;此 malloc 调用的参数是指针类型的 sizeof 表达式&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/DailyNotes/202501211540350.png" alt="image-20250121154000268"></p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202501211541870.png" alt="image-20250121154134717"></p><hr><h4 id="path-queries-路径查询" tabindex="-1"><a class="header-anchor" href="#path-queries-路径查询"><span>Path queries 路径查询</span></a></h4><p>信息在程序中流动的方式很重要。 看似正常的数据可能以意外的方式流动，从而导致其被恶意使用。</p><p>创建路径查询有助于直观显示通过代码库的信息流。 查询可以跟踪数据从其可能起点 (<code>source</code>) 到其可能终结点 (<code>sink</code>) 的路径。 要对路径建模，查询必须提供有关 source 和 sink 的信息，以及链接它们的数据流步骤。</p><p>要开始编写自己的路径查询，最简单的方法是使用现有查询之一作为模板。 若要获取支持语言的这些查询，请参阅 <a href="https://codeql.github.com/codeql-query-help/" target="_blank" rel="noopener noreferrer">CodeQL 文档</a>。</p><p>路径查询将需要某些元数据、查询谓词和 <code>select</code> 语句结构。 CodeQL 中的许多内置路径查询都遵循简单的结构。 这些结构取决于 CodeQL 对要分析的语言所采用的建模方式。</p><p>以下是路径查询的示例模板：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">/**</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> *</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ...</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> *</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> @kind</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> path-problem</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> *</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ...</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">languag</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">e&gt;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">//</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> For</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> some</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> languages</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (Java/C++/Python/Swift), you need to explicitly import the data-flow library, such as</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">//</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> import</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> semmle.code.java.dataflow.DataFlow</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> or</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> import</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> codeql.swift.dataflow.DataFlow</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">module</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Flow</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> DataFlow::Global</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">MyConfiguratio</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">n&gt;;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">import</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Flow::PathGraph</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Flow::PathNode</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> source,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Flow::PathNode</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> sink</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">where</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Flow::flowPath</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">source</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> sink</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">select</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> sink.getNode(),</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> source, sink, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;&lt;message&gt;&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在该模板中：</p><ul><li><code>MyConfiguration</code> 是一个模块其中包含定义数据如何在 <code>source</code> 和 <code>sink</code> 之间流动的谓词。</li><li><code>Flow</code> 是基于 <code>MyConfiguration</code> 的数据流计算的结果。</li><li><code>Flow::Pathgraph</code> 是需要导入的结果数据流图形模块，以便在查询中包含路径说明。</li><li><code>source</code> 和 <code>sink</code> 是配置中定义的图形中的节点，<code>Flow::PathNode</code> 是它们的类型。</li><li><code>DataFlow::Global&lt;..&gt;</code> 是数据流的调用。 可以改用 <code>TaintTracking::Global&lt;..&gt;</code> 来包含一组默认的其他污点步骤。</li></ul><hr><h2 id="codeql-ctf-go-and-don-t-return" tabindex="-1"><a class="header-anchor" href="#codeql-ctf-go-and-don-t-return"><span>CodeQL CTF : Go and don&#39;t return</span></a></h2><blockquote><p><a href="https://securitylab.github.com/ctf/go-and-dont-return/" target="_blank" rel="noopener noreferrer">CodeQL CTF : Go and don&#39;t return / Github Security Lab</a></p><p><a href="https://github.com/github/vscode-codeql-starter" target="_blank" rel="noopener noreferrer">vscode-codeql-starter</a></p></blockquote><p>寻找对象存储中最近发现的一个漏洞。此身份验证绕过漏洞使攻击者能够在不知道管理员密钥的情况下执行管理员 API 操作。</p><p>使用 CodeQL，您将学习如何检测此漏洞，以及如何将您的查询进行泛化以捕获各种相关漏洞。</p><p>学习材料</p><ul><li><a href="https://codeql.github.com/docs/writing-codeql-queries/ql-tutorials/#ql-tutorials" target="_blank" rel="noopener noreferrer">the CodeQL tutorials</a></li><li><a href="https://codeql.github.com/docs/codeql-language-guides/codeql-for-go/" target="_blank" rel="noopener noreferrer">CodeQL training examples for Go</a>.</li></ul><hr><h3 id="漏洞介绍" tabindex="-1"><a class="header-anchor" href="#漏洞介绍"><span>漏洞介绍</span></a></h3><p>MinIO 是一个与亚马逊 S3 兼容的对象存储。2020 年 4 月，开发人员收到警报，发现一个严重的安全问题：MinIO 管理 API 中存在一个身份验证绕过问题。如果有管理员访问密钥，就有可能在不知道管理员秘密密钥的情况下执行管理 API 操作（例如，为现有访问密钥创建新的服务账户）。</p><p>这个权限检查错误被分配为 <code>CVE-2020-11012</code>，并通过此提交进行了修复。MinIO 发布了一个 GitHub 安全公告，以通知开源生态系统并要求他们进行升级，</p><hr><h3 id="需要解决的问题" tabindex="-1"><a class="header-anchor" href="#需要解决的问题"><span>需要解决的问题</span></a></h3><p>正如您在 <a href="https://github.com/minio/minio/commit/4cd6ca02c7957aeb2de3eede08b0754332a77923" target="_blank" rel="noopener noreferrer">fix commit</a> 中所看到的，问题是在一个 <code>if s3Err != ErrNone {</code> 块中缺少 <code>return</code> 。然后，函数 <code>validateAdminSignature</code> 未能向上游返回验证的结果。这是一个在代码审查期间很容易未被发现的简单错误，所以让我们尝试使用 CodeQL 来自动检测这种错误，然后完善我们的查询，只找到那些真正重要的错误。</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202501211544756.png" alt="image-20250121154458605"></p><hr><h3 id="环境准备" tabindex="-1"><a class="header-anchor" href="#环境准备"><span>环境准备</span></a></h3><p>Clone</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> clone</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> https://github.com/github/vscode-codeql-starter.git</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> submodule</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> update</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --init</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --remote</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>打开</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202501141656524.png" alt="image-20250114165659412"></p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202501211553712.png" alt="image-20250121155339557"></p><ul><li><code>ql</code> 文件夹包含了针对 C/C++、C#、Go、Java、JavaScript/Typescript、Python 和 Ruby 的开源代码 QL 标准库。它跟踪了 https://github.com/github/codeql 中标记为 <code>codeql-cli/latest</code> 的分支。你可以从这里运行标准查询，并浏览这些库。</li><li><code>codeql-custom-queries-&lt;language&gt;</code> 的文件夹已准备好，供您开始为每种语言开发自定义查询，同时使用标准库。相应的每个目录里都有一示例查询，如上图所示。</li></ul><p>选择从 Archive 打开 database，然后打开从 <a href="https://github.com/github/securitylab/releases/download/ctf-go-and-dont-return/minio-db-2020-11012-broken.zip" target="_blank" rel="noopener noreferrer">this CodeQL database of MinIO</a> 下载的 zip 文件</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202501211559561.png" alt="image-20250121155949504"></p><p>然后可以尝试运行位于 <code>codeql-custom-queries-go</code> 文件夹中的 <code>example.ql</code> 查询进行测试。</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202501211601945.png" alt="image-20250121160102797"></p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202501211601758.png" alt="image-20250121160134681"></p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> BlockStmt b</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">where</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">getNumStmt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">select</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> b, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;This is an empty block.&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个查询可以帮助找到代码中所有空的代码块（不包含任何语句的代码块）</p><ul><li><code>BlockStmt</code>（代码块语句）</li></ul><p><code>BlockStmt</code>：表示Go语言中的代码块，通常由花括号<code>{}</code>包围</p><ul><li><code>b.getNumStmt() = 0</code>（代码块中语句数量为0）</li></ul><p><code>getNumStmt()</code>：方法返回代码块中包含的语句数量</p><hr><h3 id="step1-let-s-catch-the-bug" tabindex="-1"><a class="header-anchor" href="#step1-let-s-catch-the-bug"><span>Step1-Let&#39;s catch the bug</span></a></h3><p>首先，让我们构建一个查询来查找存在问题的代码块。我们正在寻找那些测试变量与 <code>ErrNone</code> 进行比较且不包含返回语句的 <code>if</code> 块。我们将逐步进行此搜索，以帮助您熟悉概念和 CodeQL Go 库。</p><hr><h4 id="step-1-1-finding-references-to-errnone" tabindex="-1"><a class="header-anchor" href="#step-1-1-finding-references-to-errnone"><span>Step 1.1: Finding references to <code>ErrNone</code></span></a></h4><p>在这一步中，您将在代码中找到所有对 <code>ErrNone</code> 的引用。</p><p>您的查询应类似于 <code>codeql-custom-queries-go</code> 文件夹中可用的 <code>example.ql</code> 查询。第一行应为 <code>import go</code> ，用于导入 CodeQL Go 库，查询的主体是</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> &lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">variable_type</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> &lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">variable_name</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> // this </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">is</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> the declaration</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    where</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> &lt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">filter</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    select</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> &lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">variable_name</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编写查询以查找所有名为 <code>ErrNone</code> 的 <code>identifiers</code>(标识符)。您可以在 <a href="https://codeql.github.com/docs/codeql-language-guides/codeql-library-for-go/#expressions" target="_blank" rel="noopener noreferrer">documentation</a> 中找到要查询的相关对象类型。您的查询应返回 231 个结果。</p><hr><ul><li><p><code>Ident</code> 是 Go CodeQL 库中表示标识符的类</p></li><li><p><code>getName()</code> 方法获取标识符的名称</p></li></ul><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">import </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">go</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> Ident i</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">where</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">getName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;ErrNone&quot;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">select</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> i</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/DailyNotes/202501211614915.png" alt="image-20250121161429739"></p><hr><h4 id="step-1-2-finding-equality-tests-against-errnone" tabindex="-1"><a class="header-anchor" href="#step-1-2-finding-equality-tests-against-errnone"><span>Step 1.2: Finding equality tests against <code>ErrNone</code></span></a></h4><p>在下一步中，编写一个查询以查找所有其中一个操作数是名为 <code>ErrNone</code> 的标识符的相等测试表达式。您的查询应返回 158 个结果。</p><blockquote><p>Tip: 在 <a href="https://codeql.github.com/docs/ql-language-reference/expressions/#casts" target="_blank" rel="noopener noreferrer">documentation</a> 中可以了解更多关于如何将表达式的类型限制为特定类型的信息。</p></blockquote><hr><ul><li><p><code>EqualityTestExpr</code> 是 Go CodeQL 库中表示相等测试表达式的类</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> EqualityTestExpr e</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">select</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">getAnOperand</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/DailyNotes/202501211621654.png" alt="image-20250121162130512"></p></li><li><p><code>getAnOperand()</code> 方法获取相等测试表达式的一个操作数</p></li><li><p><code>Ident</code> 是 Go CodeQL 库中表示标识符的类</p></li><li><p><code>getName()</code> 方法获取标识符的名称</p></li><li><p><code>e.getAnOperand().(Ident)</code> 将表达式的类型限制为 <code>Ident</code></p></li></ul><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> EqualityTestExpr e</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">where</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">getAnOperand</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().(Ident).getName() </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;ErrNone&quot;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">select</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> e</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/DailyNotes/202501211623267.png" alt="image-20250121162331188"></p><hr><h4 id="step-1-3-finding-if-blocks-making-such-a-test" tabindex="-1"><a class="header-anchor" href="#step-1-3-finding-if-blocks-making-such-a-test"><span>Step 1.3: Finding if-blocks making such a test</span></a></h4><p>查找进行此类测试的 if 块</p><p>编写一个查询，查找所有条件类似于步骤 1.2 中的相等测试的 if 语句。您的查询应返回 133 个结果。</p><blockquote><p><strong>Tip</strong>: Search the <a href="https://codeql.github.com/docs/codeql-language-guides/codeql-library-for-go/#statements" target="_blank" rel="noopener noreferrer">documentation</a> for the relevant statement type.</p></blockquote><hr><ul><li><code>IfStmt</code> 是 Go CodeQL 库中表示 if 语句的类</li><li><code>getCond()</code> 方法获取 if 语句的条件表达式</li><li><code>EqualityTestExpr</code> 是 Go CodeQL 库中表示相等测试表达式的类</li></ul><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> IfStmt s</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">where</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> s</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">getCond</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().(EqualityTestExpr).getAnOperand().(Ident).getName() </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;ErrNone&quot;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">select</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> s</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/DailyNotes/202501211626725.png" alt="image-20250121162652654"></p><hr><h4 id="step-1-4-finding-return-statements" tabindex="-1"><a class="header-anchor" href="#step-1-4-finding-return-statements"><span>Step 1.4: Finding return statements</span></a></h4><p>查找返回语句</p><p>编写一个查询以查找所有返回语句。您的查询应返回 10,651 个结果。</p><hr><ul><li><code>ReturnStmt</code> 是 Go CodeQL 库中表示返回语句的类</li></ul><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ReturnStmt r</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">select</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> r, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">r</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">getReturnValue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/DailyNotes/202501211629696.png" alt="image-20250121162924643"></p><hr><h4 id="step-1-5-finding-if-blocks-without-return-statements" tabindex="-1"><a class="header-anchor" href="#step-1-5-finding-if-blocks-without-return-statements"><span>Step 1.5: Finding if-blocks without return statements</span></a></h4><p>查找没有返回语句的 if 块</p><p>编写一个查询，查找所有在其 <code>then</code> 分支中不包含返回语句的 if 块。您的查询应返回 3541 个结果。记住，我们正在逐步进行！我们现在只关心 <code>then</code> 分支！</p><blockquote><p><strong>Tip</strong>: You can perform a type check of your variable with <a href="https://codeql.github.com/docs/ql-language-reference/formulas/#type-checks" target="_blank" rel="noopener noreferrer"><code>instanceof</code></a>.</p></blockquote><hr><ul><li><code>IfStmt</code> 是 Go CodeQL 库中表示 if 语句的类</li><li><code>getThen()</code> 方法获取 if 语句的 <code>then</code> 分支</li><li><code>getAStmt()</code> 方法获取 if 语句的 <code>then</code> 分支的语句</li><li><code>ReturnStmt</code> 是 Go CodeQL 库中表示返回语句的类</li></ul><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> IfStmt i</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">where</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> not</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">getThen</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().getAStmt() instanceof ReturnStmt</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">select</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> i</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/DailyNotes/202501211632397.png" alt="image-20250121163247340"></p><hr><h4 id="step-1-6-putting-it-all-together" tabindex="-1"><a class="header-anchor" href="#step-1-6-putting-it-all-together"><span>Step 1.6: Putting it all together</span></a></h4><p>将所有内容整合在一起</p><p>结合步骤 1.5 和 1.3，编写一个查询，查找测试等于 <code>ErrNone</code> 且没有返回的 if 块。</p><p>你应该总共得到 7 个结果。确认我们要找的 bug 是其中之一。</p><blockquote><p>干得好！你编写了一个检测该漏洞的查询！我们希望你喜欢这次 CodeQL 的热身，因为接下来我们将继续探讨更复杂的概念。</p></blockquote><hr><ul><li><code>IfStmt</code> 是 Go CodeQL 库中表示 if 语句的类</li><li><code>getCond()</code> 方法获取 if 语句的条件表达式</li><li><code>EqualityTestExpr</code> 是 Go CodeQL 库中表示相等测试表达式的类</li><li><code>getAnOperand()</code> 方法获取相等测试表达式的一个操作数</li><li><code>Ident</code> 是 Go CodeQL 库中表示标识符的类</li><li><code>getName()</code> 方法获取标识符的名称</li><li><code>ReturnStmt</code> 是 Go CodeQL 库中表示返回语句的类</li><li><code>getThen()</code> 方法获取 if 语句的 <code>then</code> 分支</li><li><code>getAStmt()</code>获取语句</li></ul><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> IfStmt i</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">where</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">getCond</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().(EqualityTestExpr).getAnOperand().(Ident).getName() </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;ErrNone&quot;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">and</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> not</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">getThen</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().getAStmt() instanceof ReturnStmt</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">select</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> i</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/DailyNotes/202501211635420.png" alt="image-20250121163541346"></p><hr><h3 id="step2-improving-the-precision-提高精度" tabindex="-1"><a class="header-anchor" href="#step2-improving-the-precision-提高精度"><span>Step2:Improving the precision - 提高精度</span></a></h3><p>所以我们找到了这个错误，但我们也看到了一些误报：一些故意忽略的非致命错误，一些直接使用 <code>writeErrorResponseJSON</code> 和相关函数报告的失败，以及一些直接响应、跳出循环或使用其他模式来响应错误的情况。能够检测到真正的错误是好的，但如果结果过于嘈杂，你可能会错过它们。</p><p>也就是说，如果太多的警报是误报的话，那么就会导致真正的问题被忽略，所以需要进一步优化查询</p><p>我们可以更精确的一种方法是仅检查来自 <code>isReqAuthenticated</code> 的返回代码，这些代码当然不应被忽略。我们可以使用 CodeQL 的 <code>data flow</code>(数据流) 功能来实现这一点。</p><blockquote><p>我们建议您阅读更多关于 <a href="https://codeql.github.com/docs/writing-codeql-queries/about-data-flow-analysis/#about-data-flow-analysis" target="_blank" rel="noopener noreferrer">data flow analysis in CodeQL</a>，以及如何在 Go 中编写数据流查询的内容：<a href="https://codeql.github.com/docs/codeql-language-guides/codeql-library-for-go/#data-flow" target="_blank" rel="noopener noreferrer">local data flow</a> and <a href="https://codeql.github.com/docs/codeql-language-guides/codeql-library-for-go/#global-data-flow-and-taint-tracking" target="_blank" rel="noopener noreferrer">global data flow</a>.</p></blockquote><hr><h4 id="step-2-1-find-conditionals-that-are-fed-from-calls-to-isreqauthenticated" tabindex="-1"><a class="header-anchor" href="#step-2-1-find-conditionals-that-are-fed-from-calls-to-isreqauthenticated"><span>Step 2.1: Find conditionals that are fed from calls to <code>isReqAuthenticated</code></span></a></h4><p>查找从 <code>isReqAuthenticated</code> 调用馈送的条件语句</p><p>编写一个 <a href="https://codeql.github.com/docs/codeql-language-guides/codeql-library-for-go/#global-data-flow-and-taint-tracking" target="_blank" rel="noopener noreferrer">data flow configuration</a>(数据流配置)，用于跟踪从任何对 <code>isReqAuthenticated</code> 的调用流向任何相等测试操作数的数据。您的查询必须选择所有相等测试——类型： <code>DataFlow::EqualityTestNode</code> ——其中操作数是上述配置的 <code>sink</code> 。</p><p>这为我们提供了 64 个潜在有趣的条件语句以供调查。需要注意的是，其中许多并非直接调用 <code>isReqAuthenticated</code> ，而是测试某些中间函数的结果，这些中间函数进而调用 <code>isReqAuthenticated</code> 。CodeQL 的全局数据流分析功能使我们能够检测到这些情况。</p><blockquote><p><strong>Tip</strong>: Learn about the <a href="https://codeql.github.com/docs/ql-language-reference/expressions/#any" target="_blank" rel="noopener noreferrer"><code>any</code></a> aggregate.</p></blockquote><hr><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">class AuthTestConfig extends DataFlow::</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">Configuration</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  AuthTestConfig() { this </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;auth-test-config&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  override</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> predicate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> isSource(DataFlow::Node source) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    source </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> any(DataFlow::CallNode cn |</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">      cn</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">getTarget</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().hasQualifiedName(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;github.com/minio/minio/cmd&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;isReqAuthenticated&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    ).getResult()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  override</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> predicate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> isSink(DataFlow::Node sink) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    sink </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> any(DataFlow::EqualityTestNode n).getAnOperand()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> AuthTestConfig config, DataFlow::Node sink, DataFlow::EqualityTestNode comparison</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">where</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> config</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">hasFlow</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(_, sink) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">and</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> comparison</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">getAnOperand</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> sink</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">select</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> comparison</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>class AuthTestConfig extends DataFlow::Configuration</code> 自定义了一个数据流配置。</li></ul><hr><h2 id="学习材料" tabindex="-1"><a class="header-anchor" href="#学习材料"><span>学习材料</span></a></h2><ul><li><a href="https://codeql.github.com/docs/" target="_blank" rel="noopener noreferrer">CodeQL documentation</a></li><li><a href="https://codeql.github.com/docs/writing-codeql-queries/ql-tutorials/#ql-tutorials" target="_blank" rel="noopener noreferrer">the CodeQL tutorials</a></li><li><a href="https://codeql.github.com/docs/codeql-language-guides/codeql-for-go/" target="_blank" rel="noopener noreferrer">CodeQL training examples for Go</a>.</li><li><a href="https://github.com/ASTTeam/CodeQL" target="_blank" rel="noopener noreferrer">《深入理解CodeQL》</a></li></ul><hr>`,312)]))}const r=s(t,[["render",l],["__file","CodeQL.html.vue"]]),k=JSON.parse(`{"path":"/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/CodeQL.html","title":"CodeQL","lang":"zh-CN","frontmatter":{"description":"CodeQL CodeQL documentation (github.com) ASTTeam/CodeQL: 《深入理解CodeQL》Finding vulnerabilities with CodeQL. (github.com) CodeQL 是一套 Github 在2019 开源且免费的静态扫描代码工具，让你能在产品release 前及早发现...","head":[["meta",{"property":"og:url","content":"https://233official.github.io/dailynotes/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/CodeQL.html"}],["meta",{"property":"og:site_name","content":"DailyNotes"}],["meta",{"property":"og:title","content":"CodeQL"}],["meta",{"property":"og:description","content":"CodeQL CodeQL documentation (github.com) ASTTeam/CodeQL: 《深入理解CodeQL》Finding vulnerabilities with CodeQL. (github.com) CodeQL 是一套 Github 在2019 开源且免费的静态扫描代码工具，让你能在产品release 前及早发现..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"http://cdn.ayusummer233.top/DailyNotes/202501141454349.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-17T03:32:15.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-17T03:32:15.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"CodeQL\\",\\"image\\":[\\"http://cdn.ayusummer233.top/DailyNotes/202501141454349.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202501141456396.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202501141504743.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202501141514312.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202501141515116.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202501141518934.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202501141522433.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202501141525453.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202501141526202.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202501141617179.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202501141619776.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202501201522999.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202501201750569.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202501201651059.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202501201751049.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202501201817010.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202501201818098.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202501141635941.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202501202034411.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202501202035208.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202501202035267.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202501202036029.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202501202037998.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202501202038600.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202501141638812.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202501211427088.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202501211427061.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202501211429593.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202501211430865.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202501211432921.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202501211433949.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202501211435201.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202501211441407.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202501211450643.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202501211454259.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202501211534093.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202501211540350.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202501211541870.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202501211544756.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202501141656524.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202501211553712.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202501211559561.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202501211601945.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202501211601758.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202501211614915.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202501211621654.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202501211623267.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202501211626725.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202501211629696.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202501211632397.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202501211635420.png\\"],\\"dateModified\\":\\"2025-04-17T03:32:15.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"咸鱼型233\\",\\"url\\":\\"https://233official.github.io/dailynotes/\\"}]}"]],"date":"2025-01-15T11:22:24.000Z"},"headers":[{"level":2,"title":"使用 CodeQL 识别代码库中的安全漏洞","slug":"使用-codeql-识别代码库中的安全漏洞","link":"#使用-codeql-识别代码库中的安全漏洞","children":[{"level":3,"title":"为 CodeQL 准备数据库","slug":"为-codeql-准备数据库","link":"#为-codeql-准备数据库","children":[]},{"level":3,"title":"在数据库中运行 CodeQL","slug":"在数据库中运行-codeql","link":"#在数据库中运行-codeql","children":[]}]},{"level":2,"title":"CodeQL CTF : Go and don't return","slug":"codeql-ctf-go-and-don-t-return","link":"#codeql-ctf-go-and-don-t-return","children":[{"level":3,"title":"漏洞介绍","slug":"漏洞介绍","link":"#漏洞介绍","children":[]},{"level":3,"title":"需要解决的问题","slug":"需要解决的问题","link":"#需要解决的问题","children":[]},{"level":3,"title":"环境准备","slug":"环境准备","link":"#环境准备","children":[]},{"level":3,"title":"Step1-Let's catch the bug","slug":"step1-let-s-catch-the-bug","link":"#step1-let-s-catch-the-bug","children":[]},{"level":3,"title":"Step2:Improving the precision - 提高精度","slug":"step2-improving-the-precision-提高精度","link":"#step2-improving-the-precision-提高精度","children":[]}]},{"level":2,"title":"学习材料","slug":"学习材料","link":"#学习材料","children":[]}],"git":{"createdTime":1736940144000,"updatedTime":1744860735000,"contributors":[{"name":"233Mac","username":"233Mac","email":"ayusummer233@vip.qq.com","commits":4,"url":"https://github.com/233Mac"}]},"readingTime":{"minutes":32.39,"words":9718},"filePathRelative":"网络安全/代码审计/CodeQL.md","localizedDate":"2025年1月15日","excerpt":"","autoDesc":true}`);export{r as comp,k as data};
