import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,a as t,o as a}from"./app-CFt4SMiv.js";const l={};function n(p,i){return a(),e("div",null,i[0]||(i[0]=[t(`<h1 id="prefect" tabindex="-1"><a class="header-anchor" href="#prefect"><span>Prefect</span></a></h1><blockquote><p><a href="https://github.com/PrefectHQ/prefect" target="_blank" rel="noopener noreferrer">Prefect Github Repo</a></p></blockquote><p>Prefect 是一个用 <strong>Python</strong> 写的开源「<strong>工作流编排（workflow orchestration）工具</strong>」。</p><p>简单来说 <strong>Prefect = 用 Python 写的聪明版定时器 + 流程管理器。</strong></p><p>它可以实现如下需求：</p><ul><li><strong>定义任务（tasks）</strong>：比如下载数据、处理数据、训练模型。</li><li><strong>安排任务顺序（flows）</strong>：比如「先下载数据 → 再处理 → 再训练」。</li><li><strong>监控任务运行情况</strong>：可以看成功了没，失败了可以重试，卡住了能报警。</li><li><strong>定时调度</strong>：比如每天凌晨2点自动跑一遍。</li><li><strong>处理失败和重试</strong>：任务失败可以自动重试、跳过、或者发送通知。</li></ul><hr><p><strong>和传统的调度器（比如 cron）相比，Prefect 更强的地方在于：</strong></p><ul><li><strong>可以用纯 Python 来写流程</strong>，不用写 YAML 或 JSON。</li><li><strong>任务之间可以有依赖关系</strong>，而且可以很灵活地控制条件。</li><li><strong>支持本地跑、服务器跑，也可以配合 Prefect Cloud 做大规模管理</strong>。</li><li><strong>内建状态追踪、日志记录</strong>，出错了容易查问题。</li></ul><hr><h2 id="安装" tabindex="-1"><a class="header-anchor" href="#安装"><span>安装</span></a></h2><h3 id="本体安装" tabindex="-1"><a class="header-anchor" href="#本体安装"><span>本体安装</span></a></h3><p>可以使用 Python 安装 Prefect，Prefect 的子依赖很多，不建议安装到全局 python 库中，建议使用虚拟环境进行管理，这里选择使用 Poetry 管理依赖版本</p><blockquote><p><img src="http://cdn.ayusummer233.top/DailyNotes/202504281659313.png" alt="image-20250428165950234"></p></blockquote><p>本地安装 Prefect：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">poetry</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> add</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> prefect</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -vvv</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">prefect</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> version</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/DailyNotes/202504281658956.png" alt="image-20250428165852687"></p><hr><h3 id="配置-prefect-home" tabindex="-1"><a class="header-anchor" href="#配置-prefect-home"><span>配置 PREFECT_HOME</span></a></h3><p>当在 Python 虚拟环境中安装了 Prefect 后，虽然 Prefect 安装在了虚拟环境中，但 Prefect 的配置文件会默认放在 <code>～/.prefect</code> 目录下，而且 <code>.prefect</code> 目录下不只有配置文件，还有数据库相关的文件与配置，且由于不同版本的 Prefect 之间的数据库格式和配置文件格式会有不兼容的情况，所以建议设置 <code>PREFECT_HOME</code> 环境变量来指定 Prefect 的配置文件目录。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 设置 PREFECT_HOME 环境变量</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> PREFECT_HOME</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">xxx</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 创建 Prefect 的配置文件目录</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mkdir</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -p</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> $PREFECT_HOME</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><a href="https://github.com/233Official/DailyNotesCode/tree/main/Python/PrefectDemo/.activate-hooks" target="_blank" rel="noopener noreferrer">Prefect 一键设置项目根目录下的 <code>.prefect</code> 目录为 <code>PREFECT_HOME</code></a></p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">python</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> .activate-hooks/.activate-hooks.py</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/DailyNotes/202504281733564.png" alt="image-20250428173347388"></p></blockquote><hr><h2 id="agent连接server" tabindex="-1"><a class="header-anchor" href="#agent连接server"><span>Agent连接Server</span></a></h2><h3 id="远程模式" tabindex="-1"><a class="header-anchor" href="#远程模式"><span>远程模式</span></a></h3><p>连接到 Prefect Server：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 进入虚拟环境</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">poetry</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> shell</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 创建新的远程配置文件</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">prefect</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> profile</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> create</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> remote</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 切换到新创建的远程配置</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">prefect</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> profile</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> use</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> remote</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 设置 API_URL</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">prefect</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> config</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> set</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> PREFECT_API_URL=&quot;http://xxx.xxx.xxx.xxx:4200/api&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 设置认证字符串</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># prefect config set PREFECT_API_AUTH_STRING=&quot;xxx&quot;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 如果服务器需要认证，还需设置 API 密钥</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># prefect config set PREFECT_API_KEY=&quot;your-api-key-here&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 切换到新创建的远程配置</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">prefect</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> profile</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> use</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> remote</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 验证远程连接</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">prefect</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> config</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> view</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者直接改 <code>$PREFECT_HOME/.prefect/profiles.toml</code></p><blockquote><p>如果没有手动修改 PREFECT_HOME 的话默认是在 <code>~/.prefect</code>, 不过为了完全隔离 prefect 版本，我一般选择自定义 PREFECT_HOME</p></blockquote><div class="language-toml line-numbers-mode" data-highlighter="shiki" data-ext="toml" data-title="toml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">profiles</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">remote</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">PREFECT_API_URL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;http://xxx.xxx.xxx.xxx:4200/api&quot;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">PREFECT_API_AUTH_STRING</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;xxxxxxxxx&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="本地模式" tabindex="-1"><a class="header-anchor" href="#本地模式"><span>本地模式</span></a></h3><p>创建或切换到本地配置文件：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 进入虚拟环境</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">poetry</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> shell</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 新建一个窗口启动本地 prefect server</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">prefect</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> server</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> start</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 创建并使用本地配置文件</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">prefect</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> profile</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> create</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> local</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 切换到本地配置</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">prefect</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> profile</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> use</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> local</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">prefect</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> config</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> set</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> PREFECT_API_URL=&quot;http://127.0.0.1:4200/api&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 再次运行验证连通性</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">prefect</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> profile</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> use</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> local</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/DailyNotes/202504281735718.png" alt="image-20250428173515647"></p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202504281749720.png" alt="image-20250428174917634"></p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202504281736610.png" alt="image-20250428173641532"></p><hr><h2 id="核心概念" tabindex="-1"><a class="header-anchor" href="#核心概念"><span>核心概念</span></a></h2><ul><li><strong>Flow</strong>: 工作流定义</li><li><strong>Task</strong>: 工作流中的单个步骤</li><li><strong>Deployment</strong>: 将flow部署到生产环境的配置</li><li><strong>Work Queue</strong>: 工作队列，将工作分发给agents</li><li><strong>Agent</strong>: 监听工作队列并执行工作的进程</li></ul><hr><h3 id="flow" tabindex="-1"><a class="header-anchor" href="#flow"><span>Flow</span></a></h3><p>Flow 是 Prefect 的核心概念，表示一个完整的工作流程，通过 <code>@flow</code> 装饰器定义。</p><p><strong>基础流程示例</strong>:</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">@flow</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;基础数据处理流程&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> description</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;生成、处理并保存数据的简单流程&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> basic_data_flow</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;">rows</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> int</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 500</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> output_path</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> str</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;output.csv&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # 任务链：生成 -&gt; 处理 -&gt; 保存</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    data </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> generate_data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(rows)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    processed </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> process_data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(data)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    result_path </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> save_results</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(processed, output_path)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> result_path</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Flow 的特点：</p><ul><li>可以有名称和描述</li><li>可以接收参数</li><li>可以包含多个任务</li><li>可以包含子流程（见 <a href="https://github.com/233Official/DailyNotesCode/blob/ae8fa3e22f6fa017f3d9fabde199e30b173eeb36/Python/PrefectDemo/flows/advanced_flow.py" target="_blank" rel="noopener noreferrer">advanced_flow.py</a> 中的 <a href="https://github.com/233Official/DailyNotesCode/blob/ae8fa3e22f6fa017f3d9fabde199e30b173eeb36/Python/PrefectDemo/flows/advanced_flow.py#L41" target="_blank" rel="noopener noreferrer">process_partition</a>）</li><li>可以进行部署和调度</li></ul><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">python</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> flows/basic_flow.py</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/DailyNotes/202504291042299.png" alt="image-20250429104257037"></p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202504291100652.png" alt="image-20250429110013437"></p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202504291100739.png" alt="image-20250429110034612"></p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202504291102933.png" alt="image-20250429110229837"></p><hr><h3 id="task" tabindex="-1"><a class="header-anchor" href="#task"><span>Task</span></a></h3><p>Task是Flow中的单个执行单元，通常执行独立、可重用的功能。</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202504291124591.png" alt="image-20250429112459433"></p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202504291125659.png" alt="image-20250429112559562"></p><hr><h3 id="deployment" tabindex="-1"><a class="header-anchor" href="#deployment"><span>Deployment</span></a></h3><p>Deployment将 Flow 打包并注册到Prefect服务器，使其可以远程执行或按计划执行。</p><p>Deployment 向 Prefect Server 注册一个调度计划（指定Flow的可执行配置包），接下来可以选择自动调度或者手动触发的模式通过 Deployment 执行这个指定的 Flow</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>┌──────────────┐        ┌──────────────┐        ┌──────────────┐</span></span>
<span class="line"><span>│              │        │              │        │              │</span></span>
<span class="line"><span>│  编写工作流   │───────▶│ 创建工作池     │───────▶│  创建部署配置  │</span></span>
<span class="line"><span>│              │        │              │        │              │</span></span>
<span class="line"><span>└──────────────┘        └──────────────┘        └──────┬───────┘</span></span>
<span class="line"><span>                                                       │</span></span>
<span class="line"><span>                                                       ▼</span></span>
<span class="line"><span>┌──────────────┐        ┌──────────────┐        ┌──────────────┐</span></span>
<span class="line"><span>│              │        │              │        │              │</span></span>
<span class="line"><span>│  工作流执行   │◀───────│ Worker 启动  │◀───────│ 注册部署到      │</span></span>
<span class="line"><span>│              │        │              │        │   Server     │</span></span>
<span class="line"><span>└──────────────┘        └──────────────┘        └──────────────┘</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p>对于 Prefect 3.x 而言有如下三种部署方案：</p><ul><li><code>flow.serve()</code> - 一体化的开发环境部署方式，单行代码同时创建部署并启动worker</li><li><code>flow.deploy()</code> - 代码式部署配置，灵活性高，可编程定义部署参数</li><li><code>YAML部署</code> - 声明式配置，将部署定义与代码分离，适合团队协作和生产环境</li></ul><table><thead><tr><th style="text-align:center;">特性</th><th style="text-align:center;">flow.serve()</th><th style="text-align:center;">flow.deploy()</th><th style="text-align:center;">YAML部署</th></tr></thead><tbody><tr><td style="text-align:center;"><strong>配置方式</strong></td><td style="text-align:center;">代码参数</td><td style="text-align:center;">代码方法参数</td><td style="text-align:center;">声明式YAML文件</td></tr><tr><td style="text-align:center;"><strong>工作池处理</strong></td><td style="text-align:center;">自动创建临时工作池</td><td style="text-align:center;">使用指定工作池</td><td style="text-align:center;">使用指定工作池</td></tr><tr><td style="text-align:center;"><strong>Worker启动</strong></td><td style="text-align:center;">自动启动</td><td style="text-align:center;">需单独启动</td><td style="text-align:center;">需单独启动</td></tr><tr><td style="text-align:center;"><strong>执行模式</strong></td><td style="text-align:center;">阻塞式(前台运行)</td><td style="text-align:center;">非阻塞式</td><td style="text-align:center;">非阻塞式</td></tr><tr><td style="text-align:center;"><strong>代码与配置分离</strong></td><td style="text-align:center;">低</td><td style="text-align:center;">中</td><td style="text-align:center;">高</td></tr><tr><td style="text-align:center;"><strong>适用场景</strong></td><td style="text-align:center;">开发测试、快速原型</td><td style="text-align:center;">程序化部署、CI/CD集成</td><td style="text-align:center;">生产环境、团队协作</td></tr><tr><td style="text-align:center;"><strong>版本控制友好度</strong></td><td style="text-align:center;">低</td><td style="text-align:center;">中</td><td style="text-align:center;">高</td></tr><tr><td style="text-align:center;"><strong>配置复杂度</strong></td><td style="text-align:center;">低(最简单)</td><td style="text-align:center;">中</td><td style="text-align:center;">中到高</td></tr><tr><td style="text-align:center;"><strong>自动化潜力</strong></td><td style="text-align:center;">低</td><td style="text-align:center;">高</td><td style="text-align:center;">高</td></tr><tr><td style="text-align:center;"><strong>示例用途</strong></td><td style="text-align:center;">本地开发测试</td><td style="text-align:center;">动态生成多个部署</td><td style="text-align:center;">生产环境标准化部署</td></tr><tr><td style="text-align:center;"><strong>典型命令</strong></td><td style="text-align:center;"><code>flow.serve(name=&quot;dev&quot;)</code></td><td style="text-align:center;"><code>flow.deploy(...)</code></td><td style="text-align:center;"><code>prefect deploy -f deploy.yaml</code></td></tr></tbody></table><hr><h4 id="flow-serve" tabindex="-1"><a class="header-anchor" href="#flow-serve"><span>flow.serve</span></a></h4><p><img src="http://cdn.ayusummer233.top/DailyNotes/202504291818224.png" alt="image-20250429181805933"></p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202504291818263.png" alt="image-20250429181833166"></p><p><code>Ctrl+C</code> 停止效果如下：</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202504291823987.png" alt="image-20250429182323888"></p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202504291825967.png" alt="image-20250429182500856"></p><hr><p>时间触发一小时不好看效果，改成 1min 看看效果：</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202504291855895.png" alt="image-20250429185525320"></p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202504291911313.png" alt="image-20250429191116108"></p><hr><h4 id="flow-deploy" tabindex="-1"><a class="header-anchor" href="#flow-deploy"><span>flow.deploy</span></a></h4><p>与 <code>flow.serve()</code> 不同，<code>flow.deploy()</code> 提供了更灵活的部署方式，但也需要更多手动配置。</p><hr><p>如果采用 docker 部署方案的话请先安装 <code>prefect-docker</code> 包</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">poetry</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> add</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> prefect-docker</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/DailyNotes/202506060017826.png" alt="image-20250606001739927"></p><hr><ol><li><p><strong>预先创建WorkPool（工作池）</strong>： <code>flow.deploy()</code> 不会自动创建临时工作池，因此必须先创建工作池</p><p>可通过 UI 或 CLI 创建: <code>prefect work-pool create --type docker my-work-pool-docker-flow-deploy</code></p><blockquote><p><img src="http://cdn.ayusummer233.top/DailyNotes/202504292000829.png" alt="image-20250429200048588"></p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202504292018283.png" alt="image-20250429201859181"></p><hr><p>需要注意的是，这里有一个陷阱，那就是在使用 <code>flow.deploy</code> 部署 flow 时不要创建 Process 类型的 Work Pool，因为不兼容，<code>flow.deploy</code> 函数必须传入一个镜像，Process 类型的 Work Pool 是给 <code>flow.serve</code> 用的:</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202504300821566.png" alt="image-20250430081047767"></p><p>建议创建 docker 类型的 WorkPool</p><hr><p>关于 Work Pool 的部分可跳转 [Work Pool](#Work Pool) 阅读</p></blockquote></li><li><p><strong>编写部署脚本</strong></p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202504300949615.png" alt="image-20250430094944340"></p><p>设置 <code>push=False</code> 以跳过将镜像推送到镜像仓库的步骤</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 创建部署</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">python</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -m</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> deployments.flow_deploy</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意的是运行此模块式机子环境需要能连通 docker hub(就算不推送image也需要), 否则会报错如下:</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202504300821802.png" alt="image-20250430082058942"></p><p>运行此部署模块会先构建 image:</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202504300821022.png" alt="image-20250430081626376"></p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202504300824248.png" alt="image-20250430082247647"></p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202504300824686.png" alt="image-20250430082403624"></p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202504301113586.png" alt="image-20250430111347291"></p></li><li><p><strong>触发运行</strong></p><p>现在我们已经部署了流程，我们可以通过 Prefect CLI 或 UI 触发运行。</p><p>首先，我们需要启动一个 Worker 来运行我们的流程：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">prefect</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> worker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> start</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --pool</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> my-work-pool-docker-flow-deploy</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>首次运行会提示安装相关 docker lib:</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202504300828872.png" alt="image-20250430082855814"></p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202504300830056.png" alt="image-20250430083000935"></p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202504300838721.png" alt="image-20250430083849660"></p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202504300838352.png" alt="image-20250430083858286"></p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202504300840676.png" alt="image-20250430084035621"></p><p>然后，我们可以使用 Prefect CLI 触发流程的运行：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">prefect</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> deployment</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;基础数据处理流程/deployment-docker-flow-deploy&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/DailyNotes/202504300841097.png" alt="image-20250430084125035"></p><blockquote><p>windows上运行会有报错:</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202504300851250.png" alt="image-20250430085128175"></p></blockquote></li></ol><hr><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 查看已创建的部署</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">prefect</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> deployment</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ls</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/DailyNotes/202505061647703.png" alt="image-20250506164712479"></p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 手动触发部署</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">prefect</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> deployment</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;基础数据处理流程/deployment-docker-flow-deploy&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/DailyNotes/202505061659566.png" alt="image-20250506165947459"></p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202505061658298.png" alt="image-20250506165833950"></p><hr><h4 id="dockerfile编写" tabindex="-1"><a class="header-anchor" href="#dockerfile编写"><span>Dockerfile编写</span></a></h4><p>Poetry 管理项目依赖方便，但对于 Docker 构建而言增加了构建复杂性，使用 <code>requirements.txt</code> 更为简单直接</p><p>因此需要使用</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">poetry</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> export</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -f</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> requirements.txt</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --output</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> requirements.txt</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>将 poetry 依赖转换成 <code>requirements.txt</code></p><p>对于 Git 管理的项目而言，为了自动化这一流程，可以采用 pre-commit 框架的方式</p><p>pre-commit 是一个管理和维护多语言 pre-commit hooks 的框架，可以在代码提交前自动执行一系列检查和操作，确保代码质量和一致性。</p><p>首先，安装 pre-commit 包：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">poetry</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> add</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> pre-commit</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --group</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> dev</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/DailyNotes/202504301605273.png" alt="image-20250430160550972"></p><p>在项目根目录创建 <code>.pre-commit-config.yaml</code> 文件：</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202504301606736.png" alt="image-20250430160641164"></p><ul><li><code>repo: local</code> - 表示使用本地自定义 hook，而不是从远程仓库获取</li><li><code>id</code> - hook 的唯一标识符</li><li><code>name</code> - hook 的描述性名称，会显示在执行过程中</li><li><code>entry</code> - 实际执行的命令</li><li><code>language: system</code> - 使用系统命令执行</li><li><code>files</code> - 正则表达式，指定哪些文件的变更触发此 hook（这里是 [pyproject.toml](vscode-file://vscode-app/Applications/Visual Studio Code.app/Contents/Resources/app/out/vs/code/electron-sandbox/workbench/workbench.html) 或 poetry.lock）</li><li><code>pass_filenames: false</code> - 不将文件名作为参数传给命令</li></ul><p>安装 Git Hook 脚本</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pre-commit</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/DailyNotes/202504301608581.png" alt="image-20250430160810439"></p><hr><h3 id="work-pool" tabindex="-1"><a class="header-anchor" href="#work-pool"><span>Work Pool</span></a></h3><p>Work Pool 是 Prefect 3.x 中引入的关键概念，用于定义和管理 Flow 的执行环境。</p><p>在运行 <code>flow.deploy</code> 操作前需要先创建 Work Pool</p><p>Work Pool 是一个执行环境的抽象，它定义了：</p><ul><li><strong>在哪里</strong>执行你的流程（本地、容器、云环境等）</li><li><strong>如何</strong>执行你的流程（资源分配、环境配置等）</li><li><strong>何时</strong>处理特定工作（优先级、并发限制等）</li></ul><p>Prefect 3.x 支持多种类型的 Work Pool，每种适用于不同场景，主要有：</p><table><thead><tr><th style="text-align:center;">Work Pool 类型</th><th style="text-align:center;">说明</th><th style="text-align:center;">适用场景</th></tr></thead><tbody><tr><td style="text-align:center;"><strong>Process</strong></td><td style="text-align:center;">在本地机器的进程中执行流程</td><td style="text-align:center;">开发环境、简单部署、单机工作流</td></tr><tr><td style="text-align:center;"><strong>Docker</strong></td><td style="text-align:center;">在 Docker 容器中执行流程</td><td style="text-align:center;">隔离环境、依赖管理、可复制执行</td></tr><tr><td style="text-align:center;"><strong>Kubernetes</strong></td><td style="text-align:center;">在 Kubernetes 集群中执行流程</td><td style="text-align:center;">企业级部署、大规模计算、资源弹性</td></tr></tbody></table><p>在 Prefect Server UI 上可以创建 Work Pool：</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202504291657262.png" alt="image-20250429165730082"></p><p>选择 Work Pool 类型：</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202504291658891.png" alt="image-20250429165804777"></p><p>输入 Work Pool 基本信息：</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202504291658051.png" alt="image-20250429165856972"></p><blockquote><p><code>Name</code> 这里就是程序中传入 <code>flow.deploy</code> 的 <code>work_pool_name</code> 需要对应的名称</p></blockquote><p>配置 Work Pool 的默认配置（可选）：</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202504291659206.png" alt="image-20250429165953099"></p><p>创建成功：</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202504291704386.png" alt="image-20250429170440242"></p><hr><h3 id="block" tabindex="-1"><a class="header-anchor" href="#block"><span>Block</span></a></h3><p>Block 可以理解为可以在 Prefect Server 上配置和管理的配置项，目前来看我认为最重要的是对于密钥这类配置项可以不用手动在每个终端都配置了，直接在 Prefect Server 上配置后程序直接连接 Server 读取即可</p><p>例如这个 Secret Block：</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202504291548570.png" alt="image-20250429154823478"></p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202504291545485.png" alt="image-20250429154506705"></p><p>Prefect Server UI 上配置完后会显示程序调用方法并掩码展示 Secret</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202504291547292.png" alt="image-20250429154734198"></p>`,136)]))}const d=s(l,[["render",n],["__file","Prefect.html.vue"]]),o=JSON.parse('{"path":"/Language/Python/Prefect.html","title":"Prefect","lang":"zh-CN","frontmatter":{"category":"Python","tags":["Prefect"],"excerpt":"Prefect是一个用Python写的开源的工作流编排工具","description":"Prefect Prefect Github Repo Prefect 是一个用 Python 写的开源「工作流编排（workflow orchestration）工具」。 简单来说 Prefect = 用 Python 写的聪明版定时器 + 流程管理器。 它可以实现如下需求： 定义任务（tasks）：比如下载数据、处理数据、训练模型。 安排任务顺序（...","head":[["meta",{"property":"og:url","content":"https://233official.github.io/dailynotes/Language/Python/Prefect.html"}],["meta",{"property":"og:site_name","content":"DailyNotes"}],["meta",{"property":"og:title","content":"Prefect"}],["meta",{"property":"og:description","content":"Prefect Prefect Github Repo Prefect 是一个用 Python 写的开源「工作流编排（workflow orchestration）工具」。 简单来说 Prefect = 用 Python 写的聪明版定时器 + 流程管理器。 它可以实现如下需求： 定义任务（tasks）：比如下载数据、处理数据、训练模型。 安排任务顺序（..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"http://cdn.ayusummer233.top/DailyNotes/202504281659313.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-05T19:33:59.000Z"}],["meta",{"property":"article:tag","content":"Prefect"}],["meta",{"property":"article:modified_time","content":"2025-06-05T19:33:59.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Prefect\\",\\"image\\":[\\"http://cdn.ayusummer233.top/DailyNotes/202504281659313.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202504281658956.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202504281733564.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202504281735718.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202504281749720.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202504281736610.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202504291042299.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202504291100652.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202504291100739.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202504291102933.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202504291124591.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202504291125659.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202504291818224.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202504291818263.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202504291823987.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202504291825967.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202504291855895.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202504291911313.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202506060017826.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202504292000829.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202504292018283.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202504300821566.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202504300949615.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202504300821802.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202504300821022.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202504300824248.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202504300824686.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202504301113586.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202504300828872.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202504300830056.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202504300838721.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202504300838352.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202504300840676.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202504300841097.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202504300851250.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202505061647703.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202505061659566.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202505061658298.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202504301605273.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202504301606736.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202504301608581.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202504291657262.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202504291658891.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202504291658051.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202504291659206.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202504291704386.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202504291548570.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202504291545485.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202504291547292.png\\"],\\"dateModified\\":\\"2025-06-05T19:33:59.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"咸鱼型233\\",\\"url\\":\\"https://233official.github.io/dailynotes/\\"}]}"]],"date":"2025-04-29T12:53:33.000Z"},"headers":[{"level":2,"title":"安装","slug":"安装","link":"#安装","children":[{"level":3,"title":"本体安装","slug":"本体安装","link":"#本体安装","children":[]},{"level":3,"title":"配置 PREFECT_HOME","slug":"配置-prefect-home","link":"#配置-prefect-home","children":[]}]},{"level":2,"title":"Agent连接Server","slug":"agent连接server","link":"#agent连接server","children":[{"level":3,"title":"远程模式","slug":"远程模式","link":"#远程模式","children":[]},{"level":3,"title":"本地模式","slug":"本地模式","link":"#本地模式","children":[]}]},{"level":2,"title":"核心概念","slug":"核心概念","link":"#核心概念","children":[{"level":3,"title":"Flow","slug":"flow","link":"#flow","children":[]},{"level":3,"title":"Task","slug":"task","link":"#task","children":[]},{"level":3,"title":"Deployment","slug":"deployment","link":"#deployment","children":[]},{"level":3,"title":"Work Pool","slug":"work-pool","link":"#work-pool","children":[]},{"level":3,"title":"Block","slug":"block","link":"#block","children":[]}]}],"git":{"createdTime":1745931213000,"updatedTime":1749152039000,"contributors":[{"name":"233PC","username":"233PC","email":"ayusummer233@vip.qq.com","commits":2,"url":"https://github.com/233PC"},{"name":"233Mac","username":"233Mac","email":"ayusummer233@vip.qq.com","commits":3,"url":"https://github.com/233Mac"}]},"readingTime":{"minutes":9.09,"words":2728},"filePathRelative":"Language/Python/Prefect.md","localizedDate":"2025年4月29日","autoDesc":true}');export{d as comp,o as data};
