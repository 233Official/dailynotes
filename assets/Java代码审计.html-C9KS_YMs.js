import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,a as e,o as t}from"./app-CFt4SMiv.js";const p={};function l(n,i){return t(),s("div",null,i[0]||(i[0]=[e(`<h1 id="java-代码审计" tabindex="-1"><a class="header-anchor" href="#java-代码审计"><span>Java 代码审计</span></a></h1><ul><li><a href="#java-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1">Java 代码审计</a><ul><li><a href="#java-%E6%9C%AC%E5%9C%B0%E8%B0%83%E8%AF%95%E5%92%8C%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7idea">Java 本地调试和远程调试技巧(IDEA)</a><ul><li><a href="#%E6%9C%AC%E5%9C%B0%E8%B0%83%E8%AF%95">本地调试</a></li><li><a href="#%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95">远程调试</a></li></ul></li></ul></li><li><a href="#%E9%99%84%E5%BD%95">附录</a><ul><li><a href="#idea-%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95-java-%E9%A1%B9%E7%9B%AE%E4%B8%BE%E4%BE%8B---cve-2018-2894-%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95%E5%AF%84todo-%E7%AD%89%E7%9C%8B%E5%AE%8C-docker-%E5%86%8D%E6%9D%A5%E8%AF%95%E8%AF%95">IDEA 远程调试 Java 项目举例 - CVE-2018-2894 远程调试(寄/TODO: 等看完 Docker 再来试试)</a></li></ul></li></ul><hr><h2 id="java-本地调试和远程调试技巧-idea" tabindex="-1"><a class="header-anchor" href="#java-本地调试和远程调试技巧-idea"><span>Java 本地调试和远程调试技巧(IDEA)</span></a></h2><blockquote><p>VSCode 也可以远程调试 Java, 打算等在 IDEA 上玩熟练后再转 VSCode 试试</p><hr><p><a href="https://mp.weixin.qq.com/s?__biz=MzkzNjMxNDM0Mg==&amp;mid=2247483768&amp;idx=1&amp;sn=36ff6d279fa7dbd7d5ae00b06a3c3ddc&amp;chksm=c2a1d5f1f5d65ce701e1f73ce0f584412bfc38a507622758f2acabce370cdcc4bb4af2270045&amp;mpshare=1&amp;scene=1&amp;srcid=1228ltotPbA9s9n82O4p0ut7&amp;sharer_sharetime=1640682315288&amp;sharer_shareid=364b318b59e17770cdf42d79a4539355&amp;version=3.1.23.6025&amp;platform=win#rd" target="_blank" rel="noopener noreferrer">告别脚本小子系列丨JAVA安全(1)——JAVA本地调试和远程调试技巧 (qq.com)</a></p><hr></blockquote><p>Java编写的项目一般较复杂，而且通常会引用大量第三方jar包。如果直接看代码逻辑会是一件很痛苦的事情，学会调试是开始java安全的必备技能。</p><hr><h3 id="本地调试" tabindex="-1"><a class="header-anchor" href="#本地调试"><span>本地调试</span></a></h3><p><img src="http://cdn.ayusummer233.top/img/202210171501758.png" alt="image-20221017144824417"></p><ul><li><p><code>打断点</code>: 可以通过打断点来调试程序, IDEA 提供了不少断点调试按键, 如</p><ul><li><code>F7</code>：步入，如果当前行有方法调用，会进入方法内部，否则继续下一行执行。不能进入官方类库的方法。</li><li><code>F8</code>：步过，一行一行执行代码，如果当前行有方法调用，不会进行方法内部。</li><li><code>Alt + Shift + F7</code>：强制步入，能进去任何方法，和F7的区别是<mark>能步入官方类库的方法</mark>。</li><li><code>Shift + F8</code>：步出，从步入的方法内退出到方法外面，此时方法已经执行完毕。</li></ul><p><code>查看当前断点信息</code>:</p><ul><li>对于大型的项目，很多时候我们会下很多断点，但是自己都会忘记在哪个文件还打了断点的，这时候通过断点管理的功能就可以很方便的对断点进行管理。</li><li>另外这个位置还提供了异常断点的功能，异常断点是断点调试中的重要调试技巧之一。如果我们不确定程序的运行逻辑，但是知道程序一定会暴异常，这时候就可以通过异常断点来查看程序的运行逻辑。通过搜索异常名称就可以在对应异常位置下断点了</li></ul><blockquote><p><img src="http://cdn.ayusummer233.top/img/202210171511125.png" alt="image-20221017150806985"></p></blockquote></li><li><p><code>运行即时表达式</code>: 即时表达式是java调试中的重要工具，能帮助我们查看当前环境中变量值，查看线程信息，判断程序中的对比条件。</p><blockquote><p><img src="http://cdn.ayusummer233.top/img/202210171504715.png" alt="image-20221017150418543"></p><p><img src="http://cdn.ayusummer233.top/img/202210171506644.png" alt="image-20221017150609452"></p></blockquote></li><li><p><code>查看当前的栈调用信息</code>: 栈调用是非常重要的调试信息，通常栈调用过程就是程序运行时的逻辑顺序，对java漏洞调试非常重要。</p><blockquote><p><img src="http://cdn.ayusummer233.top/img/202210171515561.png" alt="image-20221017151551454"></p><p><img src="http://cdn.ayusummer233.top/img/202210171516436.png" alt="image-20221017151613224"></p></blockquote></li><li><p><code>当前变量信息</code>: 显示程序执行到当前位置时环境中的变量信息</p><blockquote><p><img src="http://cdn.ayusummer233.top/img/202210171519359.png" alt="image-20221017151912226"></p></blockquote></li></ul><hr><h3 id="远程调试" tabindex="-1"><a class="header-anchor" href="#远程调试"><span>远程调试</span></a></h3><p>多数情况下，我们进行代码审计或者漏洞复现，都是把靶机环境装在虚拟机中，然后通过远程调试的方式来对系统进行利用。要让服务器支持远程调试，必须在启动的时候增加KVM参数，如下所示。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">-Xdebug</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -Xrunjdwp:transport=dt_socket,suspend=n,server=y,address=0.0.0.0:5555</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><p><code>Xdebug</code>: 启动调试，需要与 <code>-Xrunjdwp</code> 一起配合实现完整的调试模式。</p></li><li><p><code>Xrunjdwp</code>: 代表本次远程调试的参数设置。</p><ul><li><p><code>transport</code>：指定远程调试的协议，一般使用的是 <code>dt_socket</code>，其他还有 <code>dt_shmem</code> 等。</p></li><li><p><code>suspend</code>: 代表是否在调试客户端建立起来之后才运行 <code>KVM</code></p><p>一般选择 <code>n</code>。这样调试程序不会影响主程序的运行。</p></li><li><p><code>server</code>: 代表是否支持在 server 模式的 VM 中运行调试模式。</p></li><li><p><code>address</code>：代表远程调试监听的端口 <code>[host]:[port]</code>。</p><p>这里的 host 字段支持省略的写法，但是我们不建议省略 host 字段。</p><p>刚开始进行远程调试时如果发现客户端连不上服务端远程调试的端口，就要检查服务端端口是否监听在 <code>127.0.0.1</code> 这样的本机地址，如果监听在本机地址，是不允许远程连接的。</p></li></ul></li></ul><p>而 KVM 参数需要写在哪里, 对于不同服务器远程调试的参数写的位置不一样</p><ul><li><p>如果是打包独立运行的 SpringBoot 的 jar 包，那么可以直接在命令行中增加远程调试的参数。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">java</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -jar</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -Xdebug</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -Xrunjdwp:transport=dt_socket,suspend=n,server=y,address=0.0.0.0:5555</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   Test.jar</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>如果是 Tomcat 服务器，则可以直接修改 <code>bin/catalina.bat</code> 文件。在文件最前面增加远程调试的参数，如下所示。</p><p><img src="http://cdn.ayusummer233.top/img/202210171526246.jpeg" alt="img"></p></li></ul><hr><p>上面开启了服务端远程调试的端口之后，下一步就需要客户端连接远程服务器进行调试。</p><p>为了保证远程调试的准确性，需要<mark>客户端拥有和服务端完全一样的源代码</mark>(这很重要，一定要完全一样) ，所以最好直接把服务端整个源码拷贝一份到客户端idea中进行调试。 使用idea本地打开拷贝的服务端源码，并且把所有的 jar 包加入 library。然后新增一个 configuration，选择 Remote JVM Debug，填写开启的远程调试服务器 ip 和端口。</p><p><img src="http://cdn.ayusummer233.top/img/202210171527167.jpeg" alt="img"></p><p>然后点击debug按钮，可以看到下面的成功连接到远程服务器的信息，代表远程连接建立成功。后续就可以像本地调试一样对远程项目进行调试了。</p><p><img src="http://cdn.ayusummer233.top/img/202210171528089.jpeg" alt="img"></p><hr><hr><h1 id="附录" tabindex="-1"><a class="header-anchor" href="#附录"><span>附录</span></a></h1><p>所有四级标题单独提出来</p><hr><h2 id="idea-远程调试-java-项目举例-cve-2018-2894-远程调试-寄-todo-等看完-docker-再来试试" tabindex="-1"><a class="header-anchor" href="#idea-远程调试-java-项目举例-cve-2018-2894-远程调试-寄-todo-等看完-docker-再来试试"><span>IDEA 远程调试 Java 项目举例 - CVE-2018-2894 远程调试(寄/TODO: 等看完 Docker 再来试试)</span></a></h2><p><code>CVE-2018-2894</code> 使用的镜像与 <code>CVE-2020-14882</code> 相同</p><p>编辑 <code>doker-compose.yml</code> 文件, 将打算用于远程调试的端口映射上</p><blockquote><p>比如这里将 5555 端口用于远程调试</p></blockquote><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;2&#39;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">services</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> weblogic</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">   image</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">vulhub/weblogic:12.2.1.3-2018</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">   ports</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;7001:7001&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;5555:5555&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后启动容器</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker-compose</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> up</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -d</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><p><img src="http://cdn.ayusummer233.top/img/202210171548061.png" alt="image-20221017154838944"></p></blockquote><p>然后进入容器编辑配置文件</p><blockquote><p><img src="http://cdn.ayusummer233.top/img/202210171551385.png" alt="image-20221017155143287"></p><p><img src="http://cdn.ayusummer233.top/img/202210171549116.png" alt="image-20221017154953038"></p><p><img src="http://cdn.ayusummer233.top/img/202210171552679.png" alt="image-20221017155226548"></p></blockquote><p>可以看到 <code>line 48</code> 通过运行 jar 包启动了服务, 修改 <code>line 48</code> 加上调试参数</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">cd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /u01</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &amp;&amp; </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">curl</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -o</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /u01/fmw_12.2.1.3.0_wls_quick.jar</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> http://ca-docker-stage.us.oracle.com/middleware/weblogic/fmw_12.2.1.3.0_wls_quick.jar</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &amp;&amp; </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">$JAVA_HOME</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">/bin/java</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -jar</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -Xdebug</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -Xrunjdwp:transport=dt_socket,suspend=n,server=y,address=0.0.0.0:5555</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  /u01/fmw_12.2.1.3.0_wls_quick.jar</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -invPtrLoc</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /u01/oraInst.loc</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -jreLoc</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> $JAVA_HOME</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -ignoreSysPrereqs</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -force</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -novalidation</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ORACLE_HOME=</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">$ORACLE_HOME</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &amp;&amp; </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">rm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /u01/fmw_12.2.1.3.0_wls_quick.jar</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /u01/oraInst.loc</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /u01/install.file</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><img src="http://cdn.ayusummer233.top/img/202210171558182.png" alt="image-20221017155601083"></p></blockquote><p>然后重启容器</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> restart</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [container_id]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><p><img src="http://cdn.ayusummer233.top/img/202210171559603.png" alt="image-20221017155902491"></p></blockquote>`,44)]))}const d=a(p,[["render",l],["__file","Java代码审计.html.vue"]]),o=JSON.parse('{"path":"/Language/Java/Java%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1.html","title":"Java 代码审计","lang":"zh-CN","frontmatter":{"description":"Java 代码审计 Java 代码审计 Java 本地调试和远程调试技巧(IDEA) 本地调试 远程调试 附录 IDEA 远程调试 Java 项目举例 - CVE-2018-2894 远程调试(寄/TODO: 等看完 Docker 再来试试) Java 本地调试和远程调试技巧(IDEA) VSCode 也可以远程调试 Java, 打算等在 IDEA 上...","head":[["meta",{"property":"og:url","content":"https://233official.github.io/dailynotes/Language/Java/Java%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1.html"}],["meta",{"property":"og:site_name","content":"DailyNotes"}],["meta",{"property":"og:title","content":"Java 代码审计"}],["meta",{"property":"og:description","content":"Java 代码审计 Java 代码审计 Java 本地调试和远程调试技巧(IDEA) 本地调试 远程调试 附录 IDEA 远程调试 Java 项目举例 - CVE-2018-2894 远程调试(寄/TODO: 等看完 Docker 再来试试) Java 本地调试和远程调试技巧(IDEA) VSCode 也可以远程调试 Java, 打算等在 IDEA 上..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"http://cdn.ayusummer233.top/img/202210171501758.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-17T03:32:15.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-17T03:32:15.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java 代码审计\\",\\"image\\":[\\"http://cdn.ayusummer233.top/img/202210171501758.png\\",\\"http://cdn.ayusummer233.top/img/202210171511125.png\\",\\"http://cdn.ayusummer233.top/img/202210171504715.png\\",\\"http://cdn.ayusummer233.top/img/202210171506644.png\\",\\"http://cdn.ayusummer233.top/img/202210171515561.png\\",\\"http://cdn.ayusummer233.top/img/202210171516436.png\\",\\"http://cdn.ayusummer233.top/img/202210171519359.png\\",\\"http://cdn.ayusummer233.top/img/202210171526246.jpeg\\",\\"http://cdn.ayusummer233.top/img/202210171527167.jpeg\\",\\"http://cdn.ayusummer233.top/img/202210171528089.jpeg\\",\\"http://cdn.ayusummer233.top/img/202210171548061.png\\",\\"http://cdn.ayusummer233.top/img/202210171551385.png\\",\\"http://cdn.ayusummer233.top/img/202210171549116.png\\",\\"http://cdn.ayusummer233.top/img/202210171552679.png\\",\\"http://cdn.ayusummer233.top/img/202210171558182.png\\",\\"http://cdn.ayusummer233.top/img/202210171559603.png\\"],\\"dateModified\\":\\"2025-04-17T03:32:15.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"咸鱼型233\\",\\"url\\":\\"https://233official.github.io/dailynotes/\\"}]}"]],"date":"2022-10-17T11:21:24.000Z"},"headers":[{"level":2,"title":"Java 本地调试和远程调试技巧(IDEA)","slug":"java-本地调试和远程调试技巧-idea","link":"#java-本地调试和远程调试技巧-idea","children":[{"level":3,"title":"本地调试","slug":"本地调试","link":"#本地调试","children":[]},{"level":3,"title":"远程调试","slug":"远程调试","link":"#远程调试","children":[]}]},{"level":2,"title":"IDEA 远程调试 Java 项目举例 - CVE-2018-2894 远程调试(寄/TODO: 等看完 Docker 再来试试)","slug":"idea-远程调试-java-项目举例-cve-2018-2894-远程调试-寄-todo-等看完-docker-再来试试","link":"#idea-远程调试-java-项目举例-cve-2018-2894-远程调试-寄-todo-等看完-docker-再来试试","children":[]}],"git":{"createdTime":1666005684000,"updatedTime":1744860735000,"contributors":[{"name":"233Mac","username":"233Mac","email":"ayusummer233@vip.qq.com","commits":2,"url":"https://github.com/233Mac"},{"name":"Ayusummer","username":"Ayusummer","email":"ayusummer233@gmail.com","commits":1,"url":"https://github.com/Ayusummer"},{"name":"233Official","username":"233Official","email":"ayusummer233@qq.com","commits":2,"url":"https://github.com/233Official"},{"name":"咸鱼型233","username":"咸鱼型233","email":"ayusummer233@qq.com","commits":1,"url":"https://github.com/咸鱼型233"}]},"readingTime":{"minutes":5.51,"words":1654},"filePathRelative":"Language/Java/Java代码审计.md","localizedDate":"2022年10月17日","excerpt":"","autoDesc":true}');export{d as comp,o as data};
