import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,a as m,o as n}from"./app-CFt4SMiv.js";const t={};function o(l,a){return n(),e("div",null,a[0]||(a[0]=[m('<h1 id="hmac" tabindex="-1"><a class="header-anchor" href="#hmac"><span>HMAC</span></a></h1><blockquote><p><a href="https://zhuanlan.zhihu.com/p/136590049" target="_blank" rel="noopener noreferrer">HMAC算法及其应用 - 知乎 (zhihu.com)</a></p><p><a href="https://docs.github.com/en/developers/webhooks-and-events/webhooks/securing-your-webhooks" target="_blank" rel="noopener noreferrer">Securing your webhooks - GitHub Docs</a></p><p><a href="https://zhuanlan.zhihu.com/p/398292957" target="_blank" rel="noopener noreferrer">消息认证码与哈希算法的区别 - 知乎 (zhihu.com)</a></p><p><a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1305366354722849" target="_blank" rel="noopener noreferrer">Hmac算法 - 廖雪峰的官方网站 (liaoxuefeng.com)</a></p></blockquote><p>在身份认证过程中，有很多种方式可以保证用户信息的安全，<code>MAC(message authentication code)</code> 就是一种常用的方法。</p><p>消息认证码是对消息进行认证并确认其完整性的技术。通过使用发送者和接收者之间共享的密钥，就可以识别出是否存在伪装和篡改行为。</p><p>MAC 是通过 <strong>MAC算法 + 密钥 + 要加密的信息一起计算</strong>得出的。</p><ul><li>Hash与MAC的区别，Hash只能保证消息的完整性，MAC不仅能够保证完整性，还能够保证真实性。</li></ul><blockquote><p><a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1304227729113121" target="_blank" rel="noopener noreferrer">哈希算法 - 廖雪峰的官方网站 (liaoxuefeng.com)</a></p><hr><p>哈希算法(Hash) 又称摘要算法(Digest) ，它的作用是：对任意一组输入数据进行计算，得到一个固定长度的输出摘要。</p><p>哈希算法最重要的特点就是：</p><ul><li>相同的输入一定得到相同的输出；</li><li>不同的输入<strong>大概率</strong>得到不同的输出。</li></ul><p>哈希算法的目的就是为了验证原始数据是否被篡改。</p></blockquote><ul><li><p>同公私钥体系相比，因为MAC的密钥在发送方和接收方是一样的，所以发送方和接收方都可以来生成MAC，而公私钥体系因为将公钥和私钥分开，所以增加了不可抵赖性。</p></li><li><p>MAC有很多实现方式，比较通用的是基于 hash 算法的 MAC，比如 <code>HMAC</code>。还有一种是基于分组密码的实现，比如``OMAC, CBC-MAC and PMAC`</p></li></ul><hr><p>对于 Hash 算法 $$digest = hash(input)$$ 相同的输入会产生相同的输出，我们加盐的目的就在于，使得输入有所变化：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mi>i</mi><mi>g</mi><mi>e</mi><mi>s</mi><mi>t</mi><mo>=</mo><mi>h</mi><mi>a</mi><mi>s</mi><mi>h</mi><mo stretchy="false">(</mo><mi>s</mi><mi>a</mi><mi>l</mi><mi>t</mi><mo>+</mo><mi>i</mi><mi>n</mi><mi>p</mi><mi>u</mi><mi>t</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">digest = hash(salt + input)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">es</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">ha</span><span class="mord mathnormal">s</span><span class="mord mathnormal">h</span><span class="mopen">(</span><span class="mord mathnormal">s</span><span class="mord mathnormal">a</span><span class="mord mathnormal">lt</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">in</span><span class="mord mathnormal">p</span><span class="mord mathnormal">u</span><span class="mord mathnormal">t</span><span class="mclose">)</span></span></span></span> 这个 salt 可以看作是一个额外的“认证码”，同样的输入，不同的认证码，会产生不同的输出。因此，要验证输出的哈希，必须同时提供“认证码”。</p><p><code>HMAC(Hash-based Message Authentication Code)</code> 算法就是一种基于密钥的消息认证码算法, 是一种更安全的消息摘要算法.</p><p>HMAC算法是一种执行“校验和”的算法，它通过对数据进行“校验”来检查数据是否被更改了。在发送数据以前，HMAC算法对数据块和双方约定的公钥进行“散列操作”，以生成称为“摘要”的东西，附加在待发送的数据块中。当数据和摘要到达其目的地时，就使用HMAC算法来生成另一个校验和，如果两个数字相匹配，那么数据未被做任何篡改。否则，就意味着<strong>数据在传输或存储过程中</strong>被篡改了。</p><p>HMAC 的 MAC 算法是 hash 算法，它可以是 <code>MD5</code>, <code>SHA-1</code> 或者 <code>SHA-256</code>，他们分别被称为 <code>HMAC-MD5</code>，``HMAC-SHA1<code>， </code>HMAC-SHA256`。</p><hr><h2 id="公式和计算流程" tabindex="-1"><a class="header-anchor" href="#公式和计算流程"><span>公式和计算流程</span></a></h2><blockquote><p><a href="https://www.cnblogs.com/shoshana-kong/p/11497676.html" target="_blank" rel="noopener noreferrer">HMAC算法原理 - 月染霜华 - 博客园 (cnblogs.com)</a></p><p><a href="https://zhuanlan.zhihu.com/p/136590049" target="_blank" rel="noopener noreferrer">HMAC算法及其应用 - 知乎 (zhihu.com)</a></p></blockquote><p>HMAC 用公式可以表示为:</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>H</mi><mi>M</mi><mi>A</mi><mi>C</mi><mo stretchy="false">(</mo><mi>K</mi><mo separator="true">,</mo><mi>M</mi><mo stretchy="false">)</mo><mo>=</mo><mi>H</mi><mo stretchy="false">(</mo><mi>K</mi><mo>⨁</mo><mi>o</mi><mi>p</mi><mi>a</mi><mi>d</mi><mo separator="true">,</mo><mi>H</mi><mo stretchy="false">(</mo><mi>K</mi><mo>⨁</mo><mi>i</mi><mi>p</mi><mi>a</mi><mi>d</mi><mo separator="true">,</mo><mi>t</mi><mi>e</mi><mi>x</mi><mi>t</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">HMAC(K, M) = H(K \\bigoplus opad , H(K \\bigoplus ipad, text))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-symbol small-op" style="position:relative;top:0em;">⨁</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">o</span><span class="mord mathnormal">p</span><span class="mord mathnormal">a</span><span class="mord mathnormal">d</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-symbol small-op" style="position:relative;top:0em;">⨁</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">i</span><span class="mord mathnormal">p</span><span class="mord mathnormal">a</span><span class="mord mathnormal">d</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">t</span><span class="mord mathnormal">e</span><span class="mord mathnormal">x</span><span class="mord mathnormal">t</span><span class="mclose">))</span></span></span></span></p><ul><li><code>H</code>: hash算法，比如(``MD5<code>，</code>SHA-1<code>，</code>SHA-256`)</li><li><code>B</code>: 块字节的长度，块是hash操作的基本单位。这里B=64</li><li><code>L</code>: hash算法计算出来的字节长度。(L=16 for MD5, L=20 for SHA-1)</li><li><code>K</code>: 共享密钥，K的长度可以是任意的，但是为了安全考虑，还是推荐 <code>K的长度 &gt; B</code>。 <ul><li>K 的长度 &gt; B 时会先在 K 上面执行 hash 算法，将得到的 L 长度结果作为新的共享密钥。</li><li>K 的长度 &lt; B 时那么会在 K 后面填充 0x00 一直到等于长度 B</li></ul></li><li><code>M</code>: 要加密的内容</li><li><code>opad</code>: 外部填充常量, 是 <code>0x5c</code> 重复 B 次</li><li><code>ipad</code>: 内部填充常量, 是 <code>0x36</code> 重复 B 次</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⨁</mo></mrow><annotation encoding="application/x-tex">\\bigoplus</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop op-symbol small-op" style="position:relative;top:0em;">⨁</span></span></span></span>: 异或运算</li></ul><p>计算步骤:</p><ol><li>将 0x00 填充到 K 的后面，直到其长度等于B。</li><li>将步骤 1 的结果跟 ipad 做异或。</li><li>将要加密的信息附在步骤 2 的结果后面</li><li>调用 H 方法计算步骤 3 的结果</li><li>将步骤 1 的结果跟 opad 做异或。</li><li>将步骤 4 的结果附在步骤 5 的结果后面。</li><li>调用 H 方法计算步骤 6 的结果</li></ol><hr><h2 id="应用" tabindex="-1"><a class="header-anchor" href="#应用"><span>应用</span></a></h2><blockquote><p><a href="https://www.cnblogs.com/shoshana-kong/p/11497676.html" target="_blank" rel="noopener noreferrer">HMAC算法原理 - 月染霜华 - 博客园 (cnblogs.com)</a></p></blockquote><p>HMAC 算法的一个典型应用是用在 <code>“挑战/响应”(Challenge/Response) </code> 身份认证中，认证流程如下：</p><ol><li><p>先由客户端向服务器发出一个验证请求。</p></li><li><p>服务器接到此请求后生成一个随机数并通过网络传输给客户端(此为挑战) 。</p></li><li><p>客户端将收到的随机数与自己的密钥进行 HMAC-SHA1 运算并得到一个结果作为认证证据传给服务器(此为响应) 。</p></li><li><p>与此同时，服务器也使用该随机数与存储在服务器数据库中的该客户密钥进行 HMAC-SHA1 运算</p><p>如果服务器的运算结果与客户端传回的响应结果相同，则认为客户端是一个合法用户 。</p></li></ol><hr><h2 id="安全性" tabindex="-1"><a class="header-anchor" href="#安全性"><span>安全性</span></a></h2><blockquote><p><a href="https://www.ftsafe.com.cn/service/kbase/infomation-2" target="_blank" rel="noopener noreferrer">HMAC算法安全性浅析 | FEITIAN (ftsafe.com.cn)</a></p><p><a href="https://www.cnblogs.com/shoshana-kong/p/11497676.html" target="_blank" rel="noopener noreferrer">HMAC算法原理 - 月染霜华 - 博客园 (cnblogs.com)</a></p></blockquote><p>HMAC算法引入了密钥，其安全性已经不完全依赖于所使用的HASH算法，安全性主要有以下几点保证：</p><ul><li>使用的密钥是双方事先约定的，第三方不可能知道。由上面介绍应用流程可以看出，作为非法截获信息的第三方，能够得到的信息只有作为“挑战”的随机数和作为“响应”的HMAC结果，无法根据这两个数据推算出密钥。由于不知道密钥，所以无法仿造出一致的响应。</li><li>在HMAC算法的应用中，第三方不可能事先知道输出(如果知道，不用构造输入，直接将输出送给服务器即可) 。</li><li>HMAC算法与一般的加密重要的区别在于它具有“瞬时”性，即认证只在当时有效，而加密算法被破解后，以前的加密结果就可能被解密。</li></ul>',31)]))}const r=s(t,[["render",o],["__file","HMAC.html.vue"]]),c=JSON.parse('{"path":"/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/HMAC.html","title":"HMAC","lang":"zh-CN","frontmatter":{"description":"HMAC HMAC算法及其应用 - 知乎 (zhihu.com) Securing your webhooks - GitHub Docs 消息认证码与哈希算法的区别 - 知乎 (zhihu.com) Hmac算法 - 廖雪峰的官方网站 (liaoxuefeng.com) 在身份认证过程中，有很多种方式可以保证用户信息的安全，MAC(message a...","head":[["meta",{"property":"og:url","content":"https://233official.github.io/dailynotes/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/HMAC.html"}],["meta",{"property":"og:site_name","content":"DailyNotes"}],["meta",{"property":"og:title","content":"HMAC"}],["meta",{"property":"og:description","content":"HMAC HMAC算法及其应用 - 知乎 (zhihu.com) Securing your webhooks - GitHub Docs 消息认证码与哈希算法的区别 - 知乎 (zhihu.com) Hmac算法 - 廖雪峰的官方网站 (liaoxuefeng.com) 在身份认证过程中，有很多种方式可以保证用户信息的安全，MAC(message a..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-17T03:32:15.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-17T03:32:15.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"HMAC\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-04-17T03:32:15.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"咸鱼型233\\",\\"url\\":\\"https://233official.github.io/dailynotes/\\"}]}"]],"date":"2022-11-12T08:14:29.000Z"},"headers":[{"level":2,"title":"公式和计算流程","slug":"公式和计算流程","link":"#公式和计算流程","children":[]},{"level":2,"title":"应用","slug":"应用","link":"#应用","children":[]},{"level":2,"title":"安全性","slug":"安全性","link":"#安全性","children":[]}],"git":{"createdTime":1668240869000,"updatedTime":1744860735000,"contributors":[{"name":"233Mac","username":"233Mac","email":"ayusummer233@vip.qq.com","commits":2,"url":"https://github.com/233Mac"},{"name":"Ayusummer","username":"Ayusummer","email":"ayusummer233@gmail.com","commits":1,"url":"https://github.com/Ayusummer"},{"name":"咸鱼型233","username":"咸鱼型233","email":"ayusummer233@qq.com","commits":1,"url":"https://github.com/咸鱼型233"}]},"readingTime":{"minutes":5.34,"words":1602},"filePathRelative":"网络安全/加密算法/HMAC.md","localizedDate":"2022年11月12日","excerpt":"","autoDesc":true}');export{r as comp,c as data};
