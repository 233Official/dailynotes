import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,a as n,d,e,r as h,o as u,f as l,b as i}from"./app-CFt4SMiv.js";const c={};function g(k,s){const p=h("Tabs");return u(),o("div",null,[s[4]||(s[4]=n('<h1 id="afl" tabindex="-1"><a class="header-anchor" href="#afl"><span>AFL++</span></a></h1><blockquote><p><a href="https://zh-closure.github.io/2022/03/20/AFL++-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/#%E4%BD%BF%E7%94%A8%EF%BC%9A" target="_blank" rel="noopener noreferrer">AFL++安装与使用 | Closure (zh-closure.github.io)</a></p><p><a href="https://github.com/AFLplusplus/AFLplusplus" target="_blank" rel="noopener noreferrer">AFLplusplus/AFLplusplus: The fuzzer afl++ is afl with community patches, qemu 5.1 upgrade, collision-free coverage, enhanced laf-intel &amp; redqueen, AFLfast++ power schedules, MOpt mutators, unicorn_mode, and a lot more! (github.com)</a></p></blockquote><hr><ul><li><a href="#afl">AFL++</a><ul><li><a href="#%E7%AE%80%E4%BB%8B">简介</a></li><li><a href="#%E5%AE%89%E8%A3%85">安装</a></li><li><a href="#%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B-fuzz%E4%B8%80%E4%B8%AApdf%E8%A7%A3%E6%9E%90%E5%99%A8">使用示例-Fuzz一个PDF解析器</a><ul><li><a href="#%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8-xpdf">安装与使用 xpdf</a></li><li><a href="#%E4%BD%BF%E7%94%A8-afl-%E5%BC%80%E5%A7%8B-fuzz">使用 AFL++ 开始 FUZZ</a></li><li><a href="#%E5%A4%8D%E7%8E%B0%E5%B4%A9%E6%BA%83">复现崩溃</a></li><li><a href="#%E5%B0%9D%E8%AF%95-fuzz-%E4%B8%80%E4%B8%8B%E6%9C%80%E6%96%B0%E7%89%88%E6%9C%AC%E7%9A%84-xpdf">尝试 FUZZ 一下最新版本的 xpdf</a></li></ul></li></ul></li></ul><hr><h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><p>AFL++（American Fuzzy Lop Plus Plus）是一种高级的模糊测试工具，广泛用于安全性研究和漏洞挖掘。</p><p>AFL++模糊测试框架包括：</p><ul><li>一个具有许多变异器和配置的模糊器：afl-fuzz</li><li>不同的源代码检测模块：LLVM模式，afl-as，GCC插件</li><li>不同的二进制代码检测模块：QEMU模式，Unicorn模式，QBDI模式</li><li>用于测试用例/语料库最小化的实用程序：afl-tmin，afl-cmin</li><li>辅助库：libtokencap，libdislocator，libcompcov</li></ul><hr><h2 id="安装" tabindex="-1"><a class="header-anchor" href="#安装"><span>安装</span></a></h2>',11)),d(p,{id:"99",data:[{id:"通过Docker安装"},{id:"手动安装"}],active:0},{title0:e(({value:t,isActive:a})=>s[0]||(s[0]=[l("通过Docker安装")])),title1:e(({value:t,isActive:a})=>s[1]||(s[1]=[l("手动安装")])),tab0:e(({value:t,isActive:a})=>s[2]||(s[2]=[i("blockquote",null,[i("p",null,[i("a",{href:"https://github.com/AFLplusplus/AFLplusplus?tab=readme-ov-file#building-and-installing-afl",target:"_blank",rel:"noopener noreferrer"},"AFLplusplus/AFLplusplus: The fuzzer afl++ is afl with community patches, qemu 5.1 upgrade, collision-free coverage, enhanced laf-intel & redqueen, AFLfast++ power schedules, MOpt mutators, unicorn_mode, and a lot more! (github.com)")])],-1),i("div",{class:"language-bash line-numbers-mode","data-highlighter":"shiki","data-ext":"bash","data-title":"bash",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[i("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"docker"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," pull"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," aflplusplus/aflplusplus:latest")]),l(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"docker"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," run"),i("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}}," -ti"),i("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}}," -v"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," /location/of/your/target:/src"),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," aflplusplus/aflplusplus")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"}),i("div",{class:"line-number"})])],-1),i("blockquote",null,[i("ul",null,[i("li",null,[i("p",null,[i("code",null,"-t"),l("：分配一个伪终端（TTY），使你能够与容器进行交互。")])]),i("li",null,[i("p",null,[i("code",null,"-i"),l("：保持标准输入（STDIN）打开，这样你可以在容器中进行交互操作。")])]),i("li",null,[i("p",null,[i("strong",null,"挂载卷"),l("："),i("code",null,"-v /location/of/your/target:/src")]),i("ul",null,[i("li",null,[i("p",null,"这个选项用于将主机上的一个目录挂载到容器内部。")]),i("li",null,[i("p",null,[i("code",null,"/location/of/your/target"),l(" 是你主机上要挂载的目录的路径。")])]),i("li",null,[i("p",null,[i("code",null,"/src"),l(" 是容器内的挂载点。你可以在容器中访问该路径来读取或写入主机上的文件。")])])])])]),i("hr"),i("p",null,"直接 docker run 启动容器, 后续直接拿 VSCode Remote Container 进容器操作也行"),i("p",null,[i("img",{src:"http://cdn.ayusummer233.top/DailyNotes/202410111540370.png",alt:"image-20241011154019196"})]),i("p",null,[i("img",{src:"http://cdn.ayusummer233.top/DailyNotes/202410111544962.png",alt:"image-20241011154428837"})])],-1),i("hr",null,null,-1)])),tab1:e(({value:t,isActive:a})=>s[3]||(s[3]=[i("blockquote",null,[i("p",null,[i("a",{href:"https://github.com/AFLplusplus/AFLplusplus/blob/stable/docs/INSTALL.md",target:"_blank",rel:"noopener noreferrer"},"AFLplusplus/docs/INSTALL.md 稳定版 · AFLplusplus/AFLplusplus --- AFLplusplus/docs/INSTALL.md at stable · AFLplusplus/AFLplusplus (github.com)")])],-1),i("p",null,[l("如果你要手动安装, 可以参考 "),i("a",{href:"https://zh-closure.github.io/2022/03/20/AFL++-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/#%E4%BD%BF%E7%94%A8%EF%BC%9A",target:"_blank",rel:"noopener noreferrer"},"AFL++安装与使用 | Closure (zh-closure.github.io)")],-1),i("p",null,"要参考这个文档的话建议新开一个 ubuntu20.04 版本的机子安装, 因为其中使用的一些软件包的版本比较旧, 使用新版本系统安装可能会存在官方源已经移除了这些版本的包的问题, 所以最方便的做法还是建议使用 Docker 进行安装(不过官方建议是手动装, 有能力的以及有自定义需求的话手动装更合适一些)",-1),i("p",null,[l("或者直接去看官方文档的手动安装方案: "),i("a",{href:"https://github.com/AFLplusplus/AFLplusplus/blob/stable/docs/INSTALL.md",target:"_blank",rel:"noopener noreferrer"},"AFLplusplus/docs/INSTALL.md 稳定版 · AFLplusplus/AFLplusplus --- AFLplusplus/docs/INSTALL.md at stable · AFLplusplus/AFLplusplus (github.com)")],-1)])),_:1}),s[5]||(s[5]=n(`<hr><h2 id="参数" tabindex="-1"><a class="header-anchor" href="#参数"><span>参数</span></a></h2><blockquote><p><a href="https://securitylab.github.com/resources/fuzzing-challenges-solutions-1/" target="_blank" rel="noopener noreferrer">Fuzzing software: common challenges and potential solutions (Part 1) | GitHub Security Lab</a></p></blockquote><hr><h2 id="使用示例-fuzz一个pdf解析器" tabindex="-1"><a class="header-anchor" href="#使用示例-fuzz一个pdf解析器"><span>使用示例-Fuzz一个PDF解析器</span></a></h2><blockquote><p><a href="https://www.cnblogs.com/unr4v31/p/15237728.html" target="_blank" rel="noopener noreferrer">AFL++初探-手把手Fuzz一个PDF解析器 - unr4v31 - 博客园 (cnblogs.com)</a></p></blockquote><hr><h3 id="安装与使用-xpdf" tabindex="-1"><a class="header-anchor" href="#安装与使用-xpdf"><span>安装与使用 xpdf</span></a></h3><blockquote><p><a href="https://www.xpdfreader.com/" target="_blank" rel="noopener noreferrer">XpdfReader</a></p><p><a href="https://www.xpdfreader.com/download.html" target="_blank" rel="noopener noreferrer">Download Xpdf and XpdfReader</a></p></blockquote><p>首先为Fuzz目标创建一个新目录, 例如</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">cd</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> $HOME</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mkdir</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> fuzzing_xpdf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &amp;&amp; </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">cd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> fuzzing_xpdf/</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><img src="http://cdn.ayusummer233.top/DailyNotes/202410111620201.png" alt="image-20241011162042139"></p></blockquote><p>安装 make 和 gcc:</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> apt</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> update</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> apt</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> build-essential</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><img src="http://cdn.ayusummer233.top/DailyNotes/202410111638209.png" alt="image-20241011163810166"></p></blockquote><p>下载 Xpdf 3.02:</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">wget</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> https://dl.xpdfreader.com/old/xpdf-3.02.tar.gz</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">tar</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -xvzf</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> xpdf-3.02.tar.gz</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><img src="http://cdn.ayusummer233.top/DailyNotes/202410111638520.png" alt="image-20241011163850415"></p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202410111639900.png" alt="image-20241011163914772"></p></blockquote><p>构建 Xpdf:</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">cd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> xpdf-3.02</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> apt</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> update</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &amp;&amp; </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> apt</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -y</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> build-essential</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> gcc</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 对应改一下目录</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">./configure</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --prefix=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">$HOME</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">/fuzzing_xpdf/install/&quot;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#./configure --prefix=&quot;/233/fuzz_test/fuzzing_xpdf/install/&quot;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">make</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">make</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><img src="http://cdn.ayusummer233.top/DailyNotes/202410111640465.png" alt="image-20241011164024358"></p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202410111640384.png" alt="image-20241011164042239"></p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202410111642208.png" alt="image-20241011164244032"></p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202410111643607.png" alt="image-20241011164304454"></p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202410111658297.png" alt="image-20241011165818240"></p></blockquote><p>现在可以开始测试Xpdf。首先，需要下载一些 PDF 示例：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">cd</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> $HOME</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">/fuzzing_xpdf</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># cd /233/fuzz_test/fuzzing_xpdf</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mkdir</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> pdf_examples</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &amp;&amp; </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">cd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> pdf_examples</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">wget</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> https://github.com/mozilla/pdf.js-sample-files/raw/master/helloworld.pdf</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">wget</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> http://www.africau.edu/images/default/sample.pdf</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">wget</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> https://www.melbpc.org.au/wp-content/uploads/2017/10/small-example-pdf-file.pdf</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>其中可能会有文档已经不存在了:</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202410111646741.png" alt="image-20241011164623636"></p></blockquote><p>可以使用以下命令测试 pdfinfo 二进制文件：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">$HOME</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">/fuzzing_xpdf/install/bin/pdfinfo -box -meta </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">$HOME</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">/fuzzing_xpdf/pdf_examples/helloworld.pdf</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#/233/fuzz_test/fuzzing_xpdf/install/bin/pdfinfo -box -meta /233/fuzz_test/fuzzing_xpdf/pdf_examples/helloworld.pdf</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>-box</code>：显示 PDF 文件中每一页的边框信息，包括 MediaBox、CropBox、BleedBox、TrimBox 和 ArtBox。</li><li><code>-meta</code>：显示 PDF 文件的元数据信息。</li></ul><blockquote><p><img src="http://cdn.ayusummer233.top/DailyNotes/202410111704430.png" alt="image-20241011170459369"></p></blockquote><hr><h3 id="使用-afl-开始-fuzz" tabindex="-1"><a class="header-anchor" href="#使用-afl-开始-fuzz"><span>使用 AFL++ 开始 FUZZ</span></a></h3><p>插桩是一种代码分析技术，AFL 使用它来跟踪程序的执行路径。</p><p>在 AFL 的插桩过程中，编译时会在每个<strong>基本块</strong>的开头插入特殊的代码（通常是函数调用）。这些插入的代码让 AFL 能够监控程序的执行状态，收集关于程序在处理不同输入时的行为数据。</p><blockquote><p><strong>基本块</strong>：在计算机程序中，基本块（Basic Block）是指一组连续的指令，这些指令只有一个入口和一个出口。常见的基本块包括函数、循环以及条件判断的分支部分等。</p></blockquote><hr><p>AFL的检测机制</p><ul><li>当源代码可用时，AFL 能够通过插入检测代码（通过 AFL 编译器进行插桩），在程序执行过程中收集有关其执行路径的信息。</li><li>这些检测数据让 AFL 能够了解程序对不同输入的响应，从而指导模糊测试，找出导致程序崩溃或不正常行为的输入。</li></ul><hr><p>AFL 编译器的作用</p><ul><li>AFL 通过其定制的编译器来实现插桩，具体来说，是通过使用 AFL 提供的编译器（如 <code>afl-gcc</code> 或 <code>afl-clang-fast</code>）来编译目标应用程序。</li><li>这些 AFL 编译器不仅执行常规的编译任务，还会在编译过程中为每个基本块插入 AFL 所需的检测代码。只有通过 AFL 编译器编译的程序，才能够被 AFL 有效地模糊测试，因为它们携带了 AFL 所需的检测信息。</li></ul><hr><p>首先，清理所有以前编译的目标文件和可执行文件：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">rm</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -r</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> $HOME</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">/fuzzing_xpdf/install</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># rm -r /233/fuzz_test/fuzzing_xpdf/install</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">cd</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> $HOME</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">/fuzzing_xpdf/xpdf-3.02/</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># cd /233/fuzz_test/fuzzing_xpdf/xpdf-3.02/</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">make</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> clean</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p>现在将使用afl-clang-fast编译器构建 xpdf ：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> LLVM_CONFIG</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;llvm-config-11&quot;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 根据你的 AFLplusplus 所在位置调整如下命令</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">CC</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">$HOME</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">/AFLplusplus/afl-clang-fast</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> CXX</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">$HOME</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">/AFLplusplus/afl-clang-fast++</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> ./configure</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --prefix=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">$HOME</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">/fuzzing_xpdf/install/&quot;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># CC=/AFLplusplus/afl-clang-fast CXX=/AFLplusplus/afl-clang-fast++ ./configure --prefix=&quot;/233/fuzz_test/fuzzing_xpdf/install/&quot;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">make</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">make</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><img src="http://cdn.ayusummer233.top/DailyNotes/202410111729769.png" alt="image-20241011172917713"></p></blockquote><p>现在可以使用以下命令运行Fuzz：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">afl-fuzz</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -i</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> $HOME</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">/fuzzing_xpdf/pdf_examples/</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -o</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> $HOME</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">/fuzzing_xpdf/out/</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -s</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 123</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> $HOME</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">/fuzzing_xpdf/install/bin/pdftotext</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> @@</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> $HOME</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">/fuzzing_xpdf/output</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># afl-fuzz -i /233/fuzz_test/fuzzing_xpdf/pdf_examples/ -o /233/fuzz_test/fuzzing_xpdf/out/ -s 123 -- /233/fuzz_test/fuzzing_xpdf/install/bin/pdftotext @@ /233/fuzz_test/fuzzing_xpdf/output</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">## cd /233/fuzz_test/fuzzing_xpdf</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">## afl-fuzz -i pdf_examples/ -o out/ -s 123 -- install/bin/pdftotext @@ output</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><code>afl-fuzz</code> 是 AFL++ 的核心命令，用于对目标程序进行模糊测试（fuzzing）。它通过生成不同的输入数据并监控程序的行为来发现漏洞或异常行为。</p></li><li><p><code>-i</code> 指定 AFL++ 的<strong>输入目录</strong>，即模糊测试用例的初始输入文件所在的目录。</p><p>AFL 会从这个目录中读取输入文件，并基于这些输入生成新的测试用例。</p></li><li><p><code>-o</code> 指定 AFL++ 的<strong>输出目录</strong>，AFL 会将测试结果（如测试用例、日志、崩溃数据等）写入这个目录。</p><p>所有模糊测试的结果和发现都会保存在这里。</p></li><li><p><code>-s</code> 用于指定 AFL++ 的<strong>随机种子</strong>。这个参数让模糊测试的输入生成过程基于相同的种子值，生成一致的输入数据，方便结果复现。</p><p><code>123</code> 是这里指定的随机种子。如果你希望 AFL 每次生成不同的输入数据，可以不指定这个选项。</p></li><li><p><code>--</code> 表示 AFL++ 的选项部分已经结束，后面跟的是目标程序及其参数。</p><p><code>--</code> 之后的内容是目标程序以及其运行时需要的参数</p></li><li><p><strong><code>/233/fuzz_test/fuzzing_xpdf/install/bin/pdftotext</code></strong> 是目标程序的路径</p><p><code>pdftotext</code> 是一个将 PDF 文件转换为文本文件的工具。</p></li><li><p><code>@@</code> 是 AFL++ 的占位符，表示 AFL 会将生成的测试用例（如变异后的输入文件）替换到这里。在每次运行目标程序时，AFL 会将测试用的 PDF 文件作为参数传递给 <code>pdftotext</code>。</p><p><code>@@</code> 将被 AFL 动态替换为每次生成的测试用例文件路径。</p></li><li><p><strong><code>/233/fuzz_test/fuzzing_xpdf/output</code></strong> 是目标程序 <code>pdftotext</code> 的另一个参数</p></li></ul><p>它指定了 <code>pdftotext</code> 的输出文件夹或输出文件路径，即转换后的文本文件将会保存到 <code>/233/fuzz_test/fuzzing_xpdf/output</code> 目录下。</p><p>这条命令的作用是运行 AFL++ 对 <code>pdftotext</code> 程序进行模糊测试，使用 <code>/233/fuzz_test/fuzzing_xpdf/pdf_examples/</code> 目录中的 PDF 文件作为初始输入，将生成的测试用例保存在 <code>/233/fuzz_test/fuzzing_xpdf/out/</code> 目录下。<code>pdftotext</code> 的输入为 AFL 生成的测试用例文件，输出转换后的文本文件保存到 <code>/233/fuzz_test/fuzzing_xpdf/output</code>。</p><blockquote><p><img src="http://cdn.ayusummer233.top/DailyNotes/202410111745391.png" alt="image-20241011174536331"></p><ul><li><p><code>Process Timing(进程计时)</code></p><ul><li><code>run time</code>: 模糊测试运行的时间</li><li><code>last new find</code>: 最近发现一个新的输入时的时间</li><li><code>last saved crash</code>: 最近一次保存崩溃输入的时间</li><li><code>last saved hang</code>: 最近一次保存挂起输入的时间</li></ul></li><li><p><code>Overall Results(整体结果)</code></p><ul><li><p><code>cycles done</code>: 已完成的模糊测试周期数</p><p>模糊测试周期（<strong>fuzzing cycle</strong>）指的是 AFL++ 等模糊测试工具在模糊测试过程中对所有输入样本为<strong>初始语料库</strong>（或称<strong>种子</strong>, 也即 <code>pdf_examples</code> 目录中的文件）进行完整处理的一轮测试。在一个周期中，工具会对语料库中的每个输入样本执行以下操作：</p><ul><li><p><strong>变异操作</strong>：AFL++ 会对每个输入样本进行多种不同形式的变异（如位翻转、字节翻转、算术操作等），以生成新的测试用例。这些变异的输入旨在覆盖更多的程序执行路径，暴露潜在的漏洞或问题。</p></li><li><p><strong>执行和监控</strong>：AFL++ 会将变异后的输入发送到目标程序进行执行，监控其运行状态。如果目标程序崩溃、挂起或有新的代码路径被覆盖，AFL++ 会记录这些信息。</p></li><li><p><strong>结果处理</strong>：</p><ul><li><p><strong>保存崩溃</strong>：如果 AFL++ 发现程序在处理某个变异输入时发生了崩溃，它会将这个输入保存为崩溃样本。</p></li><li><p><strong>保存挂起</strong>：如果程序因某个输入挂起或超时，AFL++ 也会记录这个输入。</p></li><li><p><strong>更新语料库</strong>：如果变异后的输入能够触发新的代码路径或执行新的基本块，AFL++ 会将其加入语料库，以便在后续周期中进一步测试。</p><p>结束一个周期后，AFL++ 会检查新的语料库状态。如果在本周期中 AFL++ 发现了新的有效输入（如发现了新的代码路径或程序崩溃），这些输入会被添加到语料库，进入下一个周期的处理</p></li></ul></li></ul></li><li><p><code>corpus count</code>: 当前语料库中有效输入的数量</p></li><li><p><code>saved crashes</code>: 保存的崩溃数量</p></li><li><p><code>saved hangs</code>: 保存的挂起数量</p></li></ul></li></ul><hr><p><img src="http://cdn.ayusummer233.top/DailyNotes/202410111758617.png" alt="image-20241011175838471"></p><ul><li><p><code>Cycle Progress (周期进度)</code>：</p><ul><li><code>now processing</code>: 当前处理的输入在整个语料库中的进度</li><li><code>runs timed out</code>: 超时次数，当前是 <code>0</code>，表示没有发生超时的测试用例。</li></ul></li><li><p><code>Map Coverage (覆盖率)</code>：</p><ul><li><p><code>map density</code>: 覆盖率的密度，当前是 <code>6.35% / 10.09%</code>。这表示程序的代码路径覆盖率为 6.35%，但 AFL++ 估计最大可能的覆盖率为 10.09%。</p><p>当前是 <code>6.35% / 10.09%</code>。这表示程序的代码路径覆盖率为 6.35%，但 AFL++ 估计最大可能的覆盖率为 10.09%。</p></li><li><p><code>count coverage</code>: 覆盖的基本块或路径的计数平均值，当前是 <code>4.16 bits/tuple</code>，越高表示 AFL++ 覆盖了更多的执行路径。</p></li></ul></li></ul><hr><p><img src="http://cdn.ayusummer233.top/DailyNotes/202410120948788.png" alt="image-20241012094843616"></p><ul><li><p><strong>Stage Progress (阶段进度)</strong>：</p><ul><li><strong>now trying</strong>: 当前模糊测试正在使用的策略阶段 <ul><li><strong>bitflip (位翻转)</strong><ul><li><strong>bitflip 1/1, 1/2, 1/4</strong>: 按照一位、一对或一组4位的方式翻转输入文件中的位。例如，将一个字节的某个位（bit）由 <code>0</code> 翻转为 <code>1</code>，或反过来。</li><li><strong>目的</strong>：通过微小的位级别变化，尝试引发程序在处理二进制或位级别数据时的错误。</li></ul></li><li><strong>arithmetics (算术运算)</strong><ul><li><strong>arith 8/16/32</strong>: 尝试对输入中的数据做算术操作（加减）。这个策略通常用于修改特定字段中的数字或变量，如 8 位、16 位或 32 位的整数值。</li><li><strong>目的</strong>：尝试引发目标程序在处理整数运算时的溢出或其他异常情况。</li></ul></li><li><strong>known ints (已知整数)</strong><ul><li>AFL++ 插入一些已知有用的整数值，如 <code>0</code>、<code>-1</code>、<code>255</code>、<code>32767</code> 等。这些值通常会在某些程序操作中导致特殊行为或边界条件。</li><li><strong>目的</strong>：通过插入常见边界值，尝试引发程序在处理极限或异常值时的漏洞。</li></ul></li><li><strong>dictionary (字典替换)</strong><ul><li>如果 AFL++ 提供了字典文件（一个包含关键字符串或输入片段的文件），它会使用字典中的内容替换输入中的部分内容。这种策略通常用于处理文本或结构化输入（如 XML、JSON 等）。</li><li><strong>目的</strong>：利用已知有害或边界值的字符串，触发特定的解析或处理漏洞。</li></ul></li><li><strong>havoc (混乱变异)</strong><ul><li><strong>havoc</strong> 是 AFL++ 中最为广泛使用的变异策略，它随机对输入应用一系列小幅度的变异操作，如位翻转、字节翻转、整数替换、算术运算等。</li><li><strong>目的</strong>：随机性极强，适用于一般的模糊测试阶段，以探索程序的整体脆弱性。</li></ul></li><li><strong>splice (拼接变异)</strong><ul><li><strong>splice</strong> 阶段将两个输入文件进行拼接，形成一个新的输入样本。这种变异策略通过结合已有的样本特征，生成新的可能有用的输入。</li><li><strong>目的</strong>：通过拼接不同输入的部分，触发目标程序在处理复杂组合输入时的潜在漏洞。</li></ul></li><li><strong>extras/user extras (额外变异)</strong><ul><li>AFL++ 可以利用用户提供的额外数据（extras）作为输入片段插入到测试样本中。例如，用户可以提供一组关键字、标志或输入片段，AFL++ 会随机选择并插入这些片段。</li><li><strong>目的</strong>：通过插入额外的片段，尝试覆盖更多代码路径或触发特定的解析逻辑。</li></ul></li><li><strong>trim (修剪)</strong><ul><li><strong>trim</strong> 阶段尝试通过删除输入样本中的某些不必要的部分，来简化输入文件，同时保持其有效性。这个过程旨在缩小样本大小，简化后续的变异过程。</li><li><strong>目的</strong>：减少输入文件的冗余部分，以便更快、更高效地进行变异。</li></ul></li><li><strong>cmp-log (比较日志)</strong><ul><li><strong>cmp-log</strong> 是 AFL++ 的高级变异阶段之一，它通过分析目标程序在处理输入时的比较操作（如 <code>==</code>, <code>!=</code> 等），生成有针对性的输入，目的是绕过这些条件判断。</li><li><strong>目的</strong>：通过生成符合比较条件的输入，引导程序进入之前无法达到的代码路径。</li></ul></li><li><strong>rare edge (稀有路径边缘变异)</strong><ul><li><strong>rare edge</strong> 是 AFL++ 针对那些稀有路径的变异阶段，即那些较少被执行或难以覆盖的路径。AFL++ 会优先对这些稀有路径的输入进行更多的变异。</li><li><strong>目的</strong>：增加覆盖稀有路径的概率，提升模糊测试的效果。</li></ul></li></ul></li></ul><hr><p><img src="http://cdn.ayusummer233.top/DailyNotes/202410120955069.png" alt="image-20241012095517995"></p><ul><li><strong>stage execs</strong>: 当前阶段执行的次数，显示为 <code>4236/38.4k(11.03%)</code>，表示 AFL++ 在当前阶段已经执行了 4236 次，约完成了 11.03%。</li><li><strong>total execs</strong>: 模糊测试从开始以来的总执行次数</li><li><strong>exec speed</strong>: 执行速度，当前为 <code>154.8/sec</code>，表示每秒执行 154.8 次测试用例。</li></ul></li><li><p><strong>Findings in Depth (深入发现)</strong>：</p><ul><li><p><strong>favored items</strong>: 当前阶段中被标记为 &quot;优选&quot; 的输入数量。优选项是 AFL++ 认为最有潜力发现新路径的输入。</p></li><li><p><strong>new edges on</strong>: AFL++ 通过新输入发现的新的代码路径或基本块数量，显示为 <code>432(15.7%)</code>，表示 AFL++ 在 <code>15.7%</code> 的输入中发现了新路径。</p></li><li><p><strong>total crashes</strong>: 总的崩溃次数</p><p>可以在 \`\`fuzzing_xpdf/out/<code>目录中找到这些崩溃文件。一旦发现第一个崩溃，就可以使用</code>control+c\`停止 fuzzer。</p></li><li><p><strong>total timeouts</strong>: 总的超时次数</p></li></ul></li><li><p><strong>Fuzzing Strategy Yields (模糊测试策略结果)</strong>：</p><ul><li><strong>bit flips / byte flips</strong>: 用 AFL++ 的“位翻转”和“字节翻转”策略进行模糊测试时找到的新路径或变异的数量。例如， <code>bit flips : 37/5248</code> 表示总共尝试了 5248 次位翻转变异，并成功发现了 37 个新路径。</li><li><strong>arithmetics</strong>: 使用算术运算来变异输入的测试，例如 <code>48/44.3k</code>，表示 AFL++ 通过算术变异发现了 48 个有用的变异。</li><li><strong>known ints</strong>: 使用已知整数值进行变异的结果，例如 <code>2/5487</code>，表示 AFL++ 在 5487 次已知整数变异中发现了 2 个新的路径。</li></ul></li><li><p><strong>Item Geometry (输入几何）</strong>：</p><ul><li><strong>levels</strong>: 当前语料库中的输入深度层次，例如 <code>2</code>，表示 AFL++ 使用了两层递归或嵌套的输入结构。</li><li><strong>pending</strong>: 仍在等待 AFL++ 处理的输入数量</li><li><strong>pend fav</strong>: 优先处理的输入数量</li><li><strong>own finds</strong>: AFL++ 自己发现的有效输入数量</li><li><strong>imported</strong>: 从外部导入的输入数量</li><li><strong>stability</strong>: 测试程序的稳定性，当前是 <code>100.00%</code>，表示 AFL++ 的每次执行都能保持稳定的运行状态，没有检测到崩溃或挂起的输入对程序造成了不一致的影响。</li></ul></li><li><p><strong>Strategy</strong>:</p><ul><li><strong>strategy</strong>: 当前使用的模糊测试策略是 <code>explore</code>，表示 AFL++ 正在探索新的路径，试图通过生成变异输入来发现新的代码执行路径。</li><li><strong>state</strong>: AFL++ 的当前状态; <code>in progress</code>，表示 AFL++ 正在进行模糊测试。</li></ul></li></ul></blockquote><p>可以参考<code>cycles done</code> 的数字颜色，依次会出现洋葱红色，黄色，蓝色，绿色，变成绿色时就很难产生新的crash文件了。</p><hr><h3 id="复现崩溃" tabindex="-1"><a class="header-anchor" href="#复现崩溃"><span>复现崩溃</span></a></h3><p>在<code>fuzzing_xpdf/out/</code>目录中找到崩溃对应的文件。文件名类似于<code>id:000000,sig:11,src:001504+000002,time:924544,op:splice,rep:16</code></p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202410121033167.png" alt="image-20241012103347102"></p><p>将此文件作为输入传递给 pdftotext 二进制文件（如果提示无法打开文件，将文件名称改为xxx.pdf再尝试）</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">fuzzing_xpdf/install/bin/pdftotext</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;fuzzing_xpdf/out/default/crashes/&lt;your_filename&gt;&#39;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> fuzzing_xpdf/output</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>它会导致分段错误并导致程序崩溃：</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202410121039090.png" alt="image-20241012103906021"></p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202410121040345.png" alt="image-20241012104049281"></p><hr>`,63))])}const f=r(c,[["render",g],["__file","index.html.vue"]]),F=JSON.parse('{"path":"/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/%E6%A8%A1%E7%B3%8A%E6%B5%8B%E8%AF%95/AFL__/","title":"AFL++","lang":"zh-CN","frontmatter":{"description":"AFL++ AFL++安装与使用 | Closure (zh-closure.github.io) AFLplusplus/AFLplusplus: The fuzzer afl++ is afl with community patches, qemu 5.1 upgrade, collision-free coverage, enhanced la...","head":[["meta",{"property":"og:url","content":"https://233official.github.io/dailynotes/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/%E6%A8%A1%E7%B3%8A%E6%B5%8B%E8%AF%95/AFL__/"}],["meta",{"property":"og:site_name","content":"DailyNotes"}],["meta",{"property":"og:title","content":"AFL++"}],["meta",{"property":"og:description","content":"AFL++ AFL++安装与使用 | Closure (zh-closure.github.io) AFLplusplus/AFLplusplus: The fuzzer afl++ is afl with community patches, qemu 5.1 upgrade, collision-free coverage, enhanced la..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"http://cdn.ayusummer233.top/DailyNotes/202410111540370.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-17T03:32:15.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-17T03:32:15.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"AFL++\\",\\"image\\":[\\"http://cdn.ayusummer233.top/DailyNotes/202410111540370.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202410111544962.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202410111620201.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202410111638209.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202410111638520.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202410111639900.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202410111640465.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202410111640384.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202410111642208.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202410111643607.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202410111658297.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202410111646741.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202410111704430.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202410111729769.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202410111745391.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202410111758617.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202410120948788.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202410120955069.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202410121033167.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202410121039090.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202410121040345.png\\"],\\"dateModified\\":\\"2025-04-17T03:32:15.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"咸鱼型233\\",\\"url\\":\\"https://233official.github.io/dailynotes/\\"}]}"]],"date":"2024-10-11T10:01:53.000Z"},"headers":[{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":2,"title":"安装","slug":"安装","link":"#安装","children":[]},{"level":2,"title":"参数","slug":"参数","link":"#参数","children":[]},{"level":2,"title":"使用示例-Fuzz一个PDF解析器","slug":"使用示例-fuzz一个pdf解析器","link":"#使用示例-fuzz一个pdf解析器","children":[{"level":3,"title":"安装与使用 xpdf","slug":"安装与使用-xpdf","link":"#安装与使用-xpdf","children":[]},{"level":3,"title":"使用 AFL++ 开始 FUZZ","slug":"使用-afl-开始-fuzz","link":"#使用-afl-开始-fuzz","children":[]},{"level":3,"title":"复现崩溃","slug":"复现崩溃","link":"#复现崩溃","children":[]}]}],"git":{"createdTime":1728640913000,"updatedTime":1744860735000,"contributors":[{"name":"233Mac","username":"233Mac","email":"ayusummer233@vip.qq.com","commits":2,"url":"https://github.com/233Mac"},{"name":"233","username":"233","email":"ayusummer233@vip.qq.com","commits":3,"url":"https://github.com/233"}]},"readingTime":{"minutes":14.86,"words":4457},"filePathRelative":"网络安全/漏洞挖掘/模糊测试/AFL++/index.md","localizedDate":"2024年10月11日","excerpt":"","autoDesc":true}');export{f as comp,F as data};
