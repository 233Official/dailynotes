import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as p,a as e,d as a,b as s,f as l,o as r,r as o}from"./app-CFt4SMiv.js";const h={};function d(c,i){const t=o("Mermaid");return r(),p("div",null,[i[4]||(i[4]=e(`<h1 id="ssh-隧道" tabindex="-1"><a class="header-anchor" href="#ssh-隧道"><span>SSH 隧道</span></a></h1><hr><ul><li><a href="#ssh-%E9%9A%A7%E9%81%93">SSH 隧道</a><ul><li><a href="#%E6%9C%AC%E5%9C%B0%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91local-port-forwarding">本地端口转发(Local Port Forwarding)</a><ul><li><a href="#%E6%9C%AC%E5%9C%B0%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF-%E8%AE%BF%E9%97%AE%E5%8F%97%E9%99%90%E6%9C%8D%E5%8A%A1">本地端口转发应用场景-访问受限服务</a></li><li><a href="#%E6%9C%AC%E5%9C%B0%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF-%E5%AE%89%E5%85%A8%E7%9A%84web%E6%B5%8F%E8%A7%88">本地端口转发应用场景-安全的Web浏览</a></li></ul></li><li><a href="#%E8%BF%9C%E7%A8%8B%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91remote-port-forwarding">远程端口转发(Remote Port Forwarding)</a><ul><li><a href="#%E8%BF%9C%E7%A8%8B%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF-%E6%96%AD%E7%BD%91%E4%B8%BB%E6%9C%BA%E8%81%94%E7%BD%91">远程端口转发应用场景-断网主机联网</a></li></ul></li><li><a href="#%E5%8A%A8%E6%80%81%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91dynamic-port-forwarding">动态端口转发(Dynamic Port Forwarding)</a></li><li><a href="#ssh%E9%9A%A7%E9%81%93%E5%9C%A8%E6%B8%97%E9%80%8F%E5%9C%BA%E6%99%AF%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8">SSH隧道在渗透场景中的应用</a></li></ul></li></ul><hr><blockquote><p><a href="https://www.huaweicloud.com/zhishi/cph5.html" target="_blank" rel="noopener noreferrer">什么是SSH隧道_SSH隧道介绍-华为云 (huaweicloud.com)</a></p><p><a href="https://www.lixueduan.com/posts/linux/07-ssh-tunnel/" target="_blank" rel="noopener noreferrer">SSH 隧道简明教程 - (lixueduan.com)</a></p></blockquote><p><strong>SSH 隧道是 SSH 中的一种机制</strong>，它能够将其他 TCP 端口的网络数据通过 SSH 连接来转发，并且自动提供了相应的加密及解密服务。因为 SSH 为其他 TCP 链接提供了一个安全的通道来进行传输，因此这一过程也被叫做“隧道”（tunneling）。</p><p>SSH隧道即SSH端口转发，在SSH客户端与SSH服务端之间建立一个隧道，将网络数据通过该隧道转发至指定端口，从而进行网络通信。SSH隧道自动提供了相应的加密及解密服务，保证了数据传输的安全性。</p><p>SSH 隧道能够提供两大功能：</p><ul><li>加密 SSH Client 端至 SSH Server 端之间的通讯数据。</li><li><blockquote><p>突破防火墙的限制完成一些之前无法建立的 TCP 连接。</p></blockquote></li></ul><p>SSH隧道有三种端口转发模式：</p><blockquote><p>TODO: 这里写个场景标题的汇总, 把最后一节打散放到下面具体的章节中作为示例讲解</p></blockquote><ul><li>本地端口转发（Local Port Forwarding）</li><li>远程端口转发（Remote Port Forwarding）</li><li>动态端口转发（Dynamic Port Forwarding）</li></ul><hr><h2 id="本地端口转发-local-port-forwarding" tabindex="-1"><a class="header-anchor" href="#本地端口转发-local-port-forwarding"><span>本地端口转发(Local Port Forwarding)</span></a></h2><p>对于本地/远程端口转发，两者的方向恰好相反。</p><p>本地端口转发，是将发送到本地端口的请求，转发到目标端口，这样就可以通过访问本地端口，来访问目标端口的服务。</p><p>本地端口转发可以用于</p><blockquote><p>TODO: 这里只保留标题</p></blockquote><ul><li><p><strong>访问内网服务</strong>: 如果当前需要访问远程网络中的服务（如数据库、Web服务），这些服务仅限于内网访问。你可以通过SSH连接到内网有公网ip的远程服务器，并使用本地端口转发将内网目标主机的端口映射到本地计算机，从而实现访问。</p></li><li><p><strong>绕过防火墙或限制</strong>: 例如一台可以 SSH 连接到的服务器的一些端口上的服务不对外开放, 可以通过本地端口转发来访问这类受限服务</p><p>例如公司DMZ区域服务器的SSH服务对外开放, 80 端口的 HTTP 服务对内开放, 除了可以连接到内网访问此服务器的 80 端口的服务外, 还可以 SSH 此服务器建立本地端口转发来访问此服务, 从而绕过公网防火墙的防御</p></li><li><p><strong>安全的Web浏览</strong>: 当你在不安全的公共Wi-Fi网络（如咖啡厅、机场）中工作时，可以通过本地端口转发将所有Web流量通过SSH隧道加密传输到可信任的远程服务器，然后再访问互联网，从而保护隐私</p><p>例如，通过本地端口转发将浏览器的HTTP流量通过远程的SSH服务器发送，以避免网络窃听</p></li><li><p><strong>访问远程开发环境</strong>: 开发者可以通过SSH端口转发访问远程的开发环境，比如Web应用、数据库、调试端口等，而不需要公开这些服务的端口</p><p>例如，将远程服务器上的调试端口（如8000端口）映射到本地，从而在本地调试远程应用程序</p></li><li><p><strong>远程桌面或VNC连接</strong>: 如果远程的桌面服务（如VNC、RDP）只在内网开放，则可以通过SSH连接到远程服务器，并使用端口转发将远程桌面服务的端口映射到本地，从而访问该服务</p><p>例如，将公司内网的VNC服务通过SSH转发到本地，以便从外部访问</p></li></ul><p>总的来说, SSH本地端口转发主要用于安全、私密地访问远程服务，常用于跨越网络限制和防火墙规则</p><hr><p>使用 <code>-L</code> 选项，就可以指定需要转发的端口，语法如下：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ssh</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -L</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 本地端口:目标地址:目标端口</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 例如</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ssh</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -NL</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 9302:100.1.1.131:9303</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -i</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;xxx&quot;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> root@100.1.1.131</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>-f</code>: 表示在后台运行 ssh 命令, 不占用终端</li><li><code>-N</code> 表示不执行远程命令,只做端口转发</li><li><code>-i [私钥路径]</code> 表示使用指定私钥文件进行身份验证</li><li><code>root@100.1.1.131</code> 表示以 root 用户登录远程主机<code>100.1.1.131</code></li></ul><p><img src="http://cdn.ayusummer233.top/DailyNotes/202408051521099.png" alt="image-20240805152149061"></p><p>在远程主机 <code>100.1.1.131</code> 的 <code>9303</code> 端口起一个 http 服务</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">python</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -m</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> http.server</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 9303</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/DailyNotes/202408051510284.png" alt="image-20240805151017184"></p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202408051523511.png" alt="image-20240805152327461"></p><hr><p>比如 VSCode Remote-SSH 连上服务器后, 在服务器上执行服务占用的端口会自动进行本地端口转发:</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202408051057532.png" alt="image-20240805105728544"></p><hr><h3 id="本地端口转发应用场景-访问受限服务" tabindex="-1"><a class="header-anchor" href="#本地端口转发应用场景-访问受限服务"><span>本地端口转发应用场景-访问受限服务</span></a></h3><blockquote><p><a href="https://wangdoc.com/ssh/port-forwarding" target="_blank" rel="noopener noreferrer">SSH 端口转发 - SSH 教程 - 网道 (wangdoc.com)</a></p></blockquote><p>在本节开头我们有提到如下几个本地端口转发的应用场景</p><ol><li>访问内网服务</li><li>绕过防火墙或限制</li><li>安全的Web浏览</li><li>访问远程开发环境</li><li>远程桌面或VNC连接</li></ol><p>以如下网络拓扑为例:</p>`,39)),a(t,{id:"mermaid-259",code:"eJxLL0osyFDwCeJSAILi0iQI/9mcNU/nbHi6seHp/PnP904ES4KAo4YGRCo8My8lv7w4wFlTEyyZmpfChWrEi/1znq/ofjan92nXwqczVzxtawUaZGhpBCSfrdsKVsvppKHhk5lXWgFX5WSTVGT3tHUNUBFEna6hgV4FCIIlwGbAJCyN9AzNLPQM9YwMTUGyFgYWhs9Xr3/av/jJjq5nczqf7Gh4smOVR0hIAMT4Zz1NT+eseNbZAJQDmvG0d+GTHd1QjUaENebkJyfmZOQXlwAVQT0NAs4aGhBnQUME7hVnXZDZyK60hFpmALEMaFNGSUkBRANSMIJoMOEWHv1yxqbnjaufLpoZCwldRwVdXV2gBJhy4uLiAgBxrsm6"}),i[5]||(i[5]=e('<p><img src="http://cdn.ayusummer233.top/DailyNotes/202408201033330.png" alt="image-20240820103301310"></p><p>应用场景中 <code>1,2,4,5</code> 都属于访问受限服务的范畴</p><ul><li><p>对于 <strong>绕过防火墙限制</strong> 而言, Linux服务器B的8081网卡下的服务挂在了所有网卡下, 理论上可以在本地PC上通过访问Linux公网网卡的8081端口来访问到这个HTTP服务, 但是如果公网防火墙限制了公网对Linux服务器B的8081端口的访问那么就不能如此访问了</p><p>此时可以通过SSH本地端口转发链接到Linux服务器B将本地的某一个端口转发到Linux服务器B上任一网卡的8081端口从而达成绕过防火墙的限制访问Linux服务器B上8081端口服务的目的</p></li><li><p>对于 <strong>访问远程开发环境</strong> 而言, 这个用途最为常见, 我们在远程开发应用时可能会选择将服务挂在localhost上, 此时可以通过SSH本地端口转发来访问这些服务而不必将这些未开发完成的服务暴露在内网或公网上</p></li><li><p>本地PC通过SSH本地端口转发B访问C的服务</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ssh</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -L</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 9300:192.168.1.219:8080</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> root@[B公网ip]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/DailyNotes/202408201037469.png" alt="image-20240820103731399"></p><p>然后就可以访问本地的 9300 端口来通过 Linux 服务器 B 转发流量访问内网服务器C的8080端口上的HTTP服务了:</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202408201038573.png" alt="image-20240820103825516"></p></li><li><p>对于 <strong>远程桌面或VNC连接</strong> 而言, 原理和 <strong>访问内网服务</strong> 一致, 只不过把上面命令里指向的服务器C的8080端口改成了RDP3389端口或者VNC5900端口即可, 例如</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202408201049327.png" alt="image-20240820104941243"></p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202408201050119.png" alt="image-20240820105009038"></p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202408201052485.png" alt="image-20240820105224425"></p></li></ul><hr><p>上述描述的都是一层转发的场景, 如果网络拓扑存在多层隔离网络的话也可以用 SSH 本地端口转发制作多级跳板, 例如新建两个 SSH 隧道，第一个隧道转发给第二个隧道，第二个隧道才能访问目标服务器</p><p>首先，在本机新建第一级隧道</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ssh</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -L</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 9300:localhost:2999</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> tunnel1-host</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><p>需要注意的是, 这里的 <code>localhost:2999</code> 是转发给的 <code>tunnel1-host</code> 的 <code>localhost:2999</code> 而非本地的 <code>localhost:2999</code></p><p>例如:</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202408201413568.png" alt="image-20240820141328435"></p></blockquote><p>上述命令在本地<code>9300</code>端口与<code>tunnel1-host</code>之间建立一条隧道，隧道的出口是<code>tunnel1-host</code>的<code>localhost:2999</code>，也就是<code>tunnel1-host</code>收到本机的请求以后，转发给自己的<code>2999</code>端口</p><p>然后，在第一台跳板机（<code>tunnel1-host</code>）执行下面的命令，新建第二级隧道</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ssh</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -L</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 2999:target-host:7999</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> tunnel2-host</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -N</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>上述命令将第一台跳板机<code>tunnel1-host</code>的<code>2999</code>端口，通过第二台跳板机<code>tunnel2-host</code>，连接到目标服务器<code>target-host</code>的<code>7999</code>端口</p><p>最终效果就是，访问本机的<code>9300</code>端口，就会转发到<code>target-host</code>的<code>7999</code>端口</p><hr><h3 id="本地端口转发应用场景-安全的web浏览" tabindex="-1"><a class="header-anchor" href="#本地端口转发应用场景-安全的web浏览"><span>本地端口转发应用场景-安全的Web浏览</span></a></h3><p>当你在不安全的公共Wi-Fi网络（如咖啡厅、机场）中工作时，可以通过本地端口转发将所有Web流量通过SSH隧道加密传输到可信任的远程服务器，然后再访问互联网，从而保护隐私</p><p>例如，通过本地端口转发将浏览器的HTTP流量通过远程的SSH服务器发送，以避免网络窃听</p><p>这个原理和上面的 <strong>远程桌面或VNC连接</strong> , <strong>访问内网服务</strong> 一致, 只不过把上面命令里指向的服务器C的8080端口改成了目标站点的目标端口</p><blockquote><p>TODO: 场景存疑, 不可信的网络具体哪里不可信</p></blockquote><p>例如</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ssh</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -L</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 9300:www.baidu.com:443</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> root@[B公网ip]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/DailyNotes/202408201103998.png" alt="image-20240820110355941"></p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202408201103184.png" alt="image-20240820110332092"></p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202408201104861.png" alt="image-20240820110413788"></p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202408201109157.png" alt="image-20240820110913087"></p><p>这里最后没打开, 不过理论上是可以访问这个端口的服务的, 可以看到请求 403 了, 应该是站点有额外的校验之类的, 这里不做继续深究</p><hr><p>这里一般公开站点不会顾虑这些问题, 而且对于这些站点一般有更好的网络混淆方式</p><p>这里以我在自己的腾讯云服务器的67–端口上起的一个 HTTP 服务为例, 个人或小团队写的Web服务可能不会向大厂那样完备, 可以走 SSH 本地端口转发来加密访问此服务的流量, 例如:</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202408201113245.png" alt="image-20240820111340189"></p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202408201117653.png" alt="image-20240820111710597"></p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202408201117040.png" alt="image-20240820111719967"></p><hr><h2 id="远程端口转发-remote-port-forwarding" tabindex="-1"><a class="header-anchor" href="#远程端口转发-remote-port-forwarding"><span>远程端口转发(Remote Port Forwarding)</span></a></h2><blockquote><p>TODO: 加个拓扑</p></blockquote>',35)),a(t,{id:"mermaid-404",code:"eJxLL0osyFDwCeJSAILi0iQI/9mcNU/nbHi6seHp/PnP904ES4KAo4YGRCo8My8lv7w4wNkmqcjOwsDC8Pnq9U/7Fz/Z0fVsTueTHQ1PdqzyCAkJeDan92nXwmc9TU/nrHjW2QCUA5r2tHfhkx3dmppgU1PzUrhQ7X6xf87zFd0QnU9nrnja1grUY2hpBCSfrdsKVsvppKHhk5lXWgFX5QRyx9PWNUBFEHW6hgZ6FSAIlgCbAZOwNNIzNLPQM9QzMjSFOt+IsPNz8pMTczLyi0uAipDdDmY5Kujq6ta4hdcoOIH5TiC+Xc2zrY0v2/trFBwRiuxqgoM9YMqAugHuI6rZ"}),i[6]||(i[6]=s("p",null,"与本地端口转发相对应, 远程端口转发允许你将远程服务器上的一个端口转发到本地计算机上的另一个端口",-1)),i[7]||(i[7]=s("p",null,"这样就可以在远程服务器上访问对应的端口以访问本地服务",-1)),i[8]||(i[8]=s("p",null,"远程端口转发可以用于",-1)),s("ul",null,[s("li",null,[i[0]||(i[0]=e('<p><strong>公开本地服务到互联网</strong>: 本地计算机上运行了一个服务（例如Web服务器、数据库服务），但它无法直接暴露到外网（可能因为你所在的网络没有公共IP或防火墙限制）。通过SSH远程端口转发则可以将这个本地服务暴露给外部网络中的其他设备。</p><p>假设你在本地开发一个Web应用，它运行在本地的 <code>localhost:8080</code>，但是你想让你的同事或客户可以通过互联网访问它。你可以使用SSH远程端口转发来实现这个目标</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ssh</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -R</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 80:localhost:8080</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> user@remote-server.com</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>',3)),a(t,{id:"mermaid-423",code:"eJxLL0osyFDwCeJSAILi0iQI/9mcNU/nbHi6seHp/PnP904ES4KAo4YGRCo8My8lv7w4wNkmqcjOwsDC4Pnq9U/7Fz/Z0fVsTueTHQ1PdqzyCAkJeDan92nXwmc9TU/nrHjW2QCUA5r2tHfhkx3dII05+cmJORn5xSVWICM0NcH2pOalcKG65mnrGqA2iFlPZ64AS3I6aWj4ZOaVVsCFnSBOQTYFzHJU0NXVrdENUrAwsEK1sEbBCazCCaTCrsbCQNfu2dbGl+39umAv1Sg4IgywqwkO9oBpAJoMAI5MeSo="}),i[1]||(i[1]=s("p",null,[s("code",null,"remote-server.com"),l(" 是你可以访问的远程服务器。")],-1)),i[2]||(i[2]=s("p",null,[l("远程服务器上的80端口会将流量转发到你本地的 "),s("code",null,"localhost:8080"),l("，使得其他人通过访问远程服务器的IP和80端口即可访问你本地的Web服务。")],-1))]),i[3]||(i[3]=e('<li><p><strong>穿透NAT或防火墙</strong>: 如果你所在的网络受到NAT或防火墙的限制，外部设备通常无法直接访问你本地的服务或设备。通过SSH远程端口转发，你可以绕过这些限制，将本地服务暴露给外部。</p><p>例如在公司内部网络中，想从家里或外部网络访问公司内部某台设备的服务，但由于NAT或防火墙限制无法直接访问。则可以通过远程端口转发将这个服务通过外部SSH服务器暴露到互联网。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ssh</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -R</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 2022:localhost:22</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> user@remote-server.com</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><p>TODO: 陪图</p></blockquote><p>将远程服务器的2022端口映射到你本地的22端口。然后，你可以从远程服务器通过<code>ssh -p 2022 user@remote-server.com</code>来访问你本地的SSH服务。</p></li><li><p><strong>临时为客户端提供访问权限</strong>: 在一些情况下，你可能想临时让客户端或其他开发人员访问你本地运行的服务，而不需要他们访问整个内部网络。通过远程端口转发，你可以安全地在短时间内提供访问权限。</p><p>例如你在本地运行了一个测试环境的Web应用程序，客户需要验证一些功能，但你不想让他们访问整个公司的网络。你可以通过SSH远程端口转发将测试环境暴露在公共服务器上，并让客户临时访问。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ssh</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -R</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 3000:localhost:3000</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> user@public-server.com</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这样，客户可以通过访问<code>public-server.com:3000</code>来连接到你本地的3000端口服务。</p></li><li><p><strong>远程协作和调试</strong>: 开发者在进行远程协作或调试时，可能需要访问彼此的本地开发环境，而这些环境通常在本地计算机上无法直接从外部访问。通过远程端口转发，开发者可以将他们的本地服务通过SSH隧道暴露给其他团队成员。</p><p>例如你在本地开发了一个REST API，另一个开发者需要测试或调试这个API，但由于网络原因无法直接连接到你的本地环境。你可以通过远程端口转发将API暴露给远程服务器，以便其他开发者访问。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ssh</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -R</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 5000:localhost:5000</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> user@remote-collab-server.com</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这样，远程的开发者可以通过访问<code>remote-collab-server.com:5000</code>来连接到你本地的API服务。</p></li><li><p><strong>远程访问内部设备</strong></p><p>当你在远程工作时，可能需要访问家中或公司内网中的设备，例如打印机、网络存储设备、摄像头等，但这些设备不对外开放。通过远程端口转发，你可以从外部网络访问这些内部设备。</p><p>例如你在家里有一台NAS，但由于家中路由器的限制，外网无法直接访问这台设备。你可以通过SSH远程端口转发，在远程服务器上将NAS的Web管理端口暴露给你自己，以便在外网访问。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ssh</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -R</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 8080:192.168.1.100:80</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> user@remote-server.com</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这个命令会将远程服务器的8080端口映射到你家里NAS的Web管理界面（例如 <code>192.168.1.100:80</code>），使得你可以通过远程服务器访问NAS。</p></li>',4))]),i[9]||(i[9]=e(`<p>总的来说SSH远程端口转发最主要的用途是将本地的服务或设备暴露给远程网络，常用于临时公开服务、穿透NAT或防火墙、远程协作和访问内部设备等场景。</p><blockquote><p>换个角度考虑, 可以把本地服务器暴露给远程服务器, 那么如果远程服务器是个内网服务器的话, 可以将本地的HTTP代理暴露给远程, 远程使用此代理来达成上网的目的, 可以用于内网渗透中让内网断网主机挂DMZ联网主机的HTTP代理来实现上网</p></blockquote><hr><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 远程端口转发</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ssh</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -R</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 远程端口:本地计算机地址:本地端口</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>转发都是源端口<code>port</code> + 目的地址 <code>ip:port</code> 的形式</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 本地端口转发</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ssh</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -L</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 本地端口:远程计算机地址:远程端口</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><hr><p>例如在本地的 9302 端口起个 SimpeHTTPServer, 然后转发远程 <code>100.1.1.131</code> 机器的 <code>9303</code> 端口到本地 <code>127.0.0.1:9302</code></p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ssh</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -R</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 9303:127.0.0.1:9302</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> root@100.1.1.131</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><p>PS: 这里的 <code>127.0.0.1</code> 也可以是本地任意一张网卡的 ip 地址, 因为后面我们起的 SimpleHTTPServer 默认挂在 <code>0.0.0.0</code> 上的, 所以任意网卡地址都可以访问</p></blockquote><p><img src="http://cdn.ayusummer233.top/DailyNotes/202408051623196.png" alt="image-20240805162323134"></p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 本地 9302 端口起 SimpleHTTP 服务</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">python</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -m</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> http.server</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 9302</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/DailyNotes/202408051624629.png" alt="image-20240805162456569"></p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202408051624534.png" alt="image-20240805162446497"></p><hr><p>然后就可以在远程机器访问其 <strong>本地回环地址</strong> 的 <code>9303</code> 端口来访问到本地的 <code>9302</code> 端口上的</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202408051631013.png" alt="image-20240805163113970"></p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202408051632758.png" alt="image-20240805163217723"></p><blockquote><p>相应的如果前面端口转发转发到本地其他网卡上的 <code>9302</code> 端口, 那么在远程主机上访问 <code>9303</code> 端口时, 本地 log 上看到的是对应网卡上的请求</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202408051634961.png" alt="image-20240805163442899"></p></blockquote><hr><h3 id="远程端口转发应用场景-断网主机联网" tabindex="-1"><a class="header-anchor" href="#远程端口转发应用场景-断网主机联网"><span>远程端口转发应用场景-断网主机联网</span></a></h3><p>本地机器可以上网, 内网远程主机无法上网, 可以通过转发远程端口到本地 HTTP 代理服务器挂载的地址来实现远程主机通过远程端口访问本地HTTP代理上网</p><p>例如本地 <code>7890</code> 端口存在一个使用 Clash 起的 HTTP 代理服务, 则可以使用如下命令</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ssh</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -fNR</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 7890:localhost:7890</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [ssh私钥绝对路径] [用户名]@[服务器IP]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><code>-f</code> 后台运行</li><li><code>-N</code> 不执行远程命令, 仅做端口转发</li><li><code>-R</code> 远程端口转发</li></ul><p>如此一来就可以在服务器上使用本地的 Clash 代理了</p><ul><li><code>http代理</code>: <code>http://localhost:7890</code></li><li><code>socks5代理</code>: <code>socks5://localhost:7890</code></li></ul><p>在打内网时可以由此实现断网主机联网的效果</p><hr><p>默认情况下远程端口转发只能绑定在服务器的 localhost 上, 如果想要绑定在 <code>0.0.0.0</code> 的话需要修改 <code>/ect/ssh/sshd_config</code> 将 <code>#GatewayPorts no</code> 修改为 <code>GatewayPorts yes</code> 然后重启 sshd</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> systemctl</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> restart</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> sshd</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>如果之前绑定了端口的话需要一个个中断进程, 或者干脆直接 <code>reboot</code></p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202506111509504.png" alt="image-20250611150931404"></p><hr><h2 id="动态端口转发-dynamic-port-forwarding" tabindex="-1"><a class="header-anchor" href="#动态端口转发-dynamic-port-forwarding"><span>动态端口转发(Dynamic Port Forwarding)</span></a></h2><p>动态端口转发允许你通过SSH创建一个SOCKS代理，从而动态地将流量转发到多个不同的目标地址和端口。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ssh</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -fND</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> localhost:12345</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [私钥路径] root@192.168.1.96</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><p><code>-f</code> 表示在后台运行 ssh 命令, 不占用终端</p></li><li><p><code>-N</code> 表示不执行远程命令,只做端口转发</p></li><li><p><code>-D localhost:12345</code> 表示创建一个动态端口转发, 将本地主机的 12345 端口作为 socks 代理</p><blockquote><p>这里是可以指定本地任一 IP 地址的, 也可以是 <code>0.0.0.0</code> 绑定本地任意 IP 地址</p></blockquote></li><li><p><code>-i [私钥路径]</code> 表示使用指定私钥文件进行身份验证</p></li><li><p><code>root@192.168.1.96</code> 表示以 root 用户登录远程主机 192.168.1.96</p></li></ul><p>这个命令可以使得通过 ssh 隧道访问远程主机上的网络服务, 或者使用远程主机作为代理访问其他网站</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202408051708245.png" alt="image-20230330173345557"></p><p>挂上后命令行会卡在这里 然后 Firefox 配置 socks 5 代理</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202408051708754.png" alt="image-20230330180127369"></p><p>如此这般就可以从本地的 Firefox 挂 96 的代理访问内网其他的服务了</p><p>除此以外还可以再套一层 Burpsuit: <code>BurpSuit -&gt; Proxy Setting -&gt; Network-&gt;Connections-&gt;Socks proxy</code></p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202408051708883.png" alt=""></p><p>配置 BurpSuit http 代理监听:</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202408051708044.png" alt=""></p><p>配置 Firefox http 代理</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202408051708623.png" alt=""></p><hr><h2 id="ssh隧道在渗透场景中的应用" tabindex="-1"><a class="header-anchor" href="#ssh隧道在渗透场景中的应用"><span>SSH隧道在渗透场景中的应用</span></a></h2><ul><li><p><strong>SSH本身</strong></p><ul><li><p><strong>远控</strong>: 在拿下远程主机的shell(反弹Shell/WebShell/…)后可以转向上线C2或者走正常流程链接到远程主机, 例如 RDP/VNC/SSH, 可以选择添加用户或者密钥来使用 SSH 连接到远程主机</p></li><li><p><strong>持久化后门</strong>: 攻击者可以部署SSH后门, 在目标系统商安装恶意SSH服务或配置来允许攻击者在未来无需重新利用漏洞就可以通过 SSH 随时访问该系统</p><p>例如 SSH密钥,修改SSH配置,替换为恶意的SSHServer, 反向SSH</p></li></ul></li><li><p><strong>SSH Tunnel</strong></p><ul><li><p><strong>绕过防火墙限制</strong>:</p><ul><li><p><strong>隐蔽流量</strong>: 攻击者可以通过 SSH 隧道将所有流量加密后传输，从而绕过目标网络的防火墙、入侵检测系统 (IDS) 和入侵防御系统 (IPS)，避免流量被监控或过滤</p><p>例如拿下 DMZ 区域服务器后建立动态端口转发, 然后主机挂本地的 socks 代理来做内网横向, 这样可以绕过 DMZ 区域与外网间的防火墙的防护</p></li><li><p><strong>突破出口限制</strong>: 在某些受限的环境中，防火墙可能只允许特定的端口（如 22 端口）与外部服务器通信。此时，攻击者可以通过 SSH 隧道在 22 端口上传递其他协议的流量，突破出口的网络限制</p><p>例如将内网数据库服务的端口转发出来, 在本地使用数据库管理工具来便捷地操作内网数据库</p></li></ul></li><li><p><strong>横向渗透</strong>: 攻击者在获得对目标主机的控制权后，可以通过 SSH 隧道进一步访问目标网络中的其他内部主机和服务; 同时, 如上文提到的那样, 这样操作顺便可以绕过边界防火墙的防护</p></li><li><p><strong>反向Shell</strong>:</p><ul><li>例如拿下了 DMZ 主机的Webshell, 但是SSH不出网, 那么可以在DMZ主机上连接攻击侧的SSH服务做远程端口转发将本地的22端口转发出来, 攻击侧通过转发端口来连接 DMZ 的 SSH服务</li><li>做横向时, 内网主机无法直接与外网攻击机通信, 可以通过 DMZ 区域主机做跳板来将目标主机的 22 端口转发出来</li></ul></li><li><p><strong>数据渗透</strong>: 攻击者可以使用 SSH 隧道来窃取数据，将目标系统中的敏感数据通过加密的 SSH 隧道传输回攻击者的控制系统。</p><p>攻击者直接SSH目标主机会在连接记录上留下明显的攻击IP, 此时可以通过在目标主机上做远程端口转发连接攻击机绑定目标主机的22端口, 这样SSH登录日志里记录的只有目标主机自己的ip</p><p>例如:</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202408201621906.png" alt="image-20240820162132725"></p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202408201622312.png" alt="image-20240820162251201"></p><p>可以看到登录ip已经是 <code>127.0.0.1</code> 了</p></li><li><p><strong>隐蔽命令与控制通信 (C2 Communication)</strong></p><p>SSH 隧道可以用于命令与控制 (C2) 基础设施的通信，通过加密流量隐藏攻击者的活动。这样可以减少被检测的可能性。</p></li></ul></li></ul>`,51))])}const m=n(h,[["render",d],["__file","SSH隧道.html.vue"]]),u=JSON.parse('{"path":"/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E4%BB%A3%E7%90%86%E8%BD%AC%E5%8F%91/SSH%E9%9A%A7%E9%81%93.html","title":"SSH 隧道","lang":"zh-CN","frontmatter":{"category":"网络安全","tags":["内网渗透","代理转发","SSH隧道"],"excerpt":"SSH 隧道是 SSH 中的一种机制，它能够将其他 TCP 端口的网络数据通过 SSH 连接来转发，并且自动提供了相应的加密及解密服务","description":"SSH 隧道 SSH 隧道 本地端口转发(Local Port Forwarding) 本地端口转发应用场景-访问受限服务 本地端口转发应用场景-安全的Web浏览 远程端口转发(Remote Port Forwarding) 远程端口转发应用场景-断网主机联网 动态端口转发(Dynamic Port Forwarding) SSH隧道在渗透场景中的应用","head":[["meta",{"property":"og:url","content":"https://233official.github.io/dailynotes/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E4%BB%A3%E7%90%86%E8%BD%AC%E5%8F%91/SSH%E9%9A%A7%E9%81%93.html"}],["meta",{"property":"og:site_name","content":"DailyNotes"}],["meta",{"property":"og:title","content":"SSH 隧道"}],["meta",{"property":"og:description","content":"SSH 隧道 SSH 隧道 本地端口转发(Local Port Forwarding) 本地端口转发应用场景-访问受限服务 本地端口转发应用场景-安全的Web浏览 远程端口转发(Remote Port Forwarding) 远程端口转发应用场景-断网主机联网 动态端口转发(Dynamic Port Forwarding) SSH隧道在渗透场景中的应用"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"http://cdn.ayusummer233.top/DailyNotes/202408051521099.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-11T09:42:39.000Z"}],["meta",{"property":"article:tag","content":"内网渗透"}],["meta",{"property":"article:tag","content":"代理转发"}],["meta",{"property":"article:tag","content":"SSH隧道"}],["meta",{"property":"article:modified_time","content":"2025-06-11T09:42:39.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"SSH 隧道\\",\\"image\\":[\\"http://cdn.ayusummer233.top/DailyNotes/202408051521099.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202408051510284.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202408051523511.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202408051057532.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202408201033330.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202408201037469.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202408201038573.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202408201049327.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202408201050119.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202408201052485.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202408201413568.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202408201103998.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202408201103184.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202408201104861.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202408201109157.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202408201113245.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202408201117653.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202408201117040.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202408051623196.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202408051624629.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202408051624534.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202408051631013.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202408051632758.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202408051634961.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202506111509504.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202408051708245.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202408051708754.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202408051708883.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202408051708044.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202408051708623.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202408201621906.png\\",\\"http://cdn.ayusummer233.top/DailyNotes/202408201622312.png\\"],\\"dateModified\\":\\"2025-06-11T09:42:39.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"咸鱼型233\\",\\"url\\":\\"https://233official.github.io/dailynotes/\\"}]}"]],"date":"2024-08-06T07:37:40.000Z"},"headers":[{"level":2,"title":"本地端口转发(Local Port Forwarding)","slug":"本地端口转发-local-port-forwarding","link":"#本地端口转发-local-port-forwarding","children":[{"level":3,"title":"本地端口转发应用场景-访问受限服务","slug":"本地端口转发应用场景-访问受限服务","link":"#本地端口转发应用场景-访问受限服务","children":[]},{"level":3,"title":"本地端口转发应用场景-安全的Web浏览","slug":"本地端口转发应用场景-安全的web浏览","link":"#本地端口转发应用场景-安全的web浏览","children":[]}]},{"level":2,"title":"远程端口转发(Remote Port Forwarding)","slug":"远程端口转发-remote-port-forwarding","link":"#远程端口转发-remote-port-forwarding","children":[{"level":3,"title":"远程端口转发应用场景-断网主机联网","slug":"远程端口转发应用场景-断网主机联网","link":"#远程端口转发应用场景-断网主机联网","children":[]}]},{"level":2,"title":"动态端口转发(Dynamic Port Forwarding)","slug":"动态端口转发-dynamic-port-forwarding","link":"#动态端口转发-dynamic-port-forwarding","children":[]},{"level":2,"title":"SSH隧道在渗透场景中的应用","slug":"ssh隧道在渗透场景中的应用","link":"#ssh隧道在渗透场景中的应用","children":[]}],"git":{"createdTime":1722929860000,"updatedTime":1749634959000,"contributors":[{"name":"233Mac","username":"233Mac","email":"ayusummer233@vip.qq.com","commits":3,"url":"https://github.com/233Mac"},{"name":"ayusummer233","username":"ayusummer233","email":"ayusummer233@gmail.com","commits":3,"url":"https://github.com/ayusummer233"},{"name":"233PC","username":"233PC","email":"ayusummer233@gmail.com","commits":1,"url":"https://github.com/233PC"}]},"readingTime":{"minutes":19.84,"words":5951},"filePathRelative":"网络安全/内网渗透/代理转发/SSH隧道.md","localizedDate":"2024年8月6日","autoDesc":true}');export{m as comp,u as data};
