import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,a,o}from"./app-CFt4SMiv.js";const n={};function d(c,e){return o(),r("div",null,e[0]||(e[0]=[a(`<h1 id="正则表达式" tabindex="-1"><a class="header-anchor" href="#正则表达式"><span>正则表达式</span></a></h1><h2 id="工具网站" tabindex="-1"><a class="header-anchor" href="#工具网站"><span>工具网站</span></a></h2><ul><li><p><a href="https://github.com/ziishaned/learn-regex/blob/master/translations/README-cn.md" target="_blank" rel="noopener noreferrer">learn-regex/README-cn.md at master · ziishaned/learn-regex (github.com)</a></p><p>简单方法学正则</p><p><img src="http://cdn.ayusummer233.top/img/202211011629220.png" alt="image-20221101162934081"></p></li><li><p><a href="https://jex.im/regulex/#!flags=&amp;re=%5E(a%7Cb)*%3F%24" target="_blank" rel="noopener noreferrer">Regulex：JavaScript Regular Expression Visualizer (jex.im)</a></p><p>可视化正则表达式</p><p><img src="http://cdn.ayusummer233.top/img/202211011632585.png" alt="image-20221101163247485"></p></li><li><p><a href="https://any86.github.io/any-rule/" target="_blank" rel="noopener noreferrer">正则大全 (any86.github.io)</a></p><p>常用正则表达式大全</p><p><img src="http://cdn.ayusummer233.top/img/202211011612097.png" alt="image-20221101161159963"></p></li><li><p><a href="https://www.regexpal.com/" target="_blank" rel="noopener noreferrer">Regex Tester - Javascript, PCRE, PHP (regexpal.com)</a></p><p>正则表达式调试及练习示例</p><p><img src="http://cdn.ayusummer233.top/img/202211011620619.png" alt="image-20221101162056545"></p></li><li><p><a href="https://regex101.com/" target="_blank" rel="noopener noreferrer">regex101: build, test, and debug regex</a></p><p>多语言支持,构建,调试并共享正则表达式</p><p><img src="http://cdn.ayusummer233.top/img/202211011628331.png" alt="image-20221101162828175"></p></li><li><p><a href="https://regexr.com/" target="_blank" rel="noopener noreferrer">RegExr: Learn, Build, &amp; Test RegEx</a></p><p>线上正则表达式学习利器</p><p><img src="http://cdn.ayusummer233.top/img/202211011630448.png" alt="image-20221101163045286"></p></li></ul><hr><h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><blockquote><p><a href="https://github.com/ziishaned/learn-regex/blob/master/translations/README-cn.md#%E4%BB%80%E4%B9%88%E6%98%AF%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F" target="_blank" rel="noopener noreferrer">learn-regex/README-cn.md at master · ziishaned/learn-regex (github.com)</a></p></blockquote><ul><li>正则表达式是一组由字母和符号组成的特殊文本，它可以用来从文本中找出满足你想要的格式的句子。</li><li>正则表达式是从左到右匹配主体字符串的</li><li>“Regular expression”这个词比较拗口，我们常使用缩写的术语“regex”或“regexp”。</li><li>正则表达式可以从一个基础字符串中根据一定的匹配模式替换文本中的字符串、验证表单、提取字符串等等。</li></ul><p>想象你正在写一个应用，然后你想设定一个用户命名的规则，让用户名<mark>包含字符、数字、下划线和连字符，以及限制字符的个数</mark>，好让名字看起来没那么丑。 我们使用以下正则表达式来验证一个用户名：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>^[a-z0-9_-]{3,15}$</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/img/202211020913645.png" alt="image-20221102090422113"></p><p><img src="http://cdn.ayusummer233.top/img/202211021056995.png" alt="image-20221102105622779"></p><p>以上的正则表达式可以接受 <code>john_doe</code>、<code>jo-hn_doe</code>、<code>john12_as</code>。 但不匹配<code>Jo</code>，因为它包含了大写的字母而且太短了。</p><hr><h2 id="_1-基本匹配" tabindex="-1"><a class="header-anchor" href="#_1-基本匹配"><span>1. 基本匹配</span></a></h2><p>正则表达式其实就是在执行搜索时的格式，它由一些字母和数字组合而成。 例如：一个正则表达式 <code>the</code>，它表示一个规则：由字母<code>t</code>开始，接着是<code>h</code>，再接着是<code>e</code>。</p><p>&quot;the&quot; =&gt; The fat cat sat on <code>the</code> mat.</p><p><a href="https://regex101.com/r/dmRygT/1" target="_blank" rel="noopener noreferrer">在线练习-regex</a></p><p>正则表达式<code>123</code>匹配字符串<code>123</code>。它逐个字符的与输入的正则表达式做比较。</p><p>正则表达式是大小写敏感的，所以<code>The</code>不会匹配<code>the</code>。</p><p>&quot;The&quot; =&gt; <code>The</code> fat cat sat on the mat.</p><p><a href="https://regex101.com/r/1paXsy/1" target="_blank" rel="noopener noreferrer">在线练习</a></p><hr><h2 id="_2-元字符" tabindex="-1"><a class="header-anchor" href="#_2-元字符"><span>2. 元字符</span></a></h2><p>正则表达式主要依赖于元字符。 元字符不代表他们本身的字面意思，他们都有特殊的含义。一些元字符写在方括号中的时候有一些特殊的意思。以下是一些元字符的介绍：</p><table><thead><tr><th style="text-align:center;">元字符</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center;">.</td><td>句号匹配任意单个字符除了换行符。</td></tr><tr><td style="text-align:center;">[ ]</td><td>字符种类。匹配方括号内的任意字符。</td></tr><tr><td style="text-align:center;">[^ ]</td><td>否定的字符种类。匹配除了方括号里的任意字符</td></tr><tr><td style="text-align:center;">*</td><td>匹配&gt;=0个重复的在*号之前的字符。</td></tr><tr><td style="text-align:center;">+</td><td>匹配&gt;=1个重复的+号前的字符。</td></tr><tr><td style="text-align:center;">?</td><td>标记?之前的字符为可选.</td></tr><tr><td style="text-align:center;">{n,m}</td><td>匹配num个大括号之前的字符或字符集 (n &lt;= num &lt;= m).</td></tr><tr><td style="text-align:center;">(xyz)</td><td>字符集，匹配与 xyz 完全相等的字符串.</td></tr><tr><td style="text-align:center;">|</td><td>或运算符，匹配符号前或后的字符.</td></tr><tr><td style="text-align:center;">\\</td><td>转义字符,用于匹配一些保留的字符 <code>[ ] ( ) { } . * + ? ^ $ \\ |</code></td></tr><tr><td style="text-align:center;">^</td><td>从开始行开始匹配.</td></tr><tr><td style="text-align:center;">$</td><td>从末端开始匹配.</td></tr></tbody></table><h2 id="_2-1-点运算符" tabindex="-1"><a class="header-anchor" href="#_2-1-点运算符"><span>2.1 点运算符 <code>.</code></span></a></h2><p><code>.</code>是元字符中最简单的例子。 <code>.</code>匹配任意单个字符，但不匹配换行符。 例如，表达式<code>.ar</code>匹配一个任意字符后面跟着是<code>a</code>和<code>r</code>的字符串。</p><p>&quot;.ar&quot; =&gt; The <code>car</code> <code>par</code>ked in the <code>gar</code>age</p><p><a href="https://regex101.com/r/xc9GkU/1" target="_blank" rel="noopener noreferrer">在线练习</a></p><hr><h2 id="_2-2-字符集" tabindex="-1"><a class="header-anchor" href="#_2-2-字符集"><span>2.2 字符集</span></a></h2><p>字符集也叫做字符类。 方括号用来指定一个字符集。 在方括号中使用连字符来指定字符集的范围。 在方括号中的字符集不关心顺序。 例如，表达式<code>[Tt]he</code> 匹配 <code>the</code> 和 <code>The</code>。</p><p>&quot;[Tt]he&quot; =&gt; <code>The</code> car parked in <code>the</code> garage.</p><p><a href="https://regex101.com/r/2ITLQ4/1" target="_blank" rel="noopener noreferrer">在线练习</a></p><p>方括号的句号就表示句号。 表达式 <code>ar[.]</code> 匹配 <code>ar.</code>字符串</p><p>&quot;ar[.]&quot; =&gt; A garage is a good place to park a c<code>ar</code>.</p><p><a href="https://regex101.com/r/wL3xtE/1" target="_blank" rel="noopener noreferrer">在线练习</a></p><hr><h3 id="_2-2-1-否定字符集" tabindex="-1"><a class="header-anchor" href="#_2-2-1-否定字符集"><span>2.2.1 否定字符集</span></a></h3><p>一般来说 <code>^</code> 表示一个字符串的开头，但它用在一个方括号的开头的时候，它表示这个字符集是否定的。 例如，表达式<code>[^c]ar</code> 匹配一个后面跟着<code>ar</code>的除了<code>c</code>的任意字符。</p><pre>&quot;[^c]ar&quot; =&gt; The car <a href="#learn-regex"><strong>par</strong></a>ked in the <a href="#learn-regex"><strong>gar</strong></a>age.
</pre><p><a href="https://regex101.com/r/nNNlq3/1" target="_blank" rel="noopener noreferrer">在线练习</a></p><hr><h2 id="_2-3-重复次数" tabindex="-1"><a class="header-anchor" href="#_2-3-重复次数"><span>2.3 重复次数</span></a></h2><p>后面跟着元字符 <code>+</code>，<code>*</code> or <code>?</code> 的，用来指定匹配子模式的次数。 这些元字符在不同的情况下有着不同的意思。</p><hr><h3 id="_2-3-1-号" tabindex="-1"><a class="header-anchor" href="#_2-3-1-号"><span>2.3.1 <code>*</code> 号</span></a></h3><p><code>*</code>号匹配 在<code>*</code>之前的字符出现<code>大于等于0</code>次。 例如，表达式 <code>a*</code> 匹配0或更多个以a开头的字符。表达式<code>[a-z]*</code> 匹配一个行中所有以小写字母开头的字符串。</p><pre>&quot;[a-z]*&quot; =&gt; T<a href="#learn-regex"><strong>he</strong></a> <a href="#learn-regex"><strong>car</strong></a> <a href="#learn-regex"><strong>parked</strong></a> <a href="#learn-regex"><strong>in</strong></a> <a href="#learn-regex"><strong>the</strong></a> <a href="#learn-regex"><strong>garage</strong></a> #21.
</pre><p><a href="https://regex101.com/r/7m8me5/1" target="_blank" rel="noopener noreferrer">在线练习</a></p><p><code>*</code>字符和<code>.</code>字符搭配可以匹配所有的字符<code>.*</code>。 <code>*</code>和表示匹配空格的符号<code>\\s</code>连起来用，如表达式<code>\\s*cat\\s*</code>匹配0或更多个空格开头和0或更多个空格结尾的cat字符串。</p><pre>&quot;\\s*cat\\s*&quot; =&gt; The fat<a href="#learn-regex"><strong> cat </strong></a>sat on the con<a href="#learn-regex"><strong>cat</strong></a>enation.
</pre><p><a href="https://regex101.com/r/gGrwuz/1" target="_blank" rel="noopener noreferrer">在线练习</a></p><hr><h3 id="_2-3-2-号" tabindex="-1"><a class="header-anchor" href="#_2-3-2-号"><span>2.3.2 <code>+</code> 号</span></a></h3><p><code>+</code>号匹配<code>+</code>号之前的字符出现 &gt;=1 次。 例如表达式<code>c.+t</code> 匹配以首字母<code>c</code>开头以<code>t</code>结尾，中间跟着至少一个字符的字符串。</p><pre>&quot;c.+t&quot; =&gt; The fat <a href="#learn-regex"><strong>cat sat on the mat</strong></a>.
</pre><p><a href="https://regex101.com/r/Dzf9Aa/1" target="_blank" rel="noopener noreferrer">在线练习</a></p><hr><h3 id="_2-3-3-号" tabindex="-1"><a class="header-anchor" href="#_2-3-3-号"><span>2.3.3 <code>?</code> 号</span></a></h3><p>在正则表达式中元字符 <code>?</code> 标记在符号前面的字符为可选，即出现 0 或 1 次。 例如，表达式 <code>[T]?he</code> 匹配字符串 <code>he</code> 和 <code>The</code>。</p><pre>&quot;[T]he&quot; =&gt; <a href="#learn-regex"><strong>The</strong></a> car is parked in the garage.
</pre><p><a href="https://regex101.com/r/cIg9zm/1" target="_blank" rel="noopener noreferrer">在线练习</a></p><pre>&quot;[T]?he&quot; =&gt; <a href="#learn-regex"><strong>The</strong></a> car is parked in t<a href="#learn-regex"><strong>he</strong></a> garage.
</pre><p><a href="https://regex101.com/r/kPpO2x/1" target="_blank" rel="noopener noreferrer">在线练习</a></p><hr><h2 id="_2-4-号" tabindex="-1"><a class="header-anchor" href="#_2-4-号"><span>2.4 <code>{}</code> 号</span></a></h2><p>在正则表达式中 <code>{}</code> 是一个量词，常用来限定一个或一组字符可以重复出现的次数。 例如， 表达式 <code>[0-9]{2,3}</code> 匹配最少 2 位最多 3 位 0~9 的数字。</p><pre>&quot;[0-9]{2,3}&quot; =&gt; The number was 9.<a href="#learn-regex"><strong>999</strong></a>7 but we rounded it off to <a href="#learn-regex"><strong>10</strong></a>.0.
</pre><p><a href="https://regex101.com/r/juM86s/1" target="_blank" rel="noopener noreferrer">在线练习</a></p><p>我们可以省略第二个参数。 例如，<code>[0-9]{2,}</code> 匹配至少两位 0~9 的数字。</p><pre>&quot;[0-9]{2,}&quot; =&gt; The number was 9.<a href="#learn-regex"><strong>9997</strong></a> but we rounded it off to <a href="#learn-regex"><strong>10</strong></a>.0.
</pre><p><a href="https://regex101.com/r/Gdy4w5/1" target="_blank" rel="noopener noreferrer">在线练习</a></p><p>如果逗号也省略掉则表示重复固定的次数。 例如，<code>[0-9]{3}</code> 匹配3位数字</p><pre>&quot;[0-9]{3}&quot; =&gt; The number was 9.<a href="#learn-regex"><strong>999</strong></a>7 but we rounded it off to 10.0.
</pre><p><a href="https://regex101.com/r/Sivu30/1" target="_blank" rel="noopener noreferrer">在线练习</a></p><hr><h2 id="_2-5-特征标群" tabindex="-1"><a class="header-anchor" href="#_2-5-特征标群"><span>2.5 <code>(...)</code> 特征标群</span></a></h2><p>特征标群是一组写在 <code>(...)</code> 中的子模式。<code>(...)</code> 中包含的内容将会被看成一个整体，和数学中小括号( ) 的作用相同。例如, 表达式 <code>(ab)*</code> 匹配连续出现 0 或更多个 <code>ab</code>。如果没有使用 <code>(...)</code> ，那么表达式 <code>ab*</code> 将匹配连续出现 0 或更多个 <code>b</code> 。再比如之前说的 <code>{}</code> 是用来表示前面一个字符出现指定次数。但如果在 <code>{}</code> 前加上特征标群 <code>(...)</code> 则表示整个标群内的字符重复 N 次。</p><p>我们还可以在 <code>()</code> 中用或字符 <code>|</code> 表示或。例如，<code>(c|g|p)ar</code> 匹配 <code>car</code> 或 <code>gar</code> 或 <code>par</code>.</p><pre>&quot;(c|g|p)ar&quot; =&gt; The <a href="#learn-regex"><strong>car</strong></a> is <a href="#learn-regex"><strong>par</strong></a>ked in the <a href="#learn-regex"><strong>gar</strong></a>age.
</pre><p><a href="https://regex101.com/r/tUxrBG/1" target="_blank" rel="noopener noreferrer">在线练习</a></p><hr><h2 id="_2-6-或运算符" tabindex="-1"><a class="header-anchor" href="#_2-6-或运算符"><span>2.6 <code>|</code> 或运算符</span></a></h2><p>或运算符就表示或，用作判断条件。</p><p>例如 <code>(T|t)he|car</code> 匹配 <code>(T|t)he</code> 或 <code>car</code>。</p><pre>&quot;(T|t)he|car&quot; =&gt; <a href="#learn-regex"><strong>The</strong></a> <a href="#learn-regex"><strong>car</strong></a> is parked in <a href="#learn-regex"><strong>the</strong></a> garage.
</pre><p><a href="https://regex101.com/r/fBXyX0/1" target="_blank" rel="noopener noreferrer">在线练习</a></p><hr><h2 id="_2-7-转码特殊字符" tabindex="-1"><a class="header-anchor" href="#_2-7-转码特殊字符"><span>2.7 转码特殊字符</span></a></h2><p>反斜线 <code>\\</code> 在表达式中用于转码紧跟其后的字符。用于指定 <code>{ } [ ] / \\ + * . $ ^ | ?</code> 这些特殊字符。如果想要匹配这些特殊字符则要在其前面加上反斜线 <code>\\</code>。</p><p>例如 <code>.</code> 是用来匹配除换行符外的所有字符的。如果想要匹配句子中的 <code>.</code> 则要写成 <code>\\.</code> 以下这个例子 <code>\\.?</code>是选择性匹配<code>.</code></p><pre>&quot;(f|c|m)at\\.?&quot; =&gt; The <a href="#learn-regex"><strong>fat</strong></a> <a href="#learn-regex"><strong>cat</strong></a> sat on the <a href="#learn-regex"><strong>mat.</strong></a>
</pre><p><a href="https://regex101.com/r/DOc5Nu/1" target="_blank" rel="noopener noreferrer">在线练习</a></p><hr><h2 id="_2-8-锚点" tabindex="-1"><a class="header-anchor" href="#_2-8-锚点"><span>2.8 锚点</span></a></h2><p>在正则表达式中，想要匹配指定开头或结尾的字符串就要使用到锚点。<code>^</code> 指定开头，<code>$</code> 指定结尾。</p><hr><h3 id="_2-8-1-号" tabindex="-1"><a class="header-anchor" href="#_2-8-1-号"><span>2.8.1 <code>^</code> 号</span></a></h3><p><code>^</code> 用来检查匹配的字符串是否在所匹配字符串的开头。</p><p>例如，在 <code>abc</code> 中使用表达式 <code>^a</code> 会得到结果 <code>a</code>。但如果使用 <code>^b</code> 将匹配不到任何结果。因为在字符串 <code>abc</code> 中并不是以 <code>b</code> 开头。</p><p>例如，<code>^(T|t)he</code> 匹配以 <code>The</code> 或 <code>the</code> 开头的字符串。</p><pre>&quot;(T|t)he&quot; =&gt; <a href="#learn-regex"><strong>The</strong></a> car is parked in <a href="#learn-regex"><strong>the</strong></a> garage.
</pre><p><a href="https://regex101.com/r/5ljjgB/1" target="_blank" rel="noopener noreferrer">在线练习</a></p><pre>&quot;^(T|t)he&quot; =&gt; <a href="#learn-regex"><strong>The</strong></a> car is parked in the garage.
</pre><p><a href="https://regex101.com/r/jXrKne/1" target="_blank" rel="noopener noreferrer">在线练习</a></p><hr><h3 id="_2-8-2-号" tabindex="-1"><a class="header-anchor" href="#_2-8-2-号"><span>2.8.2 <code>$</code> 号</span></a></h3><p>同理于 <code>^</code> 号，<code>$</code> 号用来匹配字符是否是最后一个。</p><p>例如，<code>(at\\.)$</code> 匹配以 <code>at.</code> 结尾的字符串。</p><pre>&quot;(at\\.)&quot; =&gt; The fat c<a href="#learn-regex"><strong>at.</strong></a> s<a href="#learn-regex"><strong>at.</strong></a> on the m<a href="#learn-regex"><strong>at.</strong></a>
</pre><p><a href="https://regex101.com/r/y4Au4D/1" target="_blank" rel="noopener noreferrer">在线练习</a></p><pre>&quot;(at\\.)$&quot; =&gt; The fat cat. sat. on the m<a href="#learn-regex"><strong>at.</strong></a>
</pre><p><a href="https://regex101.com/r/t0AkOd/1" target="_blank" rel="noopener noreferrer">在线练习</a></p><hr><h2 id="_3-简写字符集" tabindex="-1"><a class="header-anchor" href="#_3-简写字符集"><span>3. 简写字符集</span></a></h2><p>正则表达式提供一些常用的字符集简写。如下:</p><table><thead><tr><th style="text-align:center;">简写</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center;">.</td><td>除换行符外的所有字符</td></tr><tr><td style="text-align:center;">\\w</td><td>匹配所有字母数字，等同于 <code>[a-zA-Z0-9_]</code></td></tr><tr><td style="text-align:center;">\\W</td><td>匹配所有非字母数字，即符号，等同于： <code>[^\\w]</code></td></tr><tr><td style="text-align:center;">\\d</td><td>匹配数字： <code>[0-9]</code></td></tr><tr><td style="text-align:center;">\\D</td><td>匹配非数字： <code>[^\\d]</code></td></tr><tr><td style="text-align:center;">\\s</td><td>匹配所有空格字符，等同于： <code>[\\t\\n\\f\\r\\p{Z}]</code></td></tr><tr><td style="text-align:center;">\\S</td><td>匹配所有非空格字符： <code>[^\\s]</code></td></tr><tr><td style="text-align:center;">\\f</td><td>匹配一个换页符</td></tr><tr><td style="text-align:center;">\\n</td><td>匹配一个换行符</td></tr><tr><td style="text-align:center;">\\r</td><td>匹配一个回车符</td></tr><tr><td style="text-align:center;">\\t</td><td>匹配一个制表符</td></tr><tr><td style="text-align:center;">\\v</td><td>匹配一个垂直制表符</td></tr><tr><td style="text-align:center;">\\p</td><td>匹配 CR/LF(等同于 <code>\\r\\n</code>) ，用来匹配 DOS 行终止符</td></tr></tbody></table><hr><h2 id="_4-零宽度断言-前后预查" tabindex="-1"><a class="header-anchor" href="#_4-零宽度断言-前后预查"><span>4. 零宽度断言(前后预查)</span></a></h2><p>先行断言和后发断言(合称 lookaround) 都属于<strong>非捕获组</strong>(用于匹配模式，但不包括在匹配列表中) 。当我们需要一个模式的前面或后面有另一个特定的模式时，就可以使用它们。</p><p>例如，我们希望从下面的输入字符串 <code>$4.44</code> 和 <code>$10.88</code> 中获得所有以 <code>$</code> 字符开头的数字，我们将使用以下的正则表达式 <code>(?&lt;=\\$)[0-9\\.]*</code>。意思是：获取所有包含 <code>.</code> 并且前面是 <code>$</code> 的数字。</p><p>零宽度断言如下：</p><table><thead><tr><th style="text-align:center;">符号</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center;">?=</td><td>正先行断言-存在</td></tr><tr><td style="text-align:center;">?!</td><td>负先行断言-排除</td></tr><tr><td style="text-align:center;">?&lt;=</td><td>正后发断言-存在</td></tr><tr><td style="text-align:center;">?&lt;!</td><td>负后发断言-排除</td></tr></tbody></table><hr><h3 id="_4-1-正先行断言" tabindex="-1"><a class="header-anchor" href="#_4-1-正先行断言"><span>4.1 <code>?=...</code> 正先行断言</span></a></h3><p><code>?=...</code> 正先行断言，表示第一部分表达式之后必须跟着 <code>?=...</code>定义的表达式。</p><p>返回结果只包含满足匹配条件的第一部分表达式。 定义一个正先行断言要使用 <code>()</code>。在括号内部使用一个问号和等号： <code>(?=...)</code>。</p><p>正先行断言的内容写在括号中的等号后面。 例如，表达式 <code>(T|t)he(?=\\sfat)</code> 匹配 <code>The</code> 和 <code>the</code>，在括号中我们又定义了正先行断言 <code>(?=\\sfat)</code> ，即 <code>The</code> 和 <code>the</code> 后面紧跟着 <code>(空格)fat</code>。</p><pre>&quot;(T|t)he(?=\\sfat)&quot; =&gt; <a href="#learn-regex"><strong>The</strong></a> fat cat sat on the mat.
</pre><p><a href="https://regex101.com/r/IDDARt/1" target="_blank" rel="noopener noreferrer">在线练习</a></p><hr><h3 id="_4-2-负先行断言" tabindex="-1"><a class="header-anchor" href="#_4-2-负先行断言"><span>4.2 <code>?!...</code> 负先行断言</span></a></h3><p>负先行断言 <code>?!</code> 用于筛选所有匹配结果，筛选条件为 其后不跟随着断言中定义的格式。 <code>正先行断言</code> 定义和 <code>负先行断言</code> 一样，区别就是 <code>=</code> 替换成 <code>!</code> 也就是 <code>(?!...)</code>。</p><p>表达式 <code>(T|t)he(?!\\sfat)</code> 匹配 <code>The</code> 和 <code>the</code>，且其后不跟着 <code>(空格)fat</code>。</p><pre>&quot;(T|t)he(?!\\sfat)&quot; =&gt; The fat cat sat on <a href="#learn-regex"><strong>the</strong></a> mat.
</pre><p><a href="https://regex101.com/r/V32Npg/1" target="_blank" rel="noopener noreferrer">在线练习</a></p><hr><h3 id="_4-3-正后发断言" tabindex="-1"><a class="header-anchor" href="#_4-3-正后发断言"><span>4.3 <code>?&lt;= ...</code> 正后发断言</span></a></h3><p>正后发断言 记作<code>(?&lt;=...)</code> 用于筛选所有匹配结果，筛选条件为 其前跟随着断言中定义的格式。 例如，表达式 <code>(?&lt;=(T|t)he\\s)(fat|mat)</code> 匹配 <code>fat</code> 和 <code>mat</code>，且其前跟着 <code>The</code> 或 <code>the</code>。</p><pre>&quot;(?&lt;=(T|t)he\\s)(fat|mat)&quot; =&gt; The <a href="#learn-regex"><strong>fat</strong></a> cat sat on the <a href="#learn-regex"><strong>mat</strong></a>.
</pre><p><a href="https://regex101.com/r/avH165/1" target="_blank" rel="noopener noreferrer">在线练习</a></p><hr><h3 id="_4-4-负后发断言" tabindex="-1"><a class="header-anchor" href="#_4-4-负后发断言"><span>4.4 <code>?&lt;!...</code> 负后发断言</span></a></h3><p>负后发断言 记作 <code>(?&lt;!...)</code> 用于筛选所有匹配结果，筛选条件为 其前不跟随着断言中定义的格式。 例如，表达式 <code>(?&lt;!(T|t)he\\s)(cat)</code> 匹配 <code>cat</code>，且其前不跟着 <code>The</code> 或 <code>the</code>。</p><pre>&quot;(?&lt;!(T|t)he\\s)(cat)&quot; =&gt; The cat sat on <a href="#learn-regex"><strong>cat</strong></a>.
</pre><p><a href="https://regex101.com/r/8Efx5G/1" target="_blank" rel="noopener noreferrer">在线练习</a></p><hr><h2 id="_5-标志" tabindex="-1"><a class="header-anchor" href="#_5-标志"><span>5. 标志</span></a></h2><p>标志也叫模式修正符，因为它可以用来修改表达式的搜索结果。 这些标志可以任意的组合使用，它也是整个正则表达式的一部分。</p><table><thead><tr><th style="text-align:center;">标志</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center;">i</td><td>忽略大小写。</td></tr><tr><td style="text-align:center;">g</td><td>全局搜索。</td></tr><tr><td style="text-align:center;">m</td><td>多行修饰符：锚点元字符 <code>^</code> <code>$</code> 工作范围在每行的起始。</td></tr></tbody></table><hr><h3 id="_5-1-忽略大小写-case-insensitive" tabindex="-1"><a class="header-anchor" href="#_5-1-忽略大小写-case-insensitive"><span>5.1 忽略大小写 (Case Insensitive)</span></a></h3><p>修饰语 <code>i</code> 用于忽略大小写。 例如，表达式 <code>/The/gi</code> 表示在全局搜索 <code>The</code>，在后面的 <code>i</code> 将其条件修改为忽略大小写，则变成搜索 <code>the</code> 和 <code>The</code>，<code>g</code> 表示全局搜索。</p><pre>&quot;The&quot; =&gt; <a href="#learn-regex"><strong>The</strong></a> fat cat sat on the mat.
</pre><p><a href="https://regex101.com/r/dpQyf9/1" target="_blank" rel="noopener noreferrer">在线练习</a></p><pre>&quot;/The/gi&quot; =&gt; <a href="#learn-regex"><strong>The</strong></a> fat cat sat on <a href="#learn-regex"><strong>the</strong></a> mat.
</pre><p><a href="https://regex101.com/r/ahfiuh/1" target="_blank" rel="noopener noreferrer">在线练习</a></p><hr><h3 id="_5-2-全局搜索-global-search" tabindex="-1"><a class="header-anchor" href="#_5-2-全局搜索-global-search"><span>5.2 全局搜索 (Global search)</span></a></h3><p>修饰符 <code>g</code> 常用于执行一个全局搜索匹配，即(不仅仅返回第一个匹配的，而是返回全部) 。 例如，表达式 <code>/.(at)/g</code> 表示搜索 任意字符(除了换行) + <code>at</code>，并返回全部结果。</p><pre>&quot;/.(at)/&quot; =&gt; The <a href="#learn-regex"><strong>fat</strong></a> cat sat on the mat.
</pre><p><a href="https://regex101.com/r/jnk6gM/1" target="_blank" rel="noopener noreferrer">在线练习</a></p><pre>&quot;/.(at)/g&quot; =&gt; The <a href="#learn-regex"><strong>fat</strong></a> <a href="#learn-regex"><strong>cat</strong></a> <a href="#learn-regex"><strong>sat</strong></a> on the <a href="#learn-regex"><strong>mat</strong></a>.
</pre><p><a href="https://regex101.com/r/dO1nef/1" target="_blank" rel="noopener noreferrer">在线练习</a></p><hr><h3 id="_5-3-多行修饰符-multiline" tabindex="-1"><a class="header-anchor" href="#_5-3-多行修饰符-multiline"><span>5.3 多行修饰符 (Multiline)</span></a></h3><p>多行修饰符 <code>m</code> 常用于执行一个多行匹配。</p><p>像之前介绍的 <code>(^,$)</code> 用于检查格式是否是在待检测字符串的开头或结尾。但我们如果想要它在每行的开头和结尾生效，我们需要用到多行修饰符 <code>m</code>。</p><p>例如，表达式 <code>/at(.)?$/gm</code> 表示小写字符 <code>a</code> 后跟小写字符 <code>t</code> ，末尾可选除换行符外任意字符。根据 <code>m</code> 修饰符，现在表达式匹配每行的结尾。</p><pre>&quot;/.at(.)?$/&quot; =&gt; The fat
                cat sat
                on the <a href="#learn-regex"><strong>mat.</strong></a>
</pre><p><a href="https://regex101.com/r/hoGMkP/1" target="_blank" rel="noopener noreferrer">在线练习</a></p><pre>&quot;/.at(.)?$/gm&quot; =&gt; The <a href="#learn-regex"><strong>fat</strong></a>
                  cat <a href="#learn-regex"><strong>sat</strong></a>
                  on the <a href="#learn-regex"><strong>mat.</strong></a>
</pre><p><a href="https://regex101.com/r/E88WE2/1" target="_blank" rel="noopener noreferrer">在线练习</a></p><hr><h3 id="_6-贪婪匹配与惰性匹配-greedy-vs-lazy-matching" tabindex="-1"><a class="header-anchor" href="#_6-贪婪匹配与惰性匹配-greedy-vs-lazy-matching"><span>6. 贪婪匹配与惰性匹配 (Greedy vs lazy matching)</span></a></h3><p>正则表达式默认采用贪婪匹配模式，在该模式下意味着会匹配尽可能长的子串。我们可以使用 <code>?</code> 将贪婪匹配模式转化为惰性匹配模式。</p><pre>&quot;/(.*at)/&quot; =&gt; <a href="#learn-regex"><strong>The fat cat sat on the mat</strong></a>. </pre><p><a href="https://regex101.com/r/AyAdgJ/1" target="_blank" rel="noopener noreferrer">在线练习</a></p><pre>&quot;/(.*?at)/&quot; =&gt; <a href="#learn-regex"><strong>The fat</strong></a> cat sat on the mat. </pre><p><a href="https://regex101.com/r/AyAdgJ/2" target="_blank" rel="noopener noreferrer">在线练习</a></p><hr><h2 id="练习" tabindex="-1"><a class="header-anchor" href="#练习"><span>练习</span></a></h2><p>如下为一个匹配 IPV4 地址的正则表达式</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>((2[0-4]\\d|25[0-5]|[01]?\\d\\d?)\\.){3}(2[0-4]\\d|25[0-5]|[01]?\\d\\d?)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/img/202211011657445.png" alt="image-20221101164551760"></p><p><img src="http://cdn.ayusummer233.top/img/202211011655755.png" alt="download"></p><p><img src="http://cdn.ayusummer233.top/img/202211011655921.png" alt="image-20221101164601465"></p><p><img src="http://cdn.ayusummer233.top/img/202211011649394.png" alt="image-20221101164701283"></p><hr>`,190)]))}const s=t(n,[["render",d],["__file","正则表达式.html.vue"]]),h=JSON.parse('{"path":"/%E9%80%9A%E8%AF%86/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F.html","title":"正则表达式","lang":"zh-CN","frontmatter":{"description":"正则表达式 工具网站 learn-regex/README-cn.md at master · ziishaned/learn-regex (github.com) 简单方法学正则 image-20221101162934081 Regulex：JavaScript Regular Expression Visualizer (jex.im) 可视化正...","head":[["meta",{"property":"og:url","content":"https://233official.github.io/dailynotes/%E9%80%9A%E8%AF%86/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"DailyNotes"}],["meta",{"property":"og:title","content":"正则表达式"}],["meta",{"property":"og:description","content":"正则表达式 工具网站 learn-regex/README-cn.md at master · ziishaned/learn-regex (github.com) 简单方法学正则 image-20221101162934081 Regulex：JavaScript Regular Expression Visualizer (jex.im) 可视化正..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"http://cdn.ayusummer233.top/img/202211011629220.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-17T03:32:15.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-17T03:32:15.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"正则表达式\\",\\"image\\":[\\"http://cdn.ayusummer233.top/img/202211011629220.png\\",\\"http://cdn.ayusummer233.top/img/202211011632585.png\\",\\"http://cdn.ayusummer233.top/img/202211011612097.png\\",\\"http://cdn.ayusummer233.top/img/202211011620619.png\\",\\"http://cdn.ayusummer233.top/img/202211011628331.png\\",\\"http://cdn.ayusummer233.top/img/202211011630448.png\\",\\"http://cdn.ayusummer233.top/img/202211020913645.png\\",\\"http://cdn.ayusummer233.top/img/202211021056995.png\\",\\"http://cdn.ayusummer233.top/img/202211011657445.png\\",\\"http://cdn.ayusummer233.top/img/202211011655755.png\\",\\"http://cdn.ayusummer233.top/img/202211011655921.png\\",\\"http://cdn.ayusummer233.top/img/202211011649394.png\\"],\\"dateModified\\":\\"2025-04-17T03:32:15.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"咸鱼型233\\",\\"url\\":\\"https://233official.github.io/dailynotes/\\"}]}"]],"date":"2022-11-01T15:40:35.000Z"},"headers":[{"level":2,"title":"工具网站","slug":"工具网站","link":"#工具网站","children":[]},{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"1. 基本匹配","slug":"_1-基本匹配","link":"#_1-基本匹配","children":[]},{"level":2,"title":"2. 元字符","slug":"_2-元字符","link":"#_2-元字符","children":[]},{"level":2,"title":"2.1 点运算符 .","slug":"_2-1-点运算符","link":"#_2-1-点运算符","children":[]},{"level":2,"title":"2.2 字符集","slug":"_2-2-字符集","link":"#_2-2-字符集","children":[{"level":3,"title":"2.2.1 否定字符集","slug":"_2-2-1-否定字符集","link":"#_2-2-1-否定字符集","children":[]}]},{"level":2,"title":"2.3 重复次数","slug":"_2-3-重复次数","link":"#_2-3-重复次数","children":[{"level":3,"title":"2.3.1 * 号","slug":"_2-3-1-号","link":"#_2-3-1-号","children":[]},{"level":3,"title":"2.3.2 + 号","slug":"_2-3-2-号","link":"#_2-3-2-号","children":[]},{"level":3,"title":"2.3.3 ? 号","slug":"_2-3-3-号","link":"#_2-3-3-号","children":[]}]},{"level":2,"title":"2.4 {} 号","slug":"_2-4-号","link":"#_2-4-号","children":[]},{"level":2,"title":"2.5 (...) 特征标群","slug":"_2-5-特征标群","link":"#_2-5-特征标群","children":[]},{"level":2,"title":"2.6 | 或运算符","slug":"_2-6-或运算符","link":"#_2-6-或运算符","children":[]},{"level":2,"title":"2.7 转码特殊字符","slug":"_2-7-转码特殊字符","link":"#_2-7-转码特殊字符","children":[]},{"level":2,"title":"2.8 锚点","slug":"_2-8-锚点","link":"#_2-8-锚点","children":[{"level":3,"title":"2.8.1 ^ 号","slug":"_2-8-1-号","link":"#_2-8-1-号","children":[]},{"level":3,"title":"2.8.2 $ 号","slug":"_2-8-2-号","link":"#_2-8-2-号","children":[]}]},{"level":2,"title":"3. 简写字符集","slug":"_3-简写字符集","link":"#_3-简写字符集","children":[]},{"level":2,"title":"4. 零宽度断言(前后预查)","slug":"_4-零宽度断言-前后预查","link":"#_4-零宽度断言-前后预查","children":[{"level":3,"title":"4.1 ?=... 正先行断言","slug":"_4-1-正先行断言","link":"#_4-1-正先行断言","children":[]},{"level":3,"title":"4.2 ?!... 负先行断言","slug":"_4-2-负先行断言","link":"#_4-2-负先行断言","children":[]},{"level":3,"title":"4.3 ?<= ... 正后发断言","slug":"_4-3-正后发断言","link":"#_4-3-正后发断言","children":[]},{"level":3,"title":"4.4 ?<!... 负后发断言","slug":"_4-4-负后发断言","link":"#_4-4-负后发断言","children":[]}]},{"level":2,"title":"5. 标志","slug":"_5-标志","link":"#_5-标志","children":[{"level":3,"title":"5.1 忽略大小写 (Case Insensitive)","slug":"_5-1-忽略大小写-case-insensitive","link":"#_5-1-忽略大小写-case-insensitive","children":[]},{"level":3,"title":"5.2 全局搜索 (Global search)","slug":"_5-2-全局搜索-global-search","link":"#_5-2-全局搜索-global-search","children":[]},{"level":3,"title":"5.3 多行修饰符 (Multiline)","slug":"_5-3-多行修饰符-multiline","link":"#_5-3-多行修饰符-multiline","children":[]},{"level":3,"title":"6. 贪婪匹配与惰性匹配 (Greedy vs lazy matching)","slug":"_6-贪婪匹配与惰性匹配-greedy-vs-lazy-matching","link":"#_6-贪婪匹配与惰性匹配-greedy-vs-lazy-matching","children":[]}]},{"level":2,"title":"练习","slug":"练习","link":"#练习","children":[]}],"git":{"createdTime":1667317235000,"updatedTime":1744860735000,"contributors":[{"name":"233Mac","username":"233Mac","email":"ayusummer233@vip.qq.com","commits":2,"url":"https://github.com/233Mac"},{"name":"233","username":"233","email":"ayusummer233@vip.qq.com","commits":1,"url":"https://github.com/233"},{"name":"Ayusummer","username":"Ayusummer","email":"ayusummer233@gmail.com","commits":1,"url":"https://github.com/Ayusummer"},{"name":"233PC","username":"233PC","email":"ayusummer233@qq.com","commits":1,"url":"https://github.com/233PC"},{"name":"咸鱼型233","username":"咸鱼型233","email":"ayusummer233@qq.com","commits":3,"url":"https://github.com/咸鱼型233"}]},"readingTime":{"minutes":13.67,"words":4102},"filePathRelative":"通识/正则表达式.md","localizedDate":"2022年11月1日","excerpt":"","autoDesc":true}');export{s as comp,h as data};
